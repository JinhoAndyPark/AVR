
trackingsun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000aaa  00000b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000195  00800106  00800106  00000b44  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001f5  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000641  00000000  00000000  00000d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024d  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056c  00000000  00000000  000015e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a2  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003da  00000000  00000000  00001ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 39       	cpi	r26, 0x9B	; 155
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 99 02 	call	0x532	; 0x532 <main>
  c6:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <abs>:
	}
	return 0;	
}
int abs(int a,int b)
{
	if(a > b) return a - b;
  ce:	68 17       	cp	r22, r24
  d0:	79 07       	cpc	r23, r25
  d2:	2c f4       	brge	.+10     	; 0xde <abs+0x10>
  d4:	9c 01       	movw	r18, r24
  d6:	26 1b       	sub	r18, r22
  d8:	37 0b       	sbc	r19, r23
  da:	b9 01       	movw	r22, r18
  dc:	07 c0       	rjmp	.+14     	; 0xec <abs+0x1e>
	if(b > a) return b - a;
  de:	86 17       	cp	r24, r22
  e0:	97 07       	cpc	r25, r23
  e2:	1c f4       	brge	.+6      	; 0xea <abs+0x1c>
  e4:	68 1b       	sub	r22, r24
  e6:	79 0b       	sbc	r23, r25
  e8:	01 c0       	rjmp	.+2      	; 0xec <abs+0x1e>
  ea:	08 95       	ret
}
  ec:	cb 01       	movw	r24, r22
  ee:	08 95       	ret

000000f0 <Init_Uart>:
	}
}


void Init_Uart(U08 Com, U32 Uart_Baud)
{
  f0:	1f 93       	push	r17
  f2:	18 2f       	mov	r17, r24
  f4:	9a 01       	movw	r18, r20
  f6:	ab 01       	movw	r20, r22
	U16 Temp_UBRR;

	Temp_UBRR = 16000000L/(16L * Uart_Baud) - 1;   	// 통신 보레이트 계산식
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	44 1f       	adc	r20, r20
 100:	55 1f       	adc	r21, r21
 102:	8a 95       	dec	r24
 104:	d1 f7       	brne	.-12     	; 0xfa <Init_Uart+0xa>
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	74 e2       	ldi	r23, 0x24	; 36
 10a:	84 ef       	ldi	r24, 0xF4	; 244
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 31 05 	call	0xa62	; 0xa62 <__udivmodsi4>
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
													// U2X = 0 일때 (일반모드)
	if( Com == 0 )                           	
 116:	11 23       	and	r17, r17
 118:	69 f4       	brne	.+26     	; 0x134 <Init_Uart+0x44>
	{
		UBRR0H = (Temp_UBRR >> 8);              // 통신속도 설정
 11a:	30 93 90 00 	sts	0x0090, r19
		UBRR0L = (Temp_UBRR & 0x00FF);
 11e:	29 b9       	out	0x09, r18	; 9
		
		UCSR0A = (0<<RXC0)  | (1<<UDRE0);		// 수신,송신 상태비트 초기화
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	8b b9       	out	0x0b, r24	; 11
        UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);  		// 수신,송신 기능 활성화
 124:	88 e9       	ldi	r24, 0x98	; 152
 126:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = (3<<UCSZ00);				// START 1비트/DATA 8비트/STOP 1비트
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	80 93 95 00 	sts	0x0095, r24
		
		cbi( DDRE, 0 );                         // RXD0 핀 입력으로 설정
 12e:	10 98       	cbi	0x02, 0	; 2
		sbi( DDRE, 1 );                         // TXD0 핀 출력으로 설정
 130:	11 9a       	sbi	0x02, 1	; 2
 132:	11 c0       	rjmp	.+34     	; 0x156 <Init_Uart+0x66>
	}
	
	if( Com == 1)
 134:	11 30       	cpi	r17, 0x01	; 1
 136:	79 f4       	brne	.+30     	; 0x156 <Init_Uart+0x66>
	{
		UBRR1H = (Temp_UBRR >> 8);              // 통신속도 설정
 138:	30 93 98 00 	sts	0x0098, r19
		UBRR1L = (Temp_UBRR & 0x00FF);
 13c:	20 93 99 00 	sts	0x0099, r18

		UCSR1A = (0<<RXC1)  | (1<<UDRE1); 	// 수신,송신 상태비트 초기화
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	80 93 9b 00 	sts	0x009B, r24
		UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);    	// 수신,송신 기능 활성화
 146:	88 e9       	ldi	r24, 0x98	; 152
 148:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = (3<<UCSZ10);                   // START 1비트/DATA 8비트/STOP 1비트
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	80 93 9d 00 	sts	0x009D, r24
		
		cbi( DDRD, 2 );                         // RXD1 핀 입력으로 설정
 152:	8a 98       	cbi	0x11, 2	; 17
		sbi( DDRD, 3 );                         // TXD1 핀 출력으로 설정
 154:	8b 9a       	sbi	0x11, 3	; 17
	}
}
 156:	1f 91       	pop	r17
 158:	08 95       	ret

0000015a <Uart_Putch>:
}


void Uart_Putch(U08 Com, U08 Data)
{
	switch(Com)
 15a:	88 23       	and	r24, r24
 15c:	19 f0       	breq	.+6      	; 0x164 <Uart_Putch+0xa>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	59 f4       	brne	.+22     	; 0x178 <Uart_Putch+0x1e>
 162:	04 c0       	rjmp	.+8      	; 0x16c <Uart_Putch+0x12>
	{
		case 0:
			while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
 164:	5d 9b       	sbis	0x0b, 5	; 11
 166:	fe cf       	rjmp	.-4      	; 0x164 <Uart_Putch+0xa>
			UDR0 = Data;                     // 데이터를 전송한다
 168:	6c b9       	out	0x0c, r22	; 12
 16a:	08 95       	ret
			break;
		
		case 1:
			while(!( UCSR1A & (1<<UDRE1)) );    // 송신가능시점까지 대기
 16c:	80 91 9b 00 	lds	r24, 0x009B
 170:	85 ff       	sbrs	r24, 5
 172:	fc cf       	rjmp	.-8      	; 0x16c <Uart_Putch+0x12>
			UDR1 = Data;                     // 데이터를 전송한다
 174:	60 93 9c 00 	sts	0x009C, r22
 178:	08 95       	ret

0000017a <Uart_U10Bit_PutNum>:
		sbi( DDRD, 3 );                         // TXD1 핀 출력으로 설정
	}
}

void Uart_U10Bit_PutNum(U08 Com, U16 NumData)
{
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	f8 2e       	mov	r15, r24
 182:	8b 01       	movw	r16, r22
	U16 TempData;

	TempData =  NumData/1000;
	Uart_Putch(Com, TempData+48);			// 1000 자리 무조건 출력
 184:	cb 01       	movw	r24, r22
 186:	68 ee       	ldi	r22, 0xE8	; 232
 188:	73 e0       	ldi	r23, 0x03	; 3
 18a:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 18e:	60 5d       	subi	r22, 0xD0	; 208
 190:	8f 2d       	mov	r24, r15
 192:	0e 94 ad 00 	call	0x15a	; 0x15a <Uart_Putch>
	
	TempData = (NumData%1000)/100;
	Uart_Putch(Com, TempData+48);			// 100  자리 무조건 출력
 196:	c8 01       	movw	r24, r16
 198:	68 ee       	ldi	r22, 0xE8	; 232
 19a:	73 e0       	ldi	r23, 0x03	; 3
 19c:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 1a0:	64 e6       	ldi	r22, 0x64	; 100
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 1a8:	60 5d       	subi	r22, 0xD0	; 208
 1aa:	8f 2d       	mov	r24, r15
 1ac:	0e 94 ad 00 	call	0x15a	; 0x15a <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      		// 10   자리 무조건 출력
 1b0:	c8 01       	movw	r24, r16
 1b2:	64 e6       	ldi	r22, 0x64	; 100
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 1ba:	6a e0       	ldi	r22, 0x0A	; 10
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 1c2:	60 5d       	subi	r22, 0xD0	; 208
 1c4:	8f 2d       	mov	r24, r15
 1c6:	0e 94 ad 00 	call	0x15a	; 0x15a <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);      		// 1    자리 무조건 출력
 1ca:	c8 01       	movw	r24, r16
 1cc:	6a e0       	ldi	r22, 0x0A	; 10
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 1d4:	68 2f       	mov	r22, r24
 1d6:	60 5d       	subi	r22, 0xD0	; 208
 1d8:	8f 2d       	mov	r24, r15
 1da:	0e 94 ad 00 	call	0x15a	; 0x15a <Uart_Putch>
}
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	08 95       	ret

000001e6 <TxPacket>:
			break;
	}
}

U08 TxPacket(U08 ID, U08 Instruction, U08 ParameterLength)
{
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29

    U08 Count;					// 패킷의 전송 번호
    U08 CheckSum;				// 패킷의 오류 검출 방법
    U08 PacketLength;			// 매개변수들의 총 갯수
	
	TxBuffer[0] = 0xFF;						// Start CODE
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
 1f2:	90 93 13 02 	sts	0x0213, r25
	TxBuffer[1] = 0xFF;						// Start CODE
 1f6:	90 93 14 02 	sts	0x0214, r25
	TxBuffer[2] = ID;						// 모터ID (0~253), BroadcastingID=0xFE
 1fa:	80 93 15 02 	sts	0x0215, r24
	TxBuffer[3] = ParameterLength + 2;		// Length(Instruction + ParamterLength + Checksum)
 1fe:	4e 5f       	subi	r20, 0xFE	; 254
 200:	40 93 16 02 	sts	0x0216, r20
 204:	42 50       	subi	r20, 0x02	; 2
	TxBuffer[4] = Instruction;				// 명령어 선택(단일쓰기,다중쓰기,읽기 등)
 206:	60 93 17 02 	sts	0x0217, r22
 20a:	e0 e1       	ldi	r30, 0x10	; 16
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	a8 e1       	ldi	r26, 0x18	; 24
 210:	b2 e0       	ldi	r27, 0x02	; 2
	
	for(Count = 0; Count < ParameterLength; Count++)
 212:	24 2f       	mov	r18, r20
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	2e 0f       	add	r18, r30
 218:	3f 1f       	adc	r19, r31
 21a:	02 c0       	rjmp	.+4      	; 0x220 <TxPacket+0x3a>
	{
		TxBuffer[Count+5] = Parameter[Count];			// 매개변수 지정
 21c:	81 91       	ld	r24, Z+
 21e:	8d 93       	st	X+, r24
	TxBuffer[1] = 0xFF;						// Start CODE
	TxBuffer[2] = ID;						// 모터ID (0~253), BroadcastingID=0xFE
	TxBuffer[3] = ParameterLength + 2;		// Length(Instruction + ParamterLength + Checksum)
	TxBuffer[4] = Instruction;				// 명령어 선택(단일쓰기,다중쓰기,읽기 등)
	
	for(Count = 0; Count < ParameterLength; Count++)
 220:	e2 17       	cp	r30, r18
 222:	f3 07       	cpc	r31, r19
 224:	d9 f7       	brne	.-10     	; 0x21c <TxPacket+0x36>
	{
		TxBuffer[Count+5] = Parameter[Count];			// 매개변수 지정
	}
	
    CheckSum = 0;										// CheckSum 초기화
	PacketLength = ParameterLength + 4 + 2;				// 패킷의 전체 길이 설정
 226:	96 e0       	ldi	r25, 0x06	; 6
 228:	f9 2e       	mov	r15, r25
 22a:	f4 0e       	add	r15, r20
 22c:	52 e0       	ldi	r21, 0x02	; 2
 22e:	40 e0       	ldi	r20, 0x00	; 0
	
	for(Count = 2; Count < PacketLength-1; Count++)  	// Except 0xFF, Checksum
 230:	2f 2d       	mov	r18, r15
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	21 50       	subi	r18, 0x01	; 1
 236:	30 40       	sbci	r19, 0x00	; 0
 238:	03 c0       	rjmp	.+6      	; 0x240 <TxPacket+0x5a>
	{
		CheckSum += TxBuffer[Count];
 23a:	80 81       	ld	r24, Z
 23c:	48 0f       	add	r20, r24
	}
	
    CheckSum = 0;										// CheckSum 초기화
	PacketLength = ParameterLength + 4 + 2;				// 패킷의 전체 길이 설정
	
	for(Count = 2; Count < PacketLength-1; Count++)  	// Except 0xFF, Checksum
 23e:	5f 5f       	subi	r21, 0xFF	; 255
 240:	85 2f       	mov	r24, r21
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	ed 5e       	subi	r30, 0xED	; 237
 248:	fd 4f       	sbci	r31, 0xFD	; 253
 24a:	82 17       	cp	r24, r18
 24c:	93 07       	cpc	r25, r19
 24e:	ac f3       	brlt	.-22     	; 0x23a <TxPacket+0x54>
	{
		CheckSum += TxBuffer[Count];
	}
	
	TxBuffer[Count] = ~CheckSum;                       	// Checksum 생성
 250:	40 95       	com	r20
 252:	40 83       	st	Z, r20


	sbi(PORTE, 3);                                         	// RS485 출력모드로 설정
 254:	1b 9a       	sbi	0x03, 3	; 3
 256:	03 e1       	ldi	r16, 0x13	; 19
 258:	12 e0       	ldi	r17, 0x02	; 2
	
    for(Count = 0; Count < PacketLength; Count++)
 25a:	cf 2d       	mov	r28, r15
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	c0 0f       	add	r28, r16
 260:	d1 1f       	adc	r29, r17
 262:	07 c0       	rjmp	.+14     	; 0x272 <TxPacket+0x8c>
	{
		sbi(UCSR0A, 6);						     		// 송신완료 상태로 전환
 264:	5e 9a       	sbi	0x0b, 6	; 11
		Uart_Putch( 0, TxBuffer[Count] );         	// 순차적 패킷전송 MCU->DX
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	f8 01       	movw	r30, r16
 26a:	61 91       	ld	r22, Z+
 26c:	8f 01       	movw	r16, r30
 26e:	0e 94 ad 00 	call	0x15a	; 0x15a <Uart_Putch>
	TxBuffer[Count] = ~CheckSum;                       	// Checksum 생성


	sbi(PORTE, 3);                                         	// RS485 출력모드로 설정
	
    for(Count = 0; Count < PacketLength; Count++)
 272:	0c 17       	cp	r16, r28
 274:	1d 07       	cpc	r17, r29
 276:	b1 f7       	brne	.-20     	; 0x264 <TxPacket+0x7e>
	{
		sbi(UCSR0A, 6);						     		// 송신완료 상태로 전환
		Uart_Putch( 0, TxBuffer[Count] );         	// 순차적 패킷전송 MCU->DX
	}
	
	while(!(UCSR0A & (1<<TXC0)));                         	// 송신버퍼 빌때까지 기다림
 278:	5e 9b       	sbis	0x0b, 6	; 11
 27a:	fe cf       	rjmp	.-4      	; 0x278 <TxPacket+0x92>
	cbi(PORTE, 3);                                          	// RS485 입력모드로 설정
 27c:	1b 98       	cbi	0x03, 3	; 3
	
	return(PacketLength);								// 패킷의 전체길이 리턴
}
 27e:	8f 2d       	mov	r24, r15
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	08 95       	ret

0000028c <DX_Action>:

void DX_Action(U08 ID, U08 Position_H, U08 Position_L, U08 Speed_H, U08 Speed_L)
{
 28c:	0f 93       	push	r16
	Parameter[0] = 30;						//goal position address : 30
 28e:	9e e1       	ldi	r25, 0x1E	; 30
 290:	90 93 10 01 	sts	0x0110, r25
	Parameter[1] = Position_L;				//Low 8bit at goal position
 294:	40 93 11 01 	sts	0x0111, r20
	Parameter[2] = Position_H;				//High 8bit at goal position
 298:	60 93 12 01 	sts	0x0112, r22
	Parameter[3] = Speed_L;				//Low 8bit at moving speed 
 29c:	00 93 13 01 	sts	0x0113, r16
	Parameter[4] = Speed_H;				//High 8bit at moving speed
 2a0:	20 93 14 01 	sts	0x0114, r18
	TxPacketLength = TxPacket(ID, 0x03, 5);
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	45 e0       	ldi	r20, 0x05	; 5
 2a8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TxPacket>
 2ac:	80 93 91 01 	sts	0x0191, r24
}
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <DX_Angle_Action>:
{
	if(a > b) return a - b;
	if(b > a) return b - a;
}
void DX_Angle_Action(int id, double angle)
{
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
 2c6:	6a 01       	movw	r12, r20
 2c8:	7b 01       	movw	r14, r22
	///3ff,000
	//1023 ,0
	if(angle < 100) angle = 100;
 2ca:	cb 01       	movw	r24, r22
 2cc:	ba 01       	movw	r22, r20
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	48 ec       	ldi	r20, 0xC8	; 200
 2d4:	52 e4       	ldi	r21, 0x42	; 66
 2d6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__cmpsf2>
 2da:	88 23       	and	r24, r24
 2dc:	5c f4       	brge	.+22     	; 0x2f4 <DX_Angle_Action+0x40>
 2de:	0f 2e       	mov	r0, r31
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	cf 2e       	mov	r12, r31
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	df 2e       	mov	r13, r31
 2e8:	f8 ec       	ldi	r31, 0xC8	; 200
 2ea:	ef 2e       	mov	r14, r31
 2ec:	f2 e4       	ldi	r31, 0x42	; 66
 2ee:	ff 2e       	mov	r15, r31
 2f0:	f0 2d       	mov	r31, r0
 2f2:	14 c0       	rjmp	.+40     	; 0x31c <DX_Angle_Action+0x68>
	if(angle > 200) angle = 200;
 2f4:	c7 01       	movw	r24, r14
 2f6:	b6 01       	movw	r22, r12
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	48 e4       	ldi	r20, 0x48	; 72
 2fe:	53 e4       	ldi	r21, 0x43	; 67
 300:	0e 94 a3 04 	call	0x946	; 0x946 <__gesf2>
 304:	18 16       	cp	r1, r24
 306:	54 f4       	brge	.+20     	; 0x31c <DX_Angle_Action+0x68>
 308:	0f 2e       	mov	r0, r31
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	cf 2e       	mov	r12, r31
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	df 2e       	mov	r13, r31
 312:	f8 e4       	ldi	r31, 0x48	; 72
 314:	ef 2e       	mov	r14, r31
 316:	f3 e4       	ldi	r31, 0x43	; 67
 318:	ff 2e       	mov	r15, r31
 31a:	f0 2d       	mov	r31, r0

	int temp = (int)(1023.0 * angle / 300.0);
 31c:	c7 01       	movw	r24, r14
 31e:	b6 01       	movw	r22, r12
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 ec       	ldi	r19, 0xC0	; 192
 324:	4f e7       	ldi	r20, 0x7F	; 127
 326:	54 e4       	ldi	r21, 0x44	; 68
 328:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	46 e9       	ldi	r20, 0x96	; 150
 332:	53 e4       	ldi	r21, 0x43	; 67
 334:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divsf3>
 338:	0e 94 c0 03 	call	0x780	; 0x780 <__fixsfsi>
 33c:	8b 01       	movw	r16, r22
 33e:	9c 01       	movw	r18, r24
	int high = temp/256;
	int low = temp % 256;
	
	DX_Action(id, high, low, 0x00, 0x44); 
 340:	cb 01       	movw	r24, r22
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divmodhi4>
 34a:	e6 2f       	mov	r30, r22
 34c:	c8 01       	movw	r24, r16
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divmodhi4>
 356:	48 2f       	mov	r20, r24
 358:	8c 2f       	mov	r24, r28
 35a:	6e 2f       	mov	r22, r30
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	04 e4       	ldi	r16, 0x44	; 68
 360:	0e 94 46 01 	call	0x28c	; 0x28c <DX_Action>
	if(id == 2) horizontalAngle = angle;
 364:	c2 30       	cpi	r28, 0x02	; 2
 366:	d1 05       	cpc	r29, r1
 368:	49 f4       	brne	.+18     	; 0x37c <DX_Angle_Action+0xc8>
 36a:	c7 01       	movw	r24, r14
 36c:	b6 01       	movw	r22, r12
 36e:	0e 94 c5 03 	call	0x78a	; 0x78a <__fixunssfsi>
 372:	70 93 03 01 	sts	0x0103, r23
 376:	60 93 02 01 	sts	0x0102, r22
 37a:	0a c0       	rjmp	.+20     	; 0x390 <DX_Angle_Action+0xdc>
	if(id == 1) verticalAngle = angle;
 37c:	21 97       	sbiw	r28, 0x01	; 1
 37e:	41 f4       	brne	.+16     	; 0x390 <DX_Angle_Action+0xdc>
 380:	c7 01       	movw	r24, r14
 382:	b6 01       	movw	r22, r12
 384:	0e 94 c5 03 	call	0x78a	; 0x78a <__fixunssfsi>
 388:	70 93 05 01 	sts	0x0105, r23
 38c:	60 93 04 01 	sts	0x0104, r22
	//Uart_U10Bit_PutNum(1,low);
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	df 90       	pop	r13
 39e:	cf 90       	pop	r12
 3a0:	08 95       	ret

000003a2 <Init_ADC>:
}


void Init_ADC(void)
{
	DDRF = 0x00; 			   //ADC포트 입력 설정
 3a2:	10 92 61 00 	sts	0x0061, r1

	ADMUX = 0x00;
 3a6:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;			   //레지스터 초기화 및 AREF단자로 입력전압 사용
 3a8:	16 b8       	out	0x06, r1	; 6

	sbi( ADCSRA, ADPS0 );
 3aa:	30 9a       	sbi	0x06, 0	; 6
	sbi( ADCSRA, ADPS1 );
 3ac:	31 9a       	sbi	0x06, 1	; 6
	sbi( ADCSRA, ADPS2 );		//프리스케일러 128분주
 3ae:	32 9a       	sbi	0x06, 2	; 6


	sbi( ADCSRA, ADEN );		   	// ADC 인에이블
 3b0:	37 9a       	sbi	0x06, 7	; 6
	ADMUX = 1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	87 b9       	out	0x07, r24	; 7
}
 3b6:	08 95       	ret

000003b8 <Init_Main>:
volatile U16 horizontal = 0;
volatile U16 vertical = 0;

void Init_Main(void)
{
	Init_Uart(0, 1000000);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	40 e4       	ldi	r20, 0x40	; 64
 3bc:	52 e4       	ldi	r21, 0x42	; 66
 3be:	6f e0       	ldi	r22, 0x0F	; 15
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	0e 94 78 00 	call	0xf0	; 0xf0 <Init_Uart>
	Init_Uart(1, 57600);
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	51 ee       	ldi	r21, 0xE1	; 225
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	0e 94 78 00 	call	0xf0	; 0xf0 <Init_Uart>
	Init_ADC() ;
 3d4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Init_ADC>
	
	sbi(DDRE, 3);
 3d8:	13 9a       	sbi	0x02, 3	; 2
	sbi(DDRA, 0);
 3da:	d0 9a       	sbi	0x1a, 0	; 26
	sbi(PORTA, 0) ; 
 3dc:	d8 9a       	sbi	0x1b, 0	; 27
}
 3de:	08 95       	ret

000003e0 <ADC_Read>:

U16 ADC_Read(U08 Channel)
{
	U16 value = 0;

	ADMUX = Channel;
 3e0:	87 b9       	out	0x07, r24	; 7
	
	sbi( ADCSRA, ADSC );		// ADC Conversion Start
 3e2:	36 9a       	sbi	0x06, 6	; 6
	
	while( ADCSRA & ( 1 << ADSC ) ); 	// wait ADC conversion complete
 3e4:	36 99       	sbic	0x06, 6	; 6
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <ADC_Read+0x4>

	value = ADCL;
 3e8:	24 b1       	in	r18, 0x04	; 4
 3ea:	30 e0       	ldi	r19, 0x00	; 0
	value |= (U16)ADCH << 8;
 3ec:	45 b1       	in	r20, 0x05	; 5
 3ee:	94 2f       	mov	r25, r20
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	28 2b       	or	r18, r24
 3f4:	39 2b       	or	r19, r25
	
	return value;
}
 3f6:	c9 01       	movw	r24, r18
 3f8:	08 95       	ret

000003fa <ADC_Average>:

U16 ADC_Average(U08 Channel, U08 number)		//Average ADC
{
 3fa:	7f 92       	push	r7
 3fc:	8f 92       	push	r8
 3fe:	9f 92       	push	r9
 400:	af 92       	push	r10
 402:	bf 92       	push	r11
 404:	cf 92       	push	r12
 406:	df 92       	push	r13
 408:	ef 92       	push	r14
 40a:	ff 92       	push	r15
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	df 93       	push	r29
 412:	cf 93       	push	r28
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	78 2e       	mov	r7, r24
 41a:	e6 2e       	mov	r14, r22
		value += temp[cnt];
	}
	value /= number;
	
	return value;
}
 41c:	8d b6       	in	r8, 0x3d	; 61
 41e:	9e b6       	in	r9, 0x3e	; 62
}

U16 ADC_Average(U08 Channel, U08 number)		//Average ADC
{
	U16 value = 0;
	U16 temp[number];
 420:	c6 2e       	mov	r12, r22
 422:	dd 24       	eor	r13, r13
 424:	c6 01       	movw	r24, r12
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	2d b7       	in	r18, 0x3d	; 61
 42c:	3e b7       	in	r19, 0x3e	; 62
 42e:	28 1b       	sub	r18, r24
 430:	39 0b       	sbc	r19, r25
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	3e bf       	out	0x3e, r19	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	2d bf       	out	0x3d, r18	; 61
 43c:	ad b6       	in	r10, 0x3d	; 61
 43e:	be b6       	in	r11, 0x3e	; 62
 440:	08 94       	sec
 442:	a1 1c       	adc	r10, r1
 444:	b1 1c       	adc	r11, r1
 446:	00 e0       	ldi	r16, 0x00	; 0
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	ff 24       	eor	r15, r15
 44c:	0e c0       	rjmp	.+28     	; 0x46a <ADC_Average+0x70>

	for(U08 cnt=0; cnt<number; cnt++)
	{
		temp[cnt] = ADC_Read(Channel);
 44e:	87 2d       	mov	r24, r7
 450:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ADC_Read>
 454:	ef 2d       	mov	r30, r15
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	ea 0d       	add	r30, r10
 45e:	fb 1d       	adc	r31, r11
 460:	91 83       	std	Z+1, r25	; 0x01
 462:	80 83       	st	Z, r24
		value += temp[cnt];
 464:	08 0f       	add	r16, r24
 466:	19 1f       	adc	r17, r25
U16 ADC_Average(U08 Channel, U08 number)		//Average ADC
{
	U16 value = 0;
	U16 temp[number];

	for(U08 cnt=0; cnt<number; cnt++)
 468:	f3 94       	inc	r15
 46a:	fe 14       	cp	r15, r14
 46c:	80 f3       	brcs	.-32     	; 0x44e <ADC_Average+0x54>
 46e:	c8 01       	movw	r24, r16
 470:	b6 01       	movw	r22, r12
 472:	0e 94 0a 05 	call	0xa14	; 0xa14 <__udivmodhi4>
 476:	cb 01       	movw	r24, r22
		value += temp[cnt];
	}
	value /= number;
	
	return value;
}
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	9e be       	out	0x3e, r9	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	8d be       	out	0x3d, r8	; 61
 482:	cf 91       	pop	r28
 484:	df 91       	pop	r29
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	bf 90       	pop	r11
 494:	af 90       	pop	r10
 496:	9f 90       	pop	r9
 498:	8f 90       	pop	r8
 49a:	7f 90       	pop	r7
 49c:	08 95       	ret

0000049e <Sensor_Reading>:
	//Uart_U10Bit_PutNum(1,low);
}

void Sensor_Reading()
{
	top_sensing = ADC_Average(0,50);//ADC_Read(0);
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	62 e3       	ldi	r22, 0x32	; 50
 4a2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <ADC_Average>
 4a6:	90 93 9a 02 	sts	0x029A, r25
 4aa:	80 93 99 02 	sts	0x0299, r24
	down_sensing = ADC_Average(2,50);//ADC_Read(2);
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	62 e3       	ldi	r22, 0x32	; 50
 4b2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <ADC_Average>
 4b6:	90 93 96 02 	sts	0x0296, r25
 4ba:	80 93 95 02 	sts	0x0295, r24
	right_sensing = ADC_Average(3,50);//ADC_Read(3);
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	62 e3       	ldi	r22, 0x32	; 50
 4c2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <ADC_Average>
 4c6:	90 93 94 02 	sts	0x0294, r25
 4ca:	80 93 93 02 	sts	0x0293, r24
	left_sensing = ADC_Average(1,50);//ADC_Read(1);
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	62 e3       	ldi	r22, 0x32	; 50
 4d2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <ADC_Average>
 4d6:	90 93 98 02 	sts	0x0298, r25
 4da:	80 93 97 02 	sts	0x0297, r24
	Uart_Putch(1,' ');
	Uart_U10Bit_PutNum(1,left_sensing);
	Uart_Putch(1,'\r');
	Uart_Putch(1,'\n');
*/
	if(top_sensing<200&&down_sensing<200&&right_sensing<200&&left_sensing<200)
 4de:	80 91 99 02 	lds	r24, 0x0299
 4e2:	90 91 9a 02 	lds	r25, 0x029A
 4e6:	88 3c       	cpi	r24, 0xC8	; 200
 4e8:	91 05       	cpc	r25, r1
 4ea:	e8 f4       	brcc	.+58     	; 0x526 <Sensor_Reading+0x88>
 4ec:	80 91 95 02 	lds	r24, 0x0295
 4f0:	90 91 96 02 	lds	r25, 0x0296
 4f4:	88 3c       	cpi	r24, 0xC8	; 200
 4f6:	91 05       	cpc	r25, r1
 4f8:	b0 f4       	brcc	.+44     	; 0x526 <Sensor_Reading+0x88>
 4fa:	80 91 93 02 	lds	r24, 0x0293
 4fe:	90 91 94 02 	lds	r25, 0x0294
 502:	88 3c       	cpi	r24, 0xC8	; 200
 504:	91 05       	cpc	r25, r1
 506:	78 f4       	brcc	.+30     	; 0x526 <Sensor_Reading+0x88>
 508:	80 91 97 02 	lds	r24, 0x0297
 50c:	90 91 98 02 	lds	r25, 0x0298
 510:	88 3c       	cpi	r24, 0xC8	; 200
 512:	91 05       	cpc	r25, r1
 514:	40 f4       	brcc	.+16     	; 0x526 <Sensor_Reading+0x88>
	{
		cbi(PORTA,0);
 516:	d8 98       	cbi	0x1b, 0	; 27
		sensingNullFlag = 1;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	90 93 0b 01 	sts	0x010B, r25
 520:	80 93 0a 01 	sts	0x010A, r24
 524:	08 95       	ret
	}
	else 
	{
		sbi(PORTA,0);
 526:	d8 9a       	sbi	0x1b, 0	; 27
		sensingNullFlag = 0;
 528:	10 92 0b 01 	sts	0x010B, r1
 52c:	10 92 0a 01 	sts	0x010A, r1
 530:	08 95       	ret

00000532 <main>:
	sbi(DDRA, 0);
	sbi(PORTA, 0) ; 
}

int main(void)
{
 532:	0f 93       	push	r16
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
	Init_Main();
 538:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Init_Main>
 53c:	80 e1       	ldi	r24, 0x10	; 16
 53e:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 540:	20 e9       	ldi	r18, 0x90	; 144
 542:	31 e0       	ldi	r19, 0x01	; 1
 544:	f9 01       	movw	r30, r18
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <main+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 54a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54c:	d9 f7       	brne	.-10     	; 0x544 <main+0x12>
	//Down			//Top(up : 150++ down : 150--)
	//				//
	//////////////////
			//Right
	_delay_ms(1000); 
	DX_Action(1, 0x02, 0x00, 0x01, 0x44);
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	62 e0       	ldi	r22, 0x02	; 2
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	04 e4       	ldi	r16, 0x44	; 68
 558:	0e 94 46 01 	call	0x28c	; 0x28c <DX_Action>
	DX_Action(2, 0x02, 0x30, 0x01, 0x44); // 모터를 초기값으로 이동시킨다.
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	62 e0       	ldi	r22, 0x02	; 2
 560:	40 e3       	ldi	r20, 0x30	; 48
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	0e 94 46 01 	call	0x28c	; 0x28c <DX_Action>
 568:	80 e3       	ldi	r24, 0x30	; 48
 56a:	95 e7       	ldi	r25, 0x75	; 117
 56c:	20 e9       	ldi	r18, 0x90	; 144
 56e:	31 e0       	ldi	r19, 0x01	; 1
 570:	f9 01       	movw	r30, r18
 572:	31 97       	sbiw	r30, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 576:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 578:	d9 f7       	brne	.-10     	; 0x570 <main+0x3e>
 57a:	c0 e9       	ldi	r28, 0x90	; 144
 57c:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_ms(3000); 
	
	while(1)
	{
		Sensor_Reading();
 57e:	0e 94 4f 02 	call	0x49e	; 0x49e <Sensor_Reading>
 582:	80 e1       	ldi	r24, 0x10	; 16
 584:	97 e2       	ldi	r25, 0x27	; 39
 586:	fe 01       	movw	r30, r28
 588:	31 97       	sbiw	r30, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <main+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 58c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 58e:	d9 f7       	brne	.-10     	; 0x586 <main+0x54>
		_delay_ms(1000); // 센싱 딜레이

		if(sensingNullFlag)
 590:	80 91 0a 01 	lds	r24, 0x010A
 594:	90 91 0b 01 	lds	r25, 0x010B
 598:	89 2b       	or	r24, r25
 59a:	71 f0       	breq	.+28     	; 0x5b8 <main+0x86>
		{
			DX_Action(1, 0x02, 0x00, 0x00, 0x44);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	62 e0       	ldi	r22, 0x02	; 2
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	04 e4       	ldi	r16, 0x44	; 68
 5a6:	0e 94 46 01 	call	0x28c	; 0x28c <DX_Action>
			DX_Action(2, 0x02, 0x30, 0x00, 0x44); // 모터를 초기값으로 이동시킨다.
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	62 e0       	ldi	r22, 0x02	; 2
 5ae:	40 e3       	ldi	r20, 0x30	; 48
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	0e 94 46 01 	call	0x28c	; 0x28c <DX_Action>
 5b6:	e3 cf       	rjmp	.-58     	; 0x57e <main+0x4c>
			continue;
		}
		
		horizontal = (int)((top_sensing - down_sensing) * sensing_weight)/3; 	
 5b8:	80 91 99 02 	lds	r24, 0x0299
 5bc:	90 91 9a 02 	lds	r25, 0x029A
 5c0:	20 91 95 02 	lds	r18, 0x0295
 5c4:	30 91 96 02 	lds	r19, 0x0296
 5c8:	40 91 00 01 	lds	r20, 0x0100
 5cc:	50 91 01 01 	lds	r21, 0x0101
 5d0:	82 1b       	sub	r24, r18
 5d2:	93 0b       	sbc	r25, r19
 5d4:	9c 01       	movw	r18, r24
 5d6:	24 9f       	mul	r18, r20
 5d8:	c0 01       	movw	r24, r0
 5da:	25 9f       	mul	r18, r21
 5dc:	90 0d       	add	r25, r0
 5de:	34 9f       	mul	r19, r20
 5e0:	90 0d       	add	r25, r0
 5e2:	11 24       	eor	r1, r1
 5e4:	63 e0       	ldi	r22, 0x03	; 3
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divmodhi4>
 5ec:	70 93 0d 01 	sts	0x010D, r23
 5f0:	60 93 0c 01 	sts	0x010C, r22
		vertical = (int)((right_sensing- left_sensing) * sensing_weight )/3; 	
 5f4:	80 91 93 02 	lds	r24, 0x0293
 5f8:	90 91 94 02 	lds	r25, 0x0294
 5fc:	20 91 97 02 	lds	r18, 0x0297
 600:	30 91 98 02 	lds	r19, 0x0298
 604:	40 91 00 01 	lds	r20, 0x0100
 608:	50 91 01 01 	lds	r21, 0x0101
 60c:	82 1b       	sub	r24, r18
 60e:	93 0b       	sbc	r25, r19
 610:	9c 01       	movw	r18, r24
 612:	24 9f       	mul	r18, r20
 614:	c0 01       	movw	r24, r0
 616:	25 9f       	mul	r18, r21
 618:	90 0d       	add	r25, r0
 61a:	34 9f       	mul	r19, r20
 61c:	90 0d       	add	r25, r0
 61e:	11 24       	eor	r1, r1
 620:	63 e0       	ldi	r22, 0x03	; 3
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divmodhi4>
 628:	70 93 0f 01 	sts	0x010F, r23
 62c:	60 93 0e 01 	sts	0x010E, r22
	Uart_U10Bit_PutNum(1,vertical * -1);
	Uart_Putch(1,'\r');
	Uart_Putch(1,'\n');
*/

		DX_Angle_Action(2,horizontalAngle - horizontal);
 630:	60 91 02 01 	lds	r22, 0x0102
 634:	70 91 03 01 	lds	r23, 0x0103
 638:	20 91 0c 01 	lds	r18, 0x010C
 63c:	30 91 0d 01 	lds	r19, 0x010D
 640:	62 1b       	sub	r22, r18
 642:	73 0b       	sbc	r23, r19
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__floatunsisf>
 64c:	ab 01       	movw	r20, r22
 64e:	bc 01       	movw	r22, r24
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DX_Angle_Action>
		DX_Angle_Action(1,verticalAngle - vertical);
 658:	60 91 04 01 	lds	r22, 0x0104
 65c:	70 91 05 01 	lds	r23, 0x0105
 660:	20 91 0e 01 	lds	r18, 0x010E
 664:	30 91 0f 01 	lds	r19, 0x010F
 668:	62 1b       	sub	r22, r18
 66a:	73 0b       	sbc	r23, r19
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__floatunsisf>
 674:	ab 01       	movw	r20, r22
 676:	bc 01       	movw	r22, r24
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DX_Angle_Action>

		preHozizontal = horizontal;
 680:	80 91 0c 01 	lds	r24, 0x010C
 684:	90 91 0d 01 	lds	r25, 0x010D
 688:	90 93 07 01 	sts	0x0107, r25
 68c:	80 93 06 01 	sts	0x0106, r24
		preVertical = vertical;
 690:	80 91 0e 01 	lds	r24, 0x010E
 694:	90 91 0f 01 	lds	r25, 0x010F
 698:	90 93 09 01 	sts	0x0109, r25
 69c:	80 93 08 01 	sts	0x0108, r24
 6a0:	6e cf       	rjmp	.-292    	; 0x57e <main+0x4c>

000006a2 <exit>:
 6a2:	f8 94       	cli
 6a4:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <_exit>

000006a8 <__cmpsf2>:
 6a8:	d9 d0       	rcall	.+434    	; 0x85c <__fp_cmp>
 6aa:	08 f4       	brcc	.+2      	; 0x6ae <__cmpsf2+0x6>
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	08 95       	ret

000006b0 <__divsf3>:
 6b0:	0c d0       	rcall	.+24     	; 0x6ca <__divsf3x>
 6b2:	0f c1       	rjmp	.+542    	; 0x8d2 <__fp_round>
 6b4:	07 d1       	rcall	.+526    	; 0x8c4 <__fp_pscB>
 6b6:	40 f0       	brcs	.+16     	; 0x6c8 <__divsf3+0x18>
 6b8:	fe d0       	rcall	.+508    	; 0x8b6 <__fp_pscA>
 6ba:	30 f0       	brcs	.+12     	; 0x6c8 <__divsf3+0x18>
 6bc:	21 f4       	brne	.+8      	; 0x6c6 <__divsf3+0x16>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <__divsf3+0x18>
 6c2:	f0 c0       	rjmp	.+480    	; 0x8a4 <__fp_inf>
 6c4:	51 11       	cpse	r21, r1
 6c6:	39 c1       	rjmp	.+626    	; 0x93a <__fp_szero>
 6c8:	f3 c0       	rjmp	.+486    	; 0x8b0 <__fp_nan>

000006ca <__divsf3x>:
 6ca:	14 d1       	rcall	.+552    	; 0x8f4 <__fp_split3>
 6cc:	98 f3       	brcs	.-26     	; 0x6b4 <__divsf3+0x4>

000006ce <__divsf3_pse>:
 6ce:	99 23       	and	r25, r25
 6d0:	c9 f3       	breq	.-14     	; 0x6c4 <__divsf3+0x14>
 6d2:	55 23       	and	r21, r21
 6d4:	b1 f3       	breq	.-20     	; 0x6c2 <__divsf3+0x12>
 6d6:	95 1b       	sub	r25, r21
 6d8:	55 0b       	sbc	r21, r21
 6da:	bb 27       	eor	r27, r27
 6dc:	aa 27       	eor	r26, r26
 6de:	62 17       	cp	r22, r18
 6e0:	73 07       	cpc	r23, r19
 6e2:	84 07       	cpc	r24, r20
 6e4:	38 f0       	brcs	.+14     	; 0x6f4 <__divsf3_pse+0x26>
 6e6:	9f 5f       	subi	r25, 0xFF	; 255
 6e8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ea:	22 0f       	add	r18, r18
 6ec:	33 1f       	adc	r19, r19
 6ee:	44 1f       	adc	r20, r20
 6f0:	aa 1f       	adc	r26, r26
 6f2:	a9 f3       	breq	.-22     	; 0x6de <__divsf3_pse+0x10>
 6f4:	33 d0       	rcall	.+102    	; 0x75c <__divsf3_pse+0x8e>
 6f6:	0e 2e       	mov	r0, r30
 6f8:	3a f0       	brmi	.+14     	; 0x708 <__divsf3_pse+0x3a>
 6fa:	e0 e8       	ldi	r30, 0x80	; 128
 6fc:	30 d0       	rcall	.+96     	; 0x75e <__divsf3_pse+0x90>
 6fe:	91 50       	subi	r25, 0x01	; 1
 700:	50 40       	sbci	r21, 0x00	; 0
 702:	e6 95       	lsr	r30
 704:	00 1c       	adc	r0, r0
 706:	ca f7       	brpl	.-14     	; 0x6fa <__divsf3_pse+0x2c>
 708:	29 d0       	rcall	.+82     	; 0x75c <__divsf3_pse+0x8e>
 70a:	fe 2f       	mov	r31, r30
 70c:	27 d0       	rcall	.+78     	; 0x75c <__divsf3_pse+0x8e>
 70e:	66 0f       	add	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	bb 1f       	adc	r27, r27
 716:	26 17       	cp	r18, r22
 718:	37 07       	cpc	r19, r23
 71a:	48 07       	cpc	r20, r24
 71c:	ab 07       	cpc	r26, r27
 71e:	b0 e8       	ldi	r27, 0x80	; 128
 720:	09 f0       	breq	.+2      	; 0x724 <__divsf3_pse+0x56>
 722:	bb 0b       	sbc	r27, r27
 724:	80 2d       	mov	r24, r0
 726:	bf 01       	movw	r22, r30
 728:	ff 27       	eor	r31, r31
 72a:	93 58       	subi	r25, 0x83	; 131
 72c:	5f 4f       	sbci	r21, 0xFF	; 255
 72e:	2a f0       	brmi	.+10     	; 0x73a <__divsf3_pse+0x6c>
 730:	9e 3f       	cpi	r25, 0xFE	; 254
 732:	51 05       	cpc	r21, r1
 734:	68 f0       	brcs	.+26     	; 0x750 <__divsf3_pse+0x82>
 736:	b6 c0       	rjmp	.+364    	; 0x8a4 <__fp_inf>
 738:	00 c1       	rjmp	.+512    	; 0x93a <__fp_szero>
 73a:	5f 3f       	cpi	r21, 0xFF	; 255
 73c:	ec f3       	brlt	.-6      	; 0x738 <__divsf3_pse+0x6a>
 73e:	98 3e       	cpi	r25, 0xE8	; 232
 740:	dc f3       	brlt	.-10     	; 0x738 <__divsf3_pse+0x6a>
 742:	86 95       	lsr	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	b7 95       	ror	r27
 74a:	f7 95       	ror	r31
 74c:	9f 5f       	subi	r25, 0xFF	; 255
 74e:	c9 f7       	brne	.-14     	; 0x742 <__divsf3_pse+0x74>
 750:	88 0f       	add	r24, r24
 752:	91 1d       	adc	r25, r1
 754:	96 95       	lsr	r25
 756:	87 95       	ror	r24
 758:	97 f9       	bld	r25, 7
 75a:	08 95       	ret
 75c:	e1 e0       	ldi	r30, 0x01	; 1
 75e:	66 0f       	add	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	88 1f       	adc	r24, r24
 764:	bb 1f       	adc	r27, r27
 766:	62 17       	cp	r22, r18
 768:	73 07       	cpc	r23, r19
 76a:	84 07       	cpc	r24, r20
 76c:	ba 07       	cpc	r27, r26
 76e:	20 f0       	brcs	.+8      	; 0x778 <__divsf3_pse+0xaa>
 770:	62 1b       	sub	r22, r18
 772:	73 0b       	sbc	r23, r19
 774:	84 0b       	sbc	r24, r20
 776:	ba 0b       	sbc	r27, r26
 778:	ee 1f       	adc	r30, r30
 77a:	88 f7       	brcc	.-30     	; 0x75e <__divsf3_pse+0x90>
 77c:	e0 95       	com	r30
 77e:	08 95       	ret

00000780 <__fixsfsi>:
 780:	04 d0       	rcall	.+8      	; 0x78a <__fixunssfsi>
 782:	68 94       	set
 784:	b1 11       	cpse	r27, r1
 786:	d9 c0       	rjmp	.+434    	; 0x93a <__fp_szero>
 788:	08 95       	ret

0000078a <__fixunssfsi>:
 78a:	bc d0       	rcall	.+376    	; 0x904 <__fp_splitA>
 78c:	88 f0       	brcs	.+34     	; 0x7b0 <__fixunssfsi+0x26>
 78e:	9f 57       	subi	r25, 0x7F	; 127
 790:	90 f0       	brcs	.+36     	; 0x7b6 <__fixunssfsi+0x2c>
 792:	b9 2f       	mov	r27, r25
 794:	99 27       	eor	r25, r25
 796:	b7 51       	subi	r27, 0x17	; 23
 798:	a0 f0       	brcs	.+40     	; 0x7c2 <__fixunssfsi+0x38>
 79a:	d1 f0       	breq	.+52     	; 0x7d0 <__fixunssfsi+0x46>
 79c:	66 0f       	add	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	1a f0       	brmi	.+6      	; 0x7ac <__fixunssfsi+0x22>
 7a6:	ba 95       	dec	r27
 7a8:	c9 f7       	brne	.-14     	; 0x79c <__fixunssfsi+0x12>
 7aa:	12 c0       	rjmp	.+36     	; 0x7d0 <__fixunssfsi+0x46>
 7ac:	b1 30       	cpi	r27, 0x01	; 1
 7ae:	81 f0       	breq	.+32     	; 0x7d0 <__fixunssfsi+0x46>
 7b0:	c3 d0       	rcall	.+390    	; 0x938 <__fp_zero>
 7b2:	b1 e0       	ldi	r27, 0x01	; 1
 7b4:	08 95       	ret
 7b6:	c0 c0       	rjmp	.+384    	; 0x938 <__fp_zero>
 7b8:	67 2f       	mov	r22, r23
 7ba:	78 2f       	mov	r23, r24
 7bc:	88 27       	eor	r24, r24
 7be:	b8 5f       	subi	r27, 0xF8	; 248
 7c0:	39 f0       	breq	.+14     	; 0x7d0 <__fixunssfsi+0x46>
 7c2:	b9 3f       	cpi	r27, 0xF9	; 249
 7c4:	cc f3       	brlt	.-14     	; 0x7b8 <__fixunssfsi+0x2e>
 7c6:	86 95       	lsr	r24
 7c8:	77 95       	ror	r23
 7ca:	67 95       	ror	r22
 7cc:	b3 95       	inc	r27
 7ce:	d9 f7       	brne	.-10     	; 0x7c6 <__fixunssfsi+0x3c>
 7d0:	3e f4       	brtc	.+14     	; 0x7e0 <__fixunssfsi+0x56>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	08 95       	ret

000007e2 <__floatunsisf>:
 7e2:	e8 94       	clt
 7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <__floatsisf+0x12>

000007e6 <__floatsisf>:
 7e6:	97 fb       	bst	r25, 7
 7e8:	3e f4       	brtc	.+14     	; 0x7f8 <__floatsisf+0x12>
 7ea:	90 95       	com	r25
 7ec:	80 95       	com	r24
 7ee:	70 95       	com	r23
 7f0:	61 95       	neg	r22
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	99 23       	and	r25, r25
 7fa:	a9 f0       	breq	.+42     	; 0x826 <__floatsisf+0x40>
 7fc:	f9 2f       	mov	r31, r25
 7fe:	96 e9       	ldi	r25, 0x96	; 150
 800:	bb 27       	eor	r27, r27
 802:	93 95       	inc	r25
 804:	f6 95       	lsr	r31
 806:	87 95       	ror	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	b7 95       	ror	r27
 80e:	f1 11       	cpse	r31, r1
 810:	f8 cf       	rjmp	.-16     	; 0x802 <__floatsisf+0x1c>
 812:	fa f4       	brpl	.+62     	; 0x852 <__floatsisf+0x6c>
 814:	bb 0f       	add	r27, r27
 816:	11 f4       	brne	.+4      	; 0x81c <__floatsisf+0x36>
 818:	60 ff       	sbrs	r22, 0
 81a:	1b c0       	rjmp	.+54     	; 0x852 <__floatsisf+0x6c>
 81c:	6f 5f       	subi	r22, 0xFF	; 255
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	16 c0       	rjmp	.+44     	; 0x852 <__floatsisf+0x6c>
 826:	88 23       	and	r24, r24
 828:	11 f0       	breq	.+4      	; 0x82e <__floatsisf+0x48>
 82a:	96 e9       	ldi	r25, 0x96	; 150
 82c:	11 c0       	rjmp	.+34     	; 0x850 <__floatsisf+0x6a>
 82e:	77 23       	and	r23, r23
 830:	21 f0       	breq	.+8      	; 0x83a <__floatsisf+0x54>
 832:	9e e8       	ldi	r25, 0x8E	; 142
 834:	87 2f       	mov	r24, r23
 836:	76 2f       	mov	r23, r22
 838:	05 c0       	rjmp	.+10     	; 0x844 <__floatsisf+0x5e>
 83a:	66 23       	and	r22, r22
 83c:	71 f0       	breq	.+28     	; 0x85a <__floatsisf+0x74>
 83e:	96 e8       	ldi	r25, 0x86	; 134
 840:	86 2f       	mov	r24, r22
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	2a f0       	brmi	.+10     	; 0x852 <__floatsisf+0x6c>
 848:	9a 95       	dec	r25
 84a:	66 0f       	add	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	da f7       	brpl	.-10     	; 0x848 <__floatsisf+0x62>
 852:	88 0f       	add	r24, r24
 854:	96 95       	lsr	r25
 856:	87 95       	ror	r24
 858:	97 f9       	bld	r25, 7
 85a:	08 95       	ret

0000085c <__fp_cmp>:
 85c:	99 0f       	add	r25, r25
 85e:	00 08       	sbc	r0, r0
 860:	55 0f       	add	r21, r21
 862:	aa 0b       	sbc	r26, r26
 864:	e0 e8       	ldi	r30, 0x80	; 128
 866:	fe ef       	ldi	r31, 0xFE	; 254
 868:	16 16       	cp	r1, r22
 86a:	17 06       	cpc	r1, r23
 86c:	e8 07       	cpc	r30, r24
 86e:	f9 07       	cpc	r31, r25
 870:	c0 f0       	brcs	.+48     	; 0x8a2 <__fp_cmp+0x46>
 872:	12 16       	cp	r1, r18
 874:	13 06       	cpc	r1, r19
 876:	e4 07       	cpc	r30, r20
 878:	f5 07       	cpc	r31, r21
 87a:	98 f0       	brcs	.+38     	; 0x8a2 <__fp_cmp+0x46>
 87c:	62 1b       	sub	r22, r18
 87e:	73 0b       	sbc	r23, r19
 880:	84 0b       	sbc	r24, r20
 882:	95 0b       	sbc	r25, r21
 884:	39 f4       	brne	.+14     	; 0x894 <__fp_cmp+0x38>
 886:	0a 26       	eor	r0, r26
 888:	61 f0       	breq	.+24     	; 0x8a2 <__fp_cmp+0x46>
 88a:	23 2b       	or	r18, r19
 88c:	24 2b       	or	r18, r20
 88e:	25 2b       	or	r18, r21
 890:	21 f4       	brne	.+8      	; 0x89a <__fp_cmp+0x3e>
 892:	08 95       	ret
 894:	0a 26       	eor	r0, r26
 896:	09 f4       	brne	.+2      	; 0x89a <__fp_cmp+0x3e>
 898:	a1 40       	sbci	r26, 0x01	; 1
 89a:	a6 95       	lsr	r26
 89c:	8f ef       	ldi	r24, 0xFF	; 255
 89e:	81 1d       	adc	r24, r1
 8a0:	81 1d       	adc	r24, r1
 8a2:	08 95       	ret

000008a4 <__fp_inf>:
 8a4:	97 f9       	bld	r25, 7
 8a6:	9f 67       	ori	r25, 0x7F	; 127
 8a8:	80 e8       	ldi	r24, 0x80	; 128
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	08 95       	ret

000008b0 <__fp_nan>:
 8b0:	9f ef       	ldi	r25, 0xFF	; 255
 8b2:	80 ec       	ldi	r24, 0xC0	; 192
 8b4:	08 95       	ret

000008b6 <__fp_pscA>:
 8b6:	00 24       	eor	r0, r0
 8b8:	0a 94       	dec	r0
 8ba:	16 16       	cp	r1, r22
 8bc:	17 06       	cpc	r1, r23
 8be:	18 06       	cpc	r1, r24
 8c0:	09 06       	cpc	r0, r25
 8c2:	08 95       	ret

000008c4 <__fp_pscB>:
 8c4:	00 24       	eor	r0, r0
 8c6:	0a 94       	dec	r0
 8c8:	12 16       	cp	r1, r18
 8ca:	13 06       	cpc	r1, r19
 8cc:	14 06       	cpc	r1, r20
 8ce:	05 06       	cpc	r0, r21
 8d0:	08 95       	ret

000008d2 <__fp_round>:
 8d2:	09 2e       	mov	r0, r25
 8d4:	03 94       	inc	r0
 8d6:	00 0c       	add	r0, r0
 8d8:	11 f4       	brne	.+4      	; 0x8de <__fp_round+0xc>
 8da:	88 23       	and	r24, r24
 8dc:	52 f0       	brmi	.+20     	; 0x8f2 <__fp_round+0x20>
 8de:	bb 0f       	add	r27, r27
 8e0:	40 f4       	brcc	.+16     	; 0x8f2 <__fp_round+0x20>
 8e2:	bf 2b       	or	r27, r31
 8e4:	11 f4       	brne	.+4      	; 0x8ea <__fp_round+0x18>
 8e6:	60 ff       	sbrs	r22, 0
 8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__fp_round+0x20>
 8ea:	6f 5f       	subi	r22, 0xFF	; 255
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	8f 4f       	sbci	r24, 0xFF	; 255
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255
 8f2:	08 95       	ret

000008f4 <__fp_split3>:
 8f4:	57 fd       	sbrc	r21, 7
 8f6:	90 58       	subi	r25, 0x80	; 128
 8f8:	44 0f       	add	r20, r20
 8fa:	55 1f       	adc	r21, r21
 8fc:	59 f0       	breq	.+22     	; 0x914 <__fp_splitA+0x10>
 8fe:	5f 3f       	cpi	r21, 0xFF	; 255
 900:	71 f0       	breq	.+28     	; 0x91e <__fp_splitA+0x1a>
 902:	47 95       	ror	r20

00000904 <__fp_splitA>:
 904:	88 0f       	add	r24, r24
 906:	97 fb       	bst	r25, 7
 908:	99 1f       	adc	r25, r25
 90a:	61 f0       	breq	.+24     	; 0x924 <__fp_splitA+0x20>
 90c:	9f 3f       	cpi	r25, 0xFF	; 255
 90e:	79 f0       	breq	.+30     	; 0x92e <__fp_splitA+0x2a>
 910:	87 95       	ror	r24
 912:	08 95       	ret
 914:	12 16       	cp	r1, r18
 916:	13 06       	cpc	r1, r19
 918:	14 06       	cpc	r1, r20
 91a:	55 1f       	adc	r21, r21
 91c:	f2 cf       	rjmp	.-28     	; 0x902 <__fp_split3+0xe>
 91e:	46 95       	lsr	r20
 920:	f1 df       	rcall	.-30     	; 0x904 <__fp_splitA>
 922:	08 c0       	rjmp	.+16     	; 0x934 <__fp_splitA+0x30>
 924:	16 16       	cp	r1, r22
 926:	17 06       	cpc	r1, r23
 928:	18 06       	cpc	r1, r24
 92a:	99 1f       	adc	r25, r25
 92c:	f1 cf       	rjmp	.-30     	; 0x910 <__fp_splitA+0xc>
 92e:	86 95       	lsr	r24
 930:	71 05       	cpc	r23, r1
 932:	61 05       	cpc	r22, r1
 934:	08 94       	sec
 936:	08 95       	ret

00000938 <__fp_zero>:
 938:	e8 94       	clt

0000093a <__fp_szero>:
 93a:	bb 27       	eor	r27, r27
 93c:	66 27       	eor	r22, r22
 93e:	77 27       	eor	r23, r23
 940:	cb 01       	movw	r24, r22
 942:	97 f9       	bld	r25, 7
 944:	08 95       	ret

00000946 <__gesf2>:
 946:	8a df       	rcall	.-236    	; 0x85c <__fp_cmp>
 948:	08 f4       	brcc	.+2      	; 0x94c <__gesf2+0x6>
 94a:	8f ef       	ldi	r24, 0xFF	; 255
 94c:	08 95       	ret

0000094e <__mulsf3>:
 94e:	0b d0       	rcall	.+22     	; 0x966 <__mulsf3x>
 950:	c0 cf       	rjmp	.-128    	; 0x8d2 <__fp_round>
 952:	b1 df       	rcall	.-158    	; 0x8b6 <__fp_pscA>
 954:	28 f0       	brcs	.+10     	; 0x960 <__mulsf3+0x12>
 956:	b6 df       	rcall	.-148    	; 0x8c4 <__fp_pscB>
 958:	18 f0       	brcs	.+6      	; 0x960 <__mulsf3+0x12>
 95a:	95 23       	and	r25, r21
 95c:	09 f0       	breq	.+2      	; 0x960 <__mulsf3+0x12>
 95e:	a2 cf       	rjmp	.-188    	; 0x8a4 <__fp_inf>
 960:	a7 cf       	rjmp	.-178    	; 0x8b0 <__fp_nan>
 962:	11 24       	eor	r1, r1
 964:	ea cf       	rjmp	.-44     	; 0x93a <__fp_szero>

00000966 <__mulsf3x>:
 966:	c6 df       	rcall	.-116    	; 0x8f4 <__fp_split3>
 968:	a0 f3       	brcs	.-24     	; 0x952 <__mulsf3+0x4>

0000096a <__mulsf3_pse>:
 96a:	95 9f       	mul	r25, r21
 96c:	d1 f3       	breq	.-12     	; 0x962 <__mulsf3+0x14>
 96e:	95 0f       	add	r25, r21
 970:	50 e0       	ldi	r21, 0x00	; 0
 972:	55 1f       	adc	r21, r21
 974:	62 9f       	mul	r22, r18
 976:	f0 01       	movw	r30, r0
 978:	72 9f       	mul	r23, r18
 97a:	bb 27       	eor	r27, r27
 97c:	f0 0d       	add	r31, r0
 97e:	b1 1d       	adc	r27, r1
 980:	63 9f       	mul	r22, r19
 982:	aa 27       	eor	r26, r26
 984:	f0 0d       	add	r31, r0
 986:	b1 1d       	adc	r27, r1
 988:	aa 1f       	adc	r26, r26
 98a:	64 9f       	mul	r22, r20
 98c:	66 27       	eor	r22, r22
 98e:	b0 0d       	add	r27, r0
 990:	a1 1d       	adc	r26, r1
 992:	66 1f       	adc	r22, r22
 994:	82 9f       	mul	r24, r18
 996:	22 27       	eor	r18, r18
 998:	b0 0d       	add	r27, r0
 99a:	a1 1d       	adc	r26, r1
 99c:	62 1f       	adc	r22, r18
 99e:	73 9f       	mul	r23, r19
 9a0:	b0 0d       	add	r27, r0
 9a2:	a1 1d       	adc	r26, r1
 9a4:	62 1f       	adc	r22, r18
 9a6:	83 9f       	mul	r24, r19
 9a8:	a0 0d       	add	r26, r0
 9aa:	61 1d       	adc	r22, r1
 9ac:	22 1f       	adc	r18, r18
 9ae:	74 9f       	mul	r23, r20
 9b0:	33 27       	eor	r19, r19
 9b2:	a0 0d       	add	r26, r0
 9b4:	61 1d       	adc	r22, r1
 9b6:	23 1f       	adc	r18, r19
 9b8:	84 9f       	mul	r24, r20
 9ba:	60 0d       	add	r22, r0
 9bc:	21 1d       	adc	r18, r1
 9be:	82 2f       	mov	r24, r18
 9c0:	76 2f       	mov	r23, r22
 9c2:	6a 2f       	mov	r22, r26
 9c4:	11 24       	eor	r1, r1
 9c6:	9f 57       	subi	r25, 0x7F	; 127
 9c8:	50 40       	sbci	r21, 0x00	; 0
 9ca:	8a f0       	brmi	.+34     	; 0x9ee <__mulsf3_pse+0x84>
 9cc:	e1 f0       	breq	.+56     	; 0xa06 <__mulsf3_pse+0x9c>
 9ce:	88 23       	and	r24, r24
 9d0:	4a f0       	brmi	.+18     	; 0x9e4 <__mulsf3_pse+0x7a>
 9d2:	ee 0f       	add	r30, r30
 9d4:	ff 1f       	adc	r31, r31
 9d6:	bb 1f       	adc	r27, r27
 9d8:	66 1f       	adc	r22, r22
 9da:	77 1f       	adc	r23, r23
 9dc:	88 1f       	adc	r24, r24
 9de:	91 50       	subi	r25, 0x01	; 1
 9e0:	50 40       	sbci	r21, 0x00	; 0
 9e2:	a9 f7       	brne	.-22     	; 0x9ce <__mulsf3_pse+0x64>
 9e4:	9e 3f       	cpi	r25, 0xFE	; 254
 9e6:	51 05       	cpc	r21, r1
 9e8:	70 f0       	brcs	.+28     	; 0xa06 <__mulsf3_pse+0x9c>
 9ea:	5c cf       	rjmp	.-328    	; 0x8a4 <__fp_inf>
 9ec:	a6 cf       	rjmp	.-180    	; 0x93a <__fp_szero>
 9ee:	5f 3f       	cpi	r21, 0xFF	; 255
 9f0:	ec f3       	brlt	.-6      	; 0x9ec <__mulsf3_pse+0x82>
 9f2:	98 3e       	cpi	r25, 0xE8	; 232
 9f4:	dc f3       	brlt	.-10     	; 0x9ec <__mulsf3_pse+0x82>
 9f6:	86 95       	lsr	r24
 9f8:	77 95       	ror	r23
 9fa:	67 95       	ror	r22
 9fc:	b7 95       	ror	r27
 9fe:	f7 95       	ror	r31
 a00:	e7 95       	ror	r30
 a02:	9f 5f       	subi	r25, 0xFF	; 255
 a04:	c1 f7       	brne	.-16     	; 0x9f6 <__mulsf3_pse+0x8c>
 a06:	fe 2b       	or	r31, r30
 a08:	88 0f       	add	r24, r24
 a0a:	91 1d       	adc	r25, r1
 a0c:	96 95       	lsr	r25
 a0e:	87 95       	ror	r24
 a10:	97 f9       	bld	r25, 7
 a12:	08 95       	ret

00000a14 <__udivmodhi4>:
 a14:	aa 1b       	sub	r26, r26
 a16:	bb 1b       	sub	r27, r27
 a18:	51 e1       	ldi	r21, 0x11	; 17
 a1a:	07 c0       	rjmp	.+14     	; 0xa2a <__udivmodhi4_ep>

00000a1c <__udivmodhi4_loop>:
 a1c:	aa 1f       	adc	r26, r26
 a1e:	bb 1f       	adc	r27, r27
 a20:	a6 17       	cp	r26, r22
 a22:	b7 07       	cpc	r27, r23
 a24:	10 f0       	brcs	.+4      	; 0xa2a <__udivmodhi4_ep>
 a26:	a6 1b       	sub	r26, r22
 a28:	b7 0b       	sbc	r27, r23

00000a2a <__udivmodhi4_ep>:
 a2a:	88 1f       	adc	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	5a 95       	dec	r21
 a30:	a9 f7       	brne	.-22     	; 0xa1c <__udivmodhi4_loop>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	bc 01       	movw	r22, r24
 a38:	cd 01       	movw	r24, r26
 a3a:	08 95       	ret

00000a3c <__divmodhi4>:
 a3c:	97 fb       	bst	r25, 7
 a3e:	09 2e       	mov	r0, r25
 a40:	07 26       	eor	r0, r23
 a42:	0a d0       	rcall	.+20     	; 0xa58 <__divmodhi4_neg1>
 a44:	77 fd       	sbrc	r23, 7
 a46:	04 d0       	rcall	.+8      	; 0xa50 <__divmodhi4_neg2>
 a48:	e5 df       	rcall	.-54     	; 0xa14 <__udivmodhi4>
 a4a:	06 d0       	rcall	.+12     	; 0xa58 <__divmodhi4_neg1>
 a4c:	00 20       	and	r0, r0
 a4e:	1a f4       	brpl	.+6      	; 0xa56 <__divmodhi4_exit>

00000a50 <__divmodhi4_neg2>:
 a50:	70 95       	com	r23
 a52:	61 95       	neg	r22
 a54:	7f 4f       	sbci	r23, 0xFF	; 255

00000a56 <__divmodhi4_exit>:
 a56:	08 95       	ret

00000a58 <__divmodhi4_neg1>:
 a58:	f6 f7       	brtc	.-4      	; 0xa56 <__divmodhi4_exit>
 a5a:	90 95       	com	r25
 a5c:	81 95       	neg	r24
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	08 95       	ret

00000a62 <__udivmodsi4>:
 a62:	a1 e2       	ldi	r26, 0x21	; 33
 a64:	1a 2e       	mov	r1, r26
 a66:	aa 1b       	sub	r26, r26
 a68:	bb 1b       	sub	r27, r27
 a6a:	fd 01       	movw	r30, r26
 a6c:	0d c0       	rjmp	.+26     	; 0xa88 <__udivmodsi4_ep>

00000a6e <__udivmodsi4_loop>:
 a6e:	aa 1f       	adc	r26, r26
 a70:	bb 1f       	adc	r27, r27
 a72:	ee 1f       	adc	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	a2 17       	cp	r26, r18
 a78:	b3 07       	cpc	r27, r19
 a7a:	e4 07       	cpc	r30, r20
 a7c:	f5 07       	cpc	r31, r21
 a7e:	20 f0       	brcs	.+8      	; 0xa88 <__udivmodsi4_ep>
 a80:	a2 1b       	sub	r26, r18
 a82:	b3 0b       	sbc	r27, r19
 a84:	e4 0b       	sbc	r30, r20
 a86:	f5 0b       	sbc	r31, r21

00000a88 <__udivmodsi4_ep>:
 a88:	66 1f       	adc	r22, r22
 a8a:	77 1f       	adc	r23, r23
 a8c:	88 1f       	adc	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	1a 94       	dec	r1
 a92:	69 f7       	brne	.-38     	; 0xa6e <__udivmodsi4_loop>
 a94:	60 95       	com	r22
 a96:	70 95       	com	r23
 a98:	80 95       	com	r24
 a9a:	90 95       	com	r25
 a9c:	9b 01       	movw	r18, r22
 a9e:	ac 01       	movw	r20, r24
 aa0:	bd 01       	movw	r22, r26
 aa2:	cf 01       	movw	r24, r30
 aa4:	08 95       	ret

00000aa6 <_exit>:
 aa6:	f8 94       	cli

00000aa8 <__stop_program>:
 aa8:	ff cf       	rjmp	.-2      	; 0xaa8 <__stop_program>
