
vibartehandle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800178  00800178  00000484  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000db  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000717  00000000  00000000  0000057f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000143  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054e  00000000  00000000  00000dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000192  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d1  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 37       	cpi	r26, 0x78	; 120
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e7       	ldi	r26, 0x78	; 120
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 37       	cpi	r26, 0x79	; 121
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 09 01 	call	0x212	; 0x212 <main>
  c6:	0c 94 b7 01 	jmp	0x36e	; 0x36e <exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <UART_SETTING>:
void UART_SETTING(void)
{
	unsigned int Temp_UBRR0;
	Temp_UBRR0 = 16000000L/(16L * 9600) - 1;   	// 통신 보레이트 계산식

	UBRR0H = (Temp_UBRR0 >> 8);              // 통신속도 설정 9600
  ce:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (Temp_UBRR0 & 0x00FF);
  d2:	87 e6       	ldi	r24, 0x67	; 103
  d4:	89 b9       	out	0x09, r24	; 9
		
	UCSR0A = (0<<RXC0)  | (1<<UDRE0);
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	8b b9       	out	0x0b, r24	; 11
    UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);  	
  da:	88 e9       	ldi	r24, 0x98	; 152
  dc:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (3<<UCSZ00);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 95 00 	sts	0x0095, r24
		
	clr( DDRE, 0 );
  e4:	10 98       	cbi	0x02, 0	; 2
	set( DDRE, 1 );
  e6:	11 9a       	sbi	0x02, 1	; 2
}
  e8:	08 95       	ret

000000ea <LCD_CMD>:
	_delay_ms(2);
	LCD_CMD(0x06);
}

void LCD_CMD(unsigned char byte)
{
  ea:	48 2f       	mov	r20, r24
  ec:	8c e2       	ldi	r24, 0x2C	; 44
  ee:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f0:	20 e9       	ldi	r18, 0x90	; 144
  f2:	31 e0       	ldi	r19, 0x01	; 1
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_CMD+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fc:	d9 f7       	brne	.-10     	; 0xf4 <LCD_CMD+0xa>
	_delay_ms(30);
	PORTA = 0x00;	_delay_us(1);
  fe:	1b ba       	out	0x1b, r1	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	98 2f       	mov	r25, r24
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_CMD+0x1a>
	PORTA = 0x04;	_delay_us(1);
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	9b bb       	out	0x1b, r25	; 27
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_CMD+0x22>
	PORTC = byte;
 110:	45 bb       	out	0x15, r20	; 21
	PORTA = 0x03;
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	8b bb       	out	0x1b, r24	; 27
 116:	8c e2       	ldi	r24, 0x2C	; 44
 118:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11a:	20 e9       	ldi	r18, 0x90	; 144
 11c:	31 e0       	ldi	r19, 0x01	; 1
 11e:	f9 01       	movw	r30, r18
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_CMD+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d9 f7       	brne	.-10     	; 0x11e <LCD_CMD+0x34>
	_delay_ms(30);
	PORTA = 0x00;
 128:	1b ba       	out	0x1b, r1	; 27
}
 12a:	08 95       	ret

0000012c <LCD_SETTING>:
	clr( DDRE, 0 );
	set( DDRE, 1 );
}

void LCD_SETTING(void)
{
 12c:	1f 93       	push	r17
	
	DDRC = 0xFF; 
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x07;
 132:	87 e0       	ldi	r24, 0x07	; 7
 134:	8a bb       	out	0x1a, r24	; 26
 136:	84 ef       	ldi	r24, 0xF4	; 244
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	20 e9       	ldi	r18, 0x90	; 144
 13c:	31 e0       	ldi	r19, 0x01	; 1
 13e:	f9 01       	movw	r30, r18
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_SETTING+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	d9 f7       	brne	.-10     	; 0x13e <LCD_SETTING+0x12>

	_delay_ms(50);

	LCD_CMD(0x3C);	_delay_us(40);
 148:	8c e3       	ldi	r24, 0x3C	; 60
 14a:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 14e:	15 ed       	ldi	r17, 0xD5	; 213
 150:	81 2f       	mov	r24, r17
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_SETTING+0x26>
	LCD_CMD(0x0F);	_delay_us(40);
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
 15c:	1a 95       	dec	r17
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_SETTING+0x30>
	LCD_CMD(0x01);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	9f e1       	ldi	r25, 0x1F	; 31
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_SETTING+0x3e>
	_delay_ms(2);
	LCD_CMD(0x06);
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
}
 174:	1f 91       	pop	r17
 176:	08 95       	ret

00000178 <LCD_DATA>:
	PORTA = 0x00;
}

void LCD_DATA(unsigned char byte)
{
	PORTA = 0x01;	_delay_us(1);
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	2b bb       	out	0x1b, r18	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 17c:	95 e0       	ldi	r25, 0x05	; 5
 17e:	39 2f       	mov	r19, r25
 180:	3a 95       	dec	r19
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_DATA+0x8>
	PORTA = 0x05;	_delay_us(1);
 184:	9b bb       	out	0x1b, r25	; 27
 186:	9a 95       	dec	r25
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_DATA+0xe>
	PORTC = byte;
 18a:	85 bb       	out	0x15, r24	; 21
	PORTA = 0x01;
 18c:	2b bb       	out	0x1b, r18	; 27
 18e:	8c e2       	ldi	r24, 0x2C	; 44
 190:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 192:	20 e9       	ldi	r18, 0x90	; 144
 194:	31 e0       	ldi	r19, 0x01	; 1
 196:	f9 01       	movw	r30, r18
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_DATA+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	d9 f7       	brne	.-10     	; 0x196 <LCD_DATA+0x1e>
	_delay_ms(30);
	PORTA = 0x00;
 1a0:	1b ba       	out	0x1b, r1	; 27
}
 1a2:	08 95       	ret

000001a4 <Put_Lcd_Char>:

void Put_Lcd_Char(char Lcd_Data)
{ 
     LCD_DATA(Lcd_Data);
 1a4:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_DATA>
 1a8:	88 ec       	ldi	r24, 0xC8	; 200
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	20 e9       	ldi	r18, 0x90	; 144
 1ae:	31 e0       	ldi	r19, 0x01	; 1
 1b0:	f9 01       	movw	r30, r18
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <Put_Lcd_Char+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <Put_Lcd_Char+0xc>
     _delay_ms(20);
}
 1ba:	08 95       	ret

000001bc <Put_Lcd_String>:

void Put_Lcd_String( char *Lcd_Data) 
{ 
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ec 01       	movw	r28, r24
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <Put_Lcd_String+0xe>
	while(*Lcd_Data != 0x00) 
    { 
    	Put_Lcd_Char(*Lcd_Data); 
 1c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <Put_Lcd_Char>
        ++Lcd_Data;
 1c8:	21 96       	adiw	r28, 0x01	; 1
     _delay_ms(20);
}

void Put_Lcd_String( char *Lcd_Data) 
{ 
	while(*Lcd_Data != 0x00) 
 1ca:	88 81       	ld	r24, Y
 1cc:	88 23       	and	r24, r24
 1ce:	d1 f7       	brne	.-12     	; 0x1c4 <Put_Lcd_String+0x8>
    { 
    	Put_Lcd_Char(*Lcd_Data); 
        ++Lcd_Data;
    } 
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <Display_Position>:

void Display_Position(unsigned char line, unsigned char col) 
{ 
     if( line == 0 ) 
 1d6:	88 23       	and	r24, r24
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <Display_Position+0xa>
     	LCD_CMD( 0x80 + col );
 1da:	86 2f       	mov	r24, r22
 1dc:	80 58       	subi	r24, 0x80	; 128
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Display_Position+0xe>
     else 
        LCD_CMD( 0xc0 + col ); 
 1e0:	86 2f       	mov	r24, r22
 1e2:	80 54       	subi	r24, 0x40	; 64
 1e4:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
 1e8:	08 95       	ret

000001ea <Lcd_Put_Char_Xy>:
}

void Lcd_Put_Char_Xy(unsigned char line, unsigned char col, unsigned char Lcd_Data)
{
 1ea:	1f 93       	push	r17
 1ec:	14 2f       	mov	r17, r20
	Display_Position( line, col );
 1ee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Display_Position>
	Put_Lcd_Char( Lcd_Data );
 1f2:	81 2f       	mov	r24, r17
 1f4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <Put_Lcd_Char>
}
 1f8:	1f 91       	pop	r17
 1fa:	08 95       	ret

000001fc <Lcd_Print_Xy>:

void Lcd_Print_Xy(unsigned char line, unsigned char col, char *Lcd_Data)
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	8a 01       	movw	r16, r20
	Display_Position( line, col );
 202:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Display_Position>
	Put_Lcd_String( Lcd_Data );
 206:	c8 01       	movw	r24, r16
 208:	0e 94 de 00 	call	0x1bc	; 0x1bc <Put_Lcd_String>
}
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <main>:


int main(void)
{

	LCD_SETTING(); 		//Char LCD 초기화
 212:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_SETTING>
	UART_SETTING();		//UART(BT) 초기화
 216:	0e 94 67 00 	call	0xce	; 0xce <UART_SETTING>

	DDRD = 0xFF;		//진동모터 포트출력 선언
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xFF;		//현재 모든 모터 ON
 21e:	82 bb       	out	0x12, r24	; 18

	DDRB = 0xFF;		//상태 LED 포트출력 선언 
 220:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;		//초기상태 OFF
 222:	88 bb       	out	0x18, r24	; 24

	set(SREG, 7);		//전체 인터럽트 활성화
 224:	8f b7       	in	r24, 0x3f	; 63
 226:	80 68       	ori	r24, 0x80	; 128
 228:	8f bf       	out	0x3f, r24	; 63
	
	while(1)
	{
		Lcd_Print_Xy(0, 0, "  NOW DRIVING   ");
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	51 e0       	ldi	r21, 0x01	; 1
 232:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Lcd_Print_Xy>
		Lcd_Print_Xy(1, 0, "                ");
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	41 e1       	ldi	r20, 0x11	; 17
 23c:	51 e0       	ldi	r21, 0x01	; 1
 23e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Lcd_Print_Xy>
 242:	f3 cf       	rjmp	.-26     	; 0x22a <main+0x18>

00000244 <__vector_18>:
unsigned char Uart_Getch(unsigned char Com);

unsigned char data;

ISR(USART0_RX_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	0b b6       	in	r0, 0x3b	; 59
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	4f 93       	push	r20
 258:	5f 93       	push	r21
 25a:	6f 93       	push	r22
 25c:	7f 93       	push	r23
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
		clr(SREG, 7);
 26a:	8f b7       	in	r24, 0x3f	; 63
 26c:	8f 77       	andi	r24, 0x7F	; 127
 26e:	8f bf       	out	0x3f, r24	; 63
		data = UDR0;
 270:	8c b1       	in	r24, 0x0c	; 12
 272:	80 93 78 01 	sts	0x0178, r24
				
		if(data == 'A')		//조건1
 276:	81 34       	cpi	r24, 0x41	; 65
 278:	e9 f4       	brne	.+58     	; 0x2b4 <__vector_18+0x70>
		{
			PORTD = 0x00;
 27a:	12 ba       	out	0x12, r1	; 18

			clr(PORTB,0);
 27c:	c0 98       	cbi	0x18, 0	; 24
			set(PORTB,1);
 27e:	c1 9a       	sbi	0x18, 1	; 24
			set(PORTB,2);
 280:	c2 9a       	sbi	0x18, 2	; 24

			Lcd_Print_Xy(0, 0, "   WARNING :    ");
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	42 e2       	ldi	r20, 0x22	; 34
 288:	51 e0       	ldi	r21, 0x01	; 1
 28a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Lcd_Print_Xy>
			Lcd_Print_Xy(1, 0, "  Sense Sound   ");
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	43 e3       	ldi	r20, 0x33	; 51
 294:	51 e0       	ldi	r21, 0x01	; 1
 296:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Lcd_Print_Xy>
 29a:	80 e5       	ldi	r24, 0x50	; 80
 29c:	93 ec       	ldi	r25, 0xC3	; 195
 29e:	20 e9       	ldi	r18, 0x90	; 144
 2a0:	31 e0       	ldi	r19, 0x01	; 1
 2a2:	f9 01       	movw	r30, r18
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <__vector_18+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2aa:	d9 f7       	brne	.-10     	; 0x2a2 <__vector_18+0x5e>
			_delay_ms(5000);
			PORTD = 0xFF;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	82 bb       	out	0x12, r24	; 18
			set(PORTB,0);
 2b0:	c0 9a       	sbi	0x18, 0	; 24
 2b2:	37 c0       	rjmp	.+110    	; 0x322 <__vector_18+0xde>
		}

		else if(data == 'B')		//조건2
 2b4:	82 34       	cpi	r24, 0x42	; 66
 2b6:	d1 f4       	brne	.+52     	; 0x2ec <__vector_18+0xa8>
		{
			set(PORTB,0);
 2b8:	c0 9a       	sbi	0x18, 0	; 24
			clr(PORTB,1);
 2ba:	c1 98       	cbi	0x18, 1	; 24
			set(PORTB,2);
 2bc:	c2 9a       	sbi	0x18, 2	; 24

			Lcd_Print_Xy(0, 0, " Stllable name  ");
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	44 e4       	ldi	r20, 0x44	; 68
 2c4:	51 e0       	ldi	r21, 0x01	; 1
 2c6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Lcd_Print_Xy>
			Lcd_Print_Xy(1, 0, "    NOW Do      ");
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	45 e5       	ldi	r20, 0x55	; 85
 2d0:	51 e0       	ldi	r21, 0x01	; 1
 2d2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Lcd_Print_Xy>
 2d6:	80 e5       	ldi	r24, 0x50	; 80
 2d8:	93 ec       	ldi	r25, 0xC3	; 195
 2da:	20 e9       	ldi	r18, 0x90	; 144
 2dc:	31 e0       	ldi	r19, 0x01	; 1
 2de:	f9 01       	movw	r30, r18
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <__vector_18+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e6:	d9 f7       	brne	.-10     	; 0x2de <__vector_18+0x9a>
			_delay_ms(5000);
			set(PORTB,1);
 2e8:	c1 9a       	sbi	0x18, 1	; 24
 2ea:	1b c0       	rjmp	.+54     	; 0x322 <__vector_18+0xde>
		}

		else if(data == 'C')		//조건3
 2ec:	83 34       	cpi	r24, 0x43	; 67
 2ee:	c9 f4       	brne	.+50     	; 0x322 <__vector_18+0xde>
		{
			set(PORTB,0);
 2f0:	c0 9a       	sbi	0x18, 0	; 24
			set(PORTB,1);
 2f2:	c1 9a       	sbi	0x18, 1	; 24
			clr(PORTB,2);
 2f4:	c2 98       	cbi	0x18, 2	; 24

			Lcd_Print_Xy(0, 0, " Stllable name  ");
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	44 e4       	ldi	r20, 0x44	; 68
 2fc:	51 e0       	ldi	r21, 0x01	; 1
 2fe:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Lcd_Print_Xy>
			Lcd_Print_Xy(1, 0, "    NOW Re      ");
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	46 e6       	ldi	r20, 0x66	; 102
 308:	51 e0       	ldi	r21, 0x01	; 1
 30a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Lcd_Print_Xy>
 30e:	80 e5       	ldi	r24, 0x50	; 80
 310:	93 ec       	ldi	r25, 0xC3	; 195
 312:	20 e9       	ldi	r18, 0x90	; 144
 314:	31 e0       	ldi	r19, 0x01	; 1
 316:	f9 01       	movw	r30, r18
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <__vector_18+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 31e:	d9 f7       	brne	.-10     	; 0x316 <__vector_18+0xd2>
			_delay_ms(5000);
			set(PORTB,2);
 320:	c2 9a       	sbi	0x18, 2	; 24
		}
		set(SREG, 7);
 322:	8f b7       	in	r24, 0x3f	; 63
 324:	80 68       	ori	r24, 0x80	; 128
 326:	8f bf       	out	0x3f, r24	; 63
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	bf 91       	pop	r27
 32e:	af 91       	pop	r26
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	7f 91       	pop	r23
 336:	6f 91       	pop	r22
 338:	5f 91       	pop	r21
 33a:	4f 91       	pop	r20
 33c:	3f 91       	pop	r19
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0b be       	out	0x3b, r0	; 59
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <Uart_Putch>:
}


void Uart_Putch(unsigned char Com, unsigned char PutData)
{
	switch(Com)
 34e:	88 23       	and	r24, r24
 350:	19 f0       	breq	.+6      	; 0x358 <Uart_Putch+0xa>
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	59 f4       	brne	.+22     	; 0x36c <Uart_Putch+0x1e>
 356:	04 c0       	rjmp	.+8      	; 0x360 <Uart_Putch+0x12>
	{
		case 0:
			while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
 358:	5d 9b       	sbis	0x0b, 5	; 11
 35a:	fe cf       	rjmp	.-4      	; 0x358 <Uart_Putch+0xa>
			UDR0 = PutData;                     // 데이터를 전송한다
 35c:	6c b9       	out	0x0c, r22	; 12
 35e:	08 95       	ret
			break;
		
		case 1:
			while(!( UCSR1A & (1<<UDRE1)) );    // 송신가능시점까지 대기
 360:	80 91 9b 00 	lds	r24, 0x009B
 364:	85 ff       	sbrs	r24, 5
 366:	fc cf       	rjmp	.-8      	; 0x360 <Uart_Putch+0x12>
			UDR1 = PutData;                     // 데이터를 전송한다
 368:	60 93 9c 00 	sts	0x009C, r22
 36c:	08 95       	ret

0000036e <exit>:
 36e:	f8 94       	cli
 370:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
