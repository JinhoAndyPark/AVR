
PWM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000192  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000058  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000012a  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d0  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000014d  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000096  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__vector_8>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a7 36       	cpi	r26, 0x67	; 103
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	4c d0       	rcall	.+152    	; 0xe0 <main>
  48:	66 c0       	rjmp	.+204    	; 0x116 <exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <__vector_8>:
unsigned char state=0;		//now state
unsigned int temp=0;		//Rx data
unsigned long TCNT_val=0;	//for setting Fulse

SIGNAL(TIMER1_OVF_vect)		//TINT vector
{
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
	TCNT1 = TCNT_val;
  5a:	80 91 63 00 	lds	r24, 0x0063
  5e:	90 91 64 00 	lds	r25, 0x0064
  62:	9d bd       	out	0x2d, r25	; 45
  64:	8c bd       	out	0x2c, r24	; 44
	PORTB =~ PORTB;			//PINB01 toggle
  66:	88 b3       	in	r24, 0x18	; 24
  68:	80 95       	com	r24
  6a:	88 bb       	out	0x18, r24	; 24
}
  6c:	9f 91       	pop	r25
  6e:	8f 91       	pop	r24
  70:	0f 90       	pop	r0
  72:	0f be       	out	0x3f, r0	; 63
  74:	0f 90       	pop	r0
  76:	1f 90       	pop	r1
  78:	18 95       	reti

0000007a <RX>:

unsigned char RX(void)
{
	if(temp =='1')	TCNT_val=59286;		//setting period 100ms
  7a:	80 91 61 00 	lds	r24, 0x0061
  7e:	90 91 62 00 	lds	r25, 0x0062
  82:	81 33       	cpi	r24, 0x31	; 49
  84:	91 05       	cpc	r25, r1
  86:	29 f4       	brne	.+10     	; 0x92 <RX+0x18>
  88:	86 e9       	ldi	r24, 0x96	; 150
  8a:	97 ee       	ldi	r25, 0xE7	; 231
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	13 c0       	rjmp	.+38     	; 0xb8 <RX+0x3e>
	else if(temp=='2') TCNT_val=34286;	//setting period 500ms
  92:	82 33       	cpi	r24, 0x32	; 50
  94:	91 05       	cpc	r25, r1
  96:	29 f4       	brne	.+10     	; 0xa2 <RX+0x28>
  98:	8e ee       	ldi	r24, 0xEE	; 238
  9a:	95 e8       	ldi	r25, 0x85	; 133
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	0b c0       	rjmp	.+22     	; 0xb8 <RX+0x3e>
	else if(temp=='3') TCNT_val=3036;	//setting period 1s
  a2:	c3 97       	sbiw	r24, 0x33	; 51
  a4:	29 f4       	brne	.+10     	; 0xb0 <RX+0x36>
  a6:	8c ed       	ldi	r24, 0xDC	; 220
  a8:	9b e0       	ldi	r25, 0x0B	; 11
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <RX+0x3e>
	else TCNT_val=65535;				//none input
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	9f ef       	ldi	r25, 0xFF	; 255
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	80 93 63 00 	sts	0x0063, r24
  bc:	90 93 64 00 	sts	0x0064, r25
  c0:	a0 93 65 00 	sts	0x0065, r26
  c4:	b0 93 66 00 	sts	0x0066, r27

	while((UCSRA & 0x80) ==0);			//waiting recieve data
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <RX+0x4e>

	temp=UDR;
  cc:	8c b1       	in	r24, 0x0c	; 12
  ce:	80 93 61 00 	sts	0x0061, r24
  d2:	10 92 62 00 	sts	0x0062, r1
	
}
  d6:	08 95       	ret

000000d8 <TX>:

/*This Function for monitoring*/
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
  d8:	5d 9b       	sbis	0x0b, 5	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <TX>

	UDR = i;
  dc:	8c b9       	out	0x0c, r24	; 12
}
  de:	08 95       	ret

000000e0 <main>:

int main(void)
{
	DDRB=0x01;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	87 bb       	out	0x17, r24	; 23
	PORTB=0x01;
  e4:	88 bb       	out	0x18, r24	; 24

	TCCR1B = 0x04;	//256
  e6:	24 e0       	ldi	r18, 0x04	; 4
  e8:	2e bd       	out	0x2e, r18	; 46
	TCNT1 = 65535;	// 
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	9f ef       	ldi	r25, 0xFF	; 255
  ee:	9d bd       	out	0x2d, r25	; 45
  f0:	8c bd       	out	0x2c, r24	; 44
	TIMSK = 0x04;	//using Time1 16bit timer
  f2:	29 bf       	out	0x39, r18	; 57

	UCSRA = 0x00;	
  f4:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18;	
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x06;
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 bd       	out	0x20, r24	; 32

	UBRRH = 0x00;
  fe:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;	//9600 baud rate
 100:	87 e6       	ldi	r24, 0x67	; 103
 102:	89 b9       	out	0x09, r24	; 9

	DDRD=0x02;		//Rx:Input, Tx:Output
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	81 bb       	out	0x11, r24	; 17

	SREG = 0x80;
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	8f bf       	out	0x3f, r24	; 63
/*This Function for monitoring*/
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);

	UDR = i;
 10c:	81 e3       	ldi	r24, 0x31	; 49
}

/*This Function for monitoring*/
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
 10e:	5d 9b       	sbis	0x0b, 5	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x2e>

	UDR = i;
 112:	8c b9       	out	0x0c, r24	; 12
 114:	fc cf       	rjmp	.-8      	; 0x10e <main+0x2e>

00000116 <exit>:
 116:	f8 94       	cli
 118:	00 c0       	rjmp	.+0      	; 0x11a <_exit>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
