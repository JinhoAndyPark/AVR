
Rosil_hw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000089d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001b8  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000127  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e8  00000000  00000000  00000bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d8  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	5d c0       	rjmp	.+186    	; 0xf4 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:
#include<avr/interrupt.h>
#include<util/delay.h>

int main(void)
{
	DDRC = 0xff;	//포트오픈
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;	//led off
  40:	85 bb       	out	0x15, r24	; 21
	int i=0;	//for문의 변수선언

	while(1)
	{

	int j=0x01;		//00000001
  42:	61 e0       	ldi	r22, 0x01	; 1
  44:	70 e0       	ldi	r23, 0x00	; 0

		for(i=0;i<7;i++)	
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
		}
		for(i=0;i<7;i++)
		{
			PORTC=~j;	//active low->01111111	
			_delay_ms(1000);
			j/=2;		//비트반전 j=j/2 128->64->32->16...   10000000->01000000->00100000->00010000...
  4a:	e2 e0       	ldi	r30, 0x02	; 2
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	0f c0       	rjmp	.+30     	; 0x6e <__SREG__+0x2f>

	int j=0x01;		//00000001

		for(i=0;i<7;i++)	
		{
			PORTC=~j;		//active low -> 11111110 -> 0인 부분만 led on
  50:	26 2f       	mov	r18, r22
  52:	20 95       	com	r18
  54:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	33 ed       	ldi	r19, 0xD3	; 211
  5a:	40 e3       	ldi	r20, 0x30	; 48
  5c:	21 50       	subi	r18, 0x01	; 1
  5e:	30 40       	sbci	r19, 0x00	; 0
  60:	40 40       	sbci	r20, 0x00	; 0
  62:	e1 f7       	brne	.-8      	; 0x5c <__SREG__+0x1d>
  64:	00 c0       	rjmp	.+0      	; 0x66 <__SREG__+0x27>
  66:	00 00       	nop
			_delay_ms(1000);	//delay 1초
			j*=2;		//비트반전 j=j*2 1->2->4->8->16...    00000001->00000010->00000100->00001000->00010000...
  68:	66 0f       	add	r22, r22
  6a:	77 1f       	adc	r23, r23
	while(1)
	{

	int j=0x01;		//00000001

		for(i=0;i<7;i++)	
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	87 30       	cpi	r24, 0x07	; 7
  70:	91 05       	cpc	r25, r1
  72:	74 f3       	brlt	.-36     	; 0x50 <__SREG__+0x11>
  74:	27 e0       	ldi	r18, 0x07	; 7
  76:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms(1000);	//delay 1초
			j*=2;		//비트반전 j=j*2 1->2->4->8->16...    00000001->00000010->00000100->00001000->00010000...
		}
		for(i=0;i<7;i++)
		{
			PORTC=~j;	//active low->01111111	
  78:	86 2f       	mov	r24, r22
  7a:	80 95       	com	r24
  7c:	85 bb       	out	0x15, r24	; 21
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	93 ed       	ldi	r25, 0xD3	; 211
  82:	a0 e3       	ldi	r26, 0x30	; 48
  84:	81 50       	subi	r24, 0x01	; 1
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	a0 40       	sbci	r26, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <__SREG__+0x45>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <__SREG__+0x4f>
  8e:	00 00       	nop
			_delay_ms(1000);
			j/=2;		//비트반전 j=j/2 128->64->32->16...   10000000->01000000->00100000->00010000...
  90:	cb 01       	movw	r24, r22
  92:	bf 01       	movw	r22, r30
  94:	08 d0       	rcall	.+16     	; 0xa6 <__divmodhi4>
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
		{
			PORTC=~j;		//active low -> 11111110 -> 0인 부분만 led on
			_delay_ms(1000);	//delay 1초
			j*=2;		//비트반전 j=j*2 1->2->4->8->16...    00000001->00000010->00000100->00001000->00010000...
		}
		for(i=0;i<7;i++)
  9a:	71 f7       	brne	.-36     	; 0x78 <__SREG__+0x39>
	int i=0;	//for문의 변수선언

	while(1)
	{

	int j=0x01;		//00000001
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	70 e0       	ldi	r23, 0x00	; 0

		for(i=0;i<7;i++)	
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	e4 cf       	rjmp	.-56     	; 0x6e <__SREG__+0x2f>

000000a6 <__divmodhi4>:
  a6:	97 fb       	bst	r25, 7
  a8:	09 2e       	mov	r0, r25
  aa:	07 26       	eor	r0, r23
  ac:	0a d0       	rcall	.+20     	; 0xc2 <__divmodhi4_neg1>
  ae:	77 fd       	sbrc	r23, 7
  b0:	04 d0       	rcall	.+8      	; 0xba <__divmodhi4_neg2>
  b2:	0c d0       	rcall	.+24     	; 0xcc <__udivmodhi4>
  b4:	06 d0       	rcall	.+12     	; 0xc2 <__divmodhi4_neg1>
  b6:	00 20       	and	r0, r0
  b8:	1a f4       	brpl	.+6      	; 0xc0 <__divmodhi4_exit>

000000ba <__divmodhi4_neg2>:
  ba:	70 95       	com	r23
  bc:	61 95       	neg	r22
  be:	7f 4f       	sbci	r23, 0xFF	; 255

000000c0 <__divmodhi4_exit>:
  c0:	08 95       	ret

000000c2 <__divmodhi4_neg1>:
  c2:	f6 f7       	brtc	.-4      	; 0xc0 <__divmodhi4_exit>
  c4:	90 95       	com	r25
  c6:	81 95       	neg	r24
  c8:	9f 4f       	sbci	r25, 0xFF	; 255
  ca:	08 95       	ret

000000cc <__udivmodhi4>:
  cc:	aa 1b       	sub	r26, r26
  ce:	bb 1b       	sub	r27, r27
  d0:	51 e1       	ldi	r21, 0x11	; 17
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <__udivmodhi4_ep>

000000d4 <__udivmodhi4_loop>:
  d4:	aa 1f       	adc	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	a6 17       	cp	r26, r22
  da:	b7 07       	cpc	r27, r23
  dc:	10 f0       	brcs	.+4      	; 0xe2 <__udivmodhi4_ep>
  de:	a6 1b       	sub	r26, r22
  e0:	b7 0b       	sbc	r27, r23

000000e2 <__udivmodhi4_ep>:
  e2:	88 1f       	adc	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	5a 95       	dec	r21
  e8:	a9 f7       	brne	.-22     	; 0xd4 <__udivmodhi4_loop>
  ea:	80 95       	com	r24
  ec:	90 95       	com	r25
  ee:	bc 01       	movw	r22, r24
  f0:	cd 01       	movw	r24, r26
  f2:	08 95       	ret

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
