
AX_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000183  00800100  00800100  00000432  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000108  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000575  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e2  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c3  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f8  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a0  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_30>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 38       	cpi	r26, 0x83	; 131
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  ac:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <Uart_Putch>:
//------------------------------------------------------------------------------
//     				===== Uart_Putch =====
//------------------------------------------------------------------------------
void Uart_Putch(unsigned char Com, unsigned char PutData)
{
	switch(Com)
  b4:	88 23       	and	r24, r24
  b6:	19 f0       	breq	.+6      	; 0xbe <Uart_Putch+0xa>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	59 f4       	brne	.+22     	; 0xd2 <Uart_Putch+0x1e>
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <Uart_Putch+0x12>
	{
		case 0:
			while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <Uart_Putch+0xa>
			UDR0 = PutData;                     // 데이터를 전송한다
  c2:	6c b9       	out	0x0c, r22	; 12
			break;
  c4:	08 95       	ret
		
		case 1:
			while(!( UCSR1A & (1<<UDRE1)) );	// 송신가능시점까지 대기
  c6:	80 91 9b 00 	lds	r24, 0x009B
  ca:	85 ff       	sbrs	r24, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <Uart_Putch+0x12>
			UDR1 = PutData;                     // 데이터를 전송한다
  ce:	60 93 9c 00 	sts	0x009C, r22
  d2:	08 95       	ret

000000d4 <TxPacket>:
//     				===== Tx_Packet =====
//             		: MCU->Ax
//------------------------------------------------------------------------------

unsigned char TxPacket(unsigned char ID,unsigned char Instruction,unsigned char ParameterLength)
{
  d4:	1f 93       	push	r17
     unsigned char Count,CheckSum;

     TxBuffer[0] = 0xff;
  d6:	9f ef       	ldi	r25, 0xFF	; 255
  d8:	90 93 03 02 	sts	0x0203, r25
     TxBuffer[1] = 0xff;
  dc:	90 93 04 02 	sts	0x0204, r25
     TxBuffer[2] = ID;
  e0:	80 93 05 02 	sts	0x0205, r24
     TxBuffer[3] = ParameterLength+2;
  e4:	84 2f       	mov	r24, r20
  e6:	8e 5f       	subi	r24, 0xFE	; 254
  e8:	80 93 06 02 	sts	0x0206, r24
     TxBuffer[4] = Instruction;
  ec:	60 93 07 02 	sts	0x0207, r22
  f0:	e0 e0       	ldi	r30, 0x00	; 0
  f2:	f1 e0       	ldi	r31, 0x01	; 1
  f4:	a8 e0       	ldi	r26, 0x08	; 8
  f6:	b2 e0       	ldi	r27, 0x02	; 2
//------------------------------------------------------------------------------
//     				===== Tx_Packet =====
//             		: MCU->Ax
//------------------------------------------------------------------------------

unsigned char TxPacket(unsigned char ID,unsigned char Instruction,unsigned char ParameterLength)
  f8:	84 2f       	mov	r24, r20
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	8e 0f       	add	r24, r30
  fe:	9f 1f       	adc	r25, r31
     TxBuffer[0] = 0xff;
     TxBuffer[1] = 0xff;
     TxBuffer[2] = ID;
     TxBuffer[3] = ParameterLength+2;
     TxBuffer[4] = Instruction;
     for( Count = 0; Count < ParameterLength ;+ Count++ )
 100:	02 c0       	rjmp	.+4      	; 0x106 <TxPacket+0x32>
     {
          TxBuffer[Count+5] = Parameter[Count];
 102:	21 91       	ld	r18, Z+
 104:	2d 93       	st	X+, r18
     TxBuffer[0] = 0xff;
     TxBuffer[1] = 0xff;
     TxBuffer[2] = ID;
     TxBuffer[3] = ParameterLength+2;
     TxBuffer[4] = Instruction;
     for( Count = 0; Count < ParameterLength ;+ Count++ )
 106:	e8 17       	cp	r30, r24
 108:	f9 07       	cpc	r31, r25
 10a:	d9 f7       	brne	.-10     	; 0x102 <TxPacket+0x2e>
     {
          TxBuffer[Count+5] = Parameter[Count];
     }
     CheckSum = 0;

     TxPacketLength = ParameterLength +4+2;
 10c:	4a 5f       	subi	r20, 0xFA	; 250
 10e:	40 93 81 01 	sts	0x0181, r20
     TxBuffer[4] = Instruction;
     for( Count = 0; Count < ParameterLength ;+ Count++ )
     {
          TxBuffer[Count+5] = Parameter[Count];
     }
     CheckSum = 0;
 112:	20 e0       	ldi	r18, 0x00	; 0

     TxPacketLength = ParameterLength +4+2;



     for( Count = 2; Count < TxPacketLength-1; Count++ ) //except 0xff,checksum
 114:	32 e0       	ldi	r19, 0x02	; 2
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	50 40       	sbci	r21, 0x00	; 0
 11c:	03 c0       	rjmp	.+6      	; 0x124 <TxPacket+0x50>
     {
         CheckSum += TxBuffer[Count];
 11e:	80 81       	ld	r24, Z
 120:	28 0f       	add	r18, r24

     TxPacketLength = ParameterLength +4+2;



     for( Count = 2; Count < TxPacketLength-1; Count++ ) //except 0xff,checksum
 122:	3f 5f       	subi	r19, 0xFF	; 255
 124:	83 2f       	mov	r24, r19
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	ed 5f       	subi	r30, 0xFD	; 253
 12c:	fd 4f       	sbci	r31, 0xFD	; 253
 12e:	84 17       	cp	r24, r20
 130:	95 07       	cpc	r25, r21
 132:	ac f3       	brlt	.-22     	; 0x11e <TxPacket+0x4a>
     {
         CheckSum += TxBuffer[Count];
     }
     TxBuffer[Count] = ~CheckSum;
 134:	20 95       	com	r18
 136:	20 83       	st	Z, r18

     RS485_TXD;
 138:	1b 98       	cbi	0x03, 3	; 3
 13a:	1a 9a       	sbi	0x03, 2	; 3


     for(Count = 0; Count < TxPacketLength; Count++)
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	0e c0       	rjmp	.+28     	; 0x15c <TxPacket+0x88>
     {
         UCSR1A |=(1<<TXC1);       //SET_TXD0_FINISH;
 140:	80 91 9b 00 	lds	r24, 0x009B
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 93 9b 00 	sts	0x009B, r24
         Uart_Putch(1,(TxBuffer[Count]));
 14a:	e1 2f       	mov	r30, r17
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ed 5f       	subi	r30, 0xFD	; 253
 150:	fd 4f       	sbci	r31, 0xFD	; 253
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	60 81       	ld	r22, Z
 156:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Putch>
     TxBuffer[Count] = ~CheckSum;

     RS485_TXD;


     for(Count = 0; Count < TxPacketLength; Count++)
 15a:	1f 5f       	subi	r17, 0xFF	; 255
 15c:	80 91 81 01 	lds	r24, 0x0181
 160:	18 17       	cp	r17, r24
 162:	70 f3       	brcs	.-36     	; 0x140 <TxPacket+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	8f e1       	ldi	r24, 0x1F	; 31
 166:	9e e4       	ldi	r25, 0x4E	; 78
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <TxPacket+0x94>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <TxPacket+0x9a>
 16e:	00 00       	nop
     {
         UCSR1A |=(1<<TXC1);       //SET_TXD0_FINISH;
         Uart_Putch(1,(TxBuffer[Count]));
     }
	 _delay_us(5000);
     while(!(UCSR1A & (1<<TXC1))); //Wait until TXD Shift register empty
 170:	80 91 9b 00 	lds	r24, 0x009B
 174:	86 ff       	sbrs	r24, 6
 176:	fc cf       	rjmp	.-8      	; 0x170 <TxPacket+0x9c>
 178:	87 e1       	ldi	r24, 0x17	; 23
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <TxPacket+0xa8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <TxPacket+0xae>
 182:	00 00       	nop
     _delay_us(70);
      Uart_Putch(0,'c');
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	63 e6       	ldi	r22, 0x63	; 99
 188:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Putch>
     
     RS485_RXD;
 18c:	1a 98       	cbi	0x03, 2	; 3
 18e:	1b 9a       	sbi	0x03, 3	; 3
	 Uart_Putch(0,'D');
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	64 e4       	ldi	r22, 0x44	; 68
 194:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Putch>
     return(TxPacketLength); //packetlength return
}
 198:	80 91 81 01 	lds	r24, 0x0181
 19c:	1f 91       	pop	r17
 19e:	08 95       	ret

000001a0 <Reset>:
     Parameter[4] = 0x00;     //CCW Angle Limit_H
     TxPacketLength = TxPacket(ID,INST_WRITE,5);
}
void Reset(unsigned char ID)
{	
	TxPacketLength = TxPacket(ID,INST_RESET,0);
 1a0:	66 e0       	ldi	r22, 0x06	; 6
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	0e 94 6a 00 	call	0xd4	; 0xd4 <TxPacket>
 1a8:	80 93 81 01 	sts	0x0181, r24
}
 1ac:	08 95       	ret

000001ae <Endless_Turn>:
//     				===== Endless_Turn =====
//             		: ALSO Have to set speed
//------------------------------------------------------------------------------
void Endless_Turn(unsigned char ID)       // Endless_Turn Setting
{
	 Parameter[0] = 0x06;     //CW Angle Limit
 1ae:	96 e0       	ldi	r25, 0x06	; 6
 1b0:	90 93 00 01 	sts	0x0100, r25
     Parameter[1] = 0x00;     //CW Angle Limit_L
 1b4:	10 92 01 01 	sts	0x0101, r1
     Parameter[2] = 0x00;     //CW Angle Limit_H
 1b8:	10 92 02 01 	sts	0x0102, r1
     Parameter[3] = 0x00;     //CCW Angle Limit_L
 1bc:	10 92 03 01 	sts	0x0103, r1
     Parameter[4] = 0x00;     //CCW Angle Limit_H
 1c0:	10 92 04 01 	sts	0x0104, r1
     TxPacketLength = TxPacket(ID,INST_WRITE,5);
 1c4:	63 e0       	ldi	r22, 0x03	; 3
 1c6:	45 e0       	ldi	r20, 0x05	; 5
 1c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <TxPacket>
 1cc:	80 93 81 01 	sts	0x0181, r24
}
 1d0:	08 95       	ret

000001d2 <S_Settting>:
//------------------------------------------------------------------------------
void S_Settting(unsigned char ID,unsigned char Speed_H,unsigned char Speed_L)
{
	Parameter[0] = 0x20;		//Speed Set
	Parameter[0] = Speed_L;	//Writing Data speed_L
	Parameter[0] = Speed_H;	//Writing Data speed_H
 1d2:	60 93 00 01 	sts	0x0100, r22
	TxPacketLength = TxPacket(ID,INST_WRITE,3);
 1d6:	63 e0       	ldi	r22, 0x03	; 3
 1d8:	43 e0       	ldi	r20, 0x03	; 3
 1da:	0e 94 6a 00 	call	0xd4	; 0xd4 <TxPacket>
 1de:	80 93 81 01 	sts	0x0181, r24
}
 1e2:	08 95       	ret

000001e4 <PS_Setting>:
//------------------------------------------------------------------------------
//     				===== position & speed set =====
//             		: Motor Baud Change  position: 0 ~ 0x1ff ~ 0x3ff speed: max=0x3ff 1=min 0=depends on Volt
//------------------------------------------------------------------------------
void PS_Setting(unsigned char ID,unsigned char Position_H,unsigned char Position_L,unsigned char Speed_H,unsigned char Speed_L) // Position, Speed Setting
{
 1e4:	0f 93       	push	r16
    Parameter[0] = 0x1e;   //GOAL_POSITION Address
 1e6:	9e e1       	ldi	r25, 0x1E	; 30
 1e8:	90 93 00 01 	sts	0x0100, r25
    Parameter[1] = Position_L;          //Writing Data P_GP_GOAL_POSITION_HOAL_POSITION_L
 1ec:	40 93 01 01 	sts	0x0101, r20
    Parameter[2] = Position_H;          //Writing Data
 1f0:	60 93 02 01 	sts	0x0102, r22
    Parameter[3] = Speed_L;             //Writing Data P_GOAL_SPEED_L
 1f4:	00 93 03 01 	sts	0x0103, r16
    Parameter[4] = Speed_H;             //Writing Data P_GOAL_SPEED_H
 1f8:	20 93 04 01 	sts	0x0104, r18
    TxPacketLength = TxPacket(ID,INST_WRITE,5);
 1fc:	63 e0       	ldi	r22, 0x03	; 3
 1fe:	45 e0       	ldi	r20, 0x05	; 5
 200:	0e 94 6a 00 	call	0xd4	; 0xd4 <TxPacket>
 204:	80 93 81 01 	sts	0x0181, r24
}
 208:	0f 91       	pop	r16
 20a:	08 95       	ret

0000020c <Baud_Setting>:
//     				===== Baud_Setting =====
//             		: Motor Baud Change
//------------------------------------------------------------------------------
void Baud_Setting(unsigned char ID, unsigned char BAUD)   //BAUD change
{
    Parameter[0] = 0x04;     //BAUD Address
 20c:	94 e0       	ldi	r25, 0x04	; 4
 20e:	90 93 00 01 	sts	0x0100, r25
    Parameter[1] = BAUD;     // Changed BAUD
 212:	60 93 01 01 	sts	0x0101, r22
    TxPacketLength = TxPacket(ID,INST_WRITE,2);      // before BAUD
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	42 e0       	ldi	r20, 0x02	; 2
 21a:	0e 94 6a 00 	call	0xd4	; 0xd4 <TxPacket>
 21e:	80 93 81 01 	sts	0x0181, r24
}
 222:	08 95       	ret

00000224 <ID_Setting>:
//     				===== ID_Setting =====
//             		: Motor ID Change
//------------------------------------------------------------------------------
void ID_Setting(unsigned char bID, unsigned char cID)     //ID change
{
    Parameter[0]= 0x03;  //ID Address 
 224:	93 e0       	ldi	r25, 0x03	; 3
 226:	90 93 00 01 	sts	0x0100, r25
    Parameter[1] = cID;  // Changed ID
 22a:	60 93 01 01 	sts	0x0101, r22
    TxPacketLength = TxPacket(bID,INST_WRITE,2);      // before ID
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	42 e0       	ldi	r20, 0x02	; 2
 232:	0e 94 6a 00 	call	0xd4	; 0xd4 <TxPacket>
 236:	80 93 81 01 	sts	0x0181, r24
}
 23a:	08 95       	ret

0000023c <__vector_30>:
//     				===== RX ISR =====
//             		: AX->MCU
//------------------------------------------------------------------------------

ISR(USART1_RX_vect)
{	
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	0b b6       	in	r0, 0x3b	; 59
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	Uart_Putch(0,1);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Putch>
	 Count=0;
	}
	
	*/	
		
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <Uart_Init>:
//     				===== Uart_Init =====
//             		: 희망하는 속도로 시리얼 통신을 초기화 한다.
//------------------------------------------------------------------------------

void Uart_Init(unsigned char com,unsigned long Uart_Baud) 
{	
 290:	1f 93       	push	r17
 292:	18 2f       	mov	r17, r24
 294:	9a 01       	movw	r18, r20
 296:	ab 01       	movw	r20, r22
	unsigned long Temp_UBRR;
	Temp_UBRR = 16000000/(16L * Uart_Baud) - 1;
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	44 1f       	adc	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	6a 95       	dec	r22
 2a4:	d1 f7       	brne	.-12     	; 0x29a <Uart_Init+0xa>
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	74 e2       	ldi	r23, 0x24	; 36
 2aa:	84 ef       	ldi	r24, 0xF4	; 244
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 bb 01 	call	0x376	; 0x376 <__udivmodsi4>
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	30 40       	sbci	r19, 0x00	; 0
 2b6:	40 40       	sbci	r20, 0x00	; 0
 2b8:	50 40       	sbci	r21, 0x00	; 0
	
	
    //---------------------------- UART0 초기화 --------------------------------
	if( com==0 )                           	
 2ba:	11 23       	and	r17, r17
 2bc:	91 f4       	brne	.+36     	; 0x2e2 <Uart_Init+0x52>
	{
		           // 통신속도 설정
		UBRR0H =(Temp_UBRR >> 8);              // 통신속도 설정
 2be:	bb 27       	eor	r27, r27
 2c0:	a5 2f       	mov	r26, r21
 2c2:	94 2f       	mov	r25, r20
 2c4:	83 2f       	mov	r24, r19
 2c6:	80 93 90 00 	sts	0x0090, r24
		UBRR0L =(Temp_UBRR & 0x00FF);
 2ca:	29 b9       	out	0x09, r18	; 9

		UCSR0A = (0<<RXC0)  | (1<<UDRE0);		// 수신,송신 상태비트 초기화
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	8b b9       	out	0x0b, r24	; 11
        UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);  		// 수신,송신 기능 활성화
 2d0:	88 e9       	ldi	r24, 0x98	; 152
 2d2:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = (3<<UCSZ00);					// START 1비트/DATA 8비트/STOP 1비트
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	80 93 95 00 	sts	0x0095, r24
		
		cbi( DDRE, 0 );                         // RXD0 핀 입력으로 설정
 2da:	10 98       	cbi	0x02, 0	; 2
		sbi( DDRE, 1 );                         // TXD0 핀 출력으로 설정
 2dc:	11 9a       	sbi	0x02, 1	; 2
		
		
		sbi(UCSR0B, RXCIE0);              	// 수신인터럽트0 활성화
 2de:	57 9a       	sbi	0x0a, 7	; 10
 2e0:	1a c0       	rjmp	.+52     	; 0x316 <Uart_Init+0x86>
		
	}
	
    //---------------------------- UART1 초기화 --------------------------------
	else if( com==1 )
 2e2:	11 30       	cpi	r17, 0x01	; 1
 2e4:	c1 f4       	brne	.+48     	; 0x316 <Uart_Init+0x86>
	{
		              // 통신속도 설정
		UBRR1H = (Temp_UBRR >> 8);              // 통신속도 설정
 2e6:	bb 27       	eor	r27, r27
 2e8:	a5 2f       	mov	r26, r21
 2ea:	94 2f       	mov	r25, r20
 2ec:	83 2f       	mov	r24, r19
 2ee:	80 93 98 00 	sts	0x0098, r24
		UBRR1L = (Temp_UBRR & 0x00FF);
 2f2:	20 93 99 00 	sts	0x0099, r18

		UCSR1A = (0<<RXC1)  | (1<<UDRE1); 		// 수신,송신 상태비트 초기화
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	80 93 9b 00 	sts	0x009B, r24
		UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);    	// 수신,송신 기능 활성화
 2fc:	88 e9       	ldi	r24, 0x98	; 152
 2fe:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = (3<<UCSZ10);                   // START 1비트/DATA 8비트/STOP 1비트
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	80 93 9d 00 	sts	0x009D, r24
		
		cbi( DDRD, 2 );                         // RXD1 핀 입력으로 설정
 308:	8a 98       	cbi	0x11, 2	; 17
		sbi( DDRD, 3 );                         // TXD1 핀 출력으로 설정
 30a:	8b 9a       	sbi	0x11, 3	; 17
		
		
		sbi(UCSR1B, RXCIE1);              	// 수신인터럽트1 활성화
 30c:	80 91 9a 00 	lds	r24, 0x009A
 310:	80 68       	ori	r24, 0x80	; 128
 312:	80 93 9a 00 	sts	0x009A, r24
		
	}
}
 316:	1f 91       	pop	r17
 318:	08 95       	ret

0000031a <Main_Init>:
//             		: SETTING
//------------------------------------------------------------------------------
void Main_Init(void)
{	
	
	sbi(DDRE,2); 
 31a:	12 9a       	sbi	0x02, 2	; 2
	sbi(DDRE,3);                ////RS485_TXD,RS485_RXD enable
 31c:	13 9a       	sbi	0x02, 3	; 2
	
	cbi(SREG,7);						//모든 인터럽트 비활성화
 31e:	8f b7       	in	r24, 0x3f	; 63
 320:	8f 77       	andi	r24, 0x7F	; 127
 322:	8f bf       	out	0x3f, r24	; 63
	Uart_Init(0,115200);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	52 ec       	ldi	r21, 0xC2	; 194
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	0e 94 48 01 	call	0x290	; 0x290 <Uart_Init>
	Uart_Init(1,1000000);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	40 e4       	ldi	r20, 0x40	; 64
 336:	52 e4       	ldi	r21, 0x42	; 66
 338:	6f e0       	ldi	r22, 0x0F	; 15
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	0e 94 48 01 	call	0x290	; 0x290 <Uart_Init>
		
	sbi(SREG,7);	 
 340:	8f b7       	in	r24, 0x3f	; 63
 342:	80 68       	ori	r24, 0x80	; 128
 344:	8f bf       	out	0x3f, r24	; 63
}
 346:	08 95       	ret

00000348 <main>:

//------------------------------------------------------------------------------
//     				===== Main =====
//------------------------------------------------------------------------------
void main()
{
 348:	0f 93       	push	r16
  Main_Init();
 34a:	0e 94 8d 01 	call	0x31a	; 0x31a <Main_Init>
  
  while(1)
  {
   Reset(0);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Reset>
   //	Uart_Putch(0,'A');
  //  Endless_Turn(0);
  //  _delay_ms(1000);
	PS_Setting(1,1,200,0x02,0xff);   
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	48 ec       	ldi	r20, 0xC8	; 200
 35a:	22 e0       	ldi	r18, 0x02	; 2
 35c:	0f ef       	ldi	r16, 0xFF	; 255
 35e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <PS_Setting>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	93 ed       	ldi	r25, 0xD3	; 211
 366:	a0 e3       	ldi	r26, 0x30	; 48
 368:	81 50       	subi	r24, 0x01	; 1
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	a0 40       	sbci	r26, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x20>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x2a>
 372:	00 00       	nop
 374:	ec cf       	rjmp	.-40     	; 0x34e <main+0x6>

00000376 <__udivmodsi4>:
 376:	a1 e2       	ldi	r26, 0x21	; 33
 378:	1a 2e       	mov	r1, r26
 37a:	aa 1b       	sub	r26, r26
 37c:	bb 1b       	sub	r27, r27
 37e:	fd 01       	movw	r30, r26
 380:	0d c0       	rjmp	.+26     	; 0x39c <__udivmodsi4_ep>

00000382 <__udivmodsi4_loop>:
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	ee 1f       	adc	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	a2 17       	cp	r26, r18
 38c:	b3 07       	cpc	r27, r19
 38e:	e4 07       	cpc	r30, r20
 390:	f5 07       	cpc	r31, r21
 392:	20 f0       	brcs	.+8      	; 0x39c <__udivmodsi4_ep>
 394:	a2 1b       	sub	r26, r18
 396:	b3 0b       	sbc	r27, r19
 398:	e4 0b       	sbc	r30, r20
 39a:	f5 0b       	sbc	r31, r21

0000039c <__udivmodsi4_ep>:
 39c:	66 1f       	adc	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	88 1f       	adc	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	1a 94       	dec	r1
 3a6:	69 f7       	brne	.-38     	; 0x382 <__udivmodsi4_loop>
 3a8:	60 95       	com	r22
 3aa:	70 95       	com	r23
 3ac:	80 95       	com	r24
 3ae:	90 95       	com	r25
 3b0:	9b 01       	movw	r18, r22
 3b2:	ac 01       	movw	r20, r24
 3b4:	bd 01       	movw	r22, r26
 3b6:	cf 01       	movw	r24, r30
 3b8:	08 95       	ret

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
