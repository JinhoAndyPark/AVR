
revdata.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000d7a  00000e0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000037c  0080013e  0080013e  00000e4c  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000039a  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000105f  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063e  00000000  00000000  000022e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d8d  00000000  00000000  00002923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  000036b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000618  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000777  00000000  00000000  00003f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  0000468f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 33       	cpi	r26, 0x3E	; 62
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	14 e0       	ldi	r17, 0x04	; 4
  b4:	ae e3       	ldi	r26, 0x3E	; 62
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 3b       	cpi	r26, 0xBA	; 186
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  c6:	0c 94 76 06 	jmp	0xcec	; 0xcec <exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_14>:

//------------------------------------------------------------------------------
//                   		=== Interrupt Service Routine ===
//------------------------------------------------------------------------------
ISR(TIMER1_OVF_vect)	//1//1ms
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	TCNT1 = 65285;
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	9f ef       	ldi	r25, 0xFF	; 255
  e0:	9d bd       	out	0x2d, r25	; 45
  e2:	8c bd       	out	0x2c, r24	; 44
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <Init_Main>:
//------------------------------------------------------------------------------
//                       	=== Initialize Function ===
//------------------------------------------------------------------------------
void Init_Main(void)
{
	Disable_ISR();           	// 전체인터럽트 사용금지
  f2:	8f b7       	in	r24, 0x3f	; 63
  f4:	8f 77       	andi	r24, 0x7F	; 127
  f6:	8f bf       	out	0x3f, r24	; 63
	 
	Init_Timer();				// 초기화_타이머0/1/2/3
  f8:	0e 94 5f 01 	call	0x2be	; 0x2be <Init_Timer>
    Init_Uart(0,9600);  		// 초기화_시리얼통신0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	55 e2       	ldi	r21, 0x25	; 37
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 93 01 	call	0x326	; 0x326 <Init_Uart>
	Init_Uart(1,9600);  	// 초기화_시리얼통신1
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	40 e8       	ldi	r20, 0x80	; 128
 10e:	55 e2       	ldi	r21, 0x25	; 37
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	0e 94 93 01 	call	0x326	; 0x326 <Init_Uart>

	sbi(DDRG,0);	//step
 118:	e4 e6       	ldi	r30, 0x64	; 100
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
	sbi(DDRG,1);	//dir
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
	sbi(DDRG,3);
 128:	80 81       	ld	r24, Z
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	80 83       	st	Z, r24
	sbi(DDRG,4);
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24

	Init_packet((PARTNER_PACKET*)&pPacket, (UART_CONTEXT*)&pContext );
 134:	8b e7       	ldi	r24, 0x7B	; 123
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	66 e4       	ldi	r22, 0x46	; 70
 13a:	71 e0       	ldi	r23, 0x01	; 1
 13c:	0e 94 24 05 	call	0xa48	; 0xa48 <Init_packet>

	Enable_ISR();            	// 전체인터럽트 사용허가
 140:	8f b7       	in	r24, 0x3f	; 63
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8f bf       	out	0x3f, r24	; 63
}
 146:	08 95       	ret

00000148 <main>:
*/
//------------------------------------------------------------------------------
//                      	=== Main Function ===
//------------------------------------------------------------------------------
void main(void)
{ 
 148:	bf 92       	push	r11
 14a:	cf 92       	push	r12
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
	Init_Main();		// 초기화_MCU
 156:	0e 94 79 00 	call	0xf2	; 0xf2 <Init_Main>

	Position_Homing();
 15a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <Position_Homing>
	//--------------------------------------------------------------------------

	//PacketManager((PARTNER_PACKET*)&pPacket, (UART_CONTEXT*)&pContext );
	//_delay_ms(5);		// delay. NECESSARY!!!
	
	if(RXstate == RXEND)
 15e:	80 91 41 01 	lds	r24, 0x0141
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x16>
	{
		Mode = MODE_RUN;
 166:	80 93 3e 01 	sts	0x013E, r24
 16a:	bb 24       	eor	r11, r11
 16c:	35 c0       	rjmp	.+106    	; 0x1d8 <main+0x90>
		for(U08 cnt=0; cnt<RXLENGTH; cnt++)
		{
			Uart_Print(1,"\n\r Xcod : ");
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	71 e0       	ldi	r23, 0x01	; 1
 174:	0e 94 ef 01 	call	0x3de	; 0x3de <Uart_Print>
			Uart_U08Bit_PutNum(1, CoordinateX[cnt]);
 178:	0b 2d       	mov	r16, r11
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	96 eb       	ldi	r25, 0xB6	; 182
 17e:	c9 2e       	mov	r12, r25
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	d9 2e       	mov	r13, r25
 184:	c0 0e       	add	r12, r16
 186:	d1 1e       	adc	r13, r17
 188:	f6 01       	movw	r30, r12
 18a:	60 81       	ld	r22, Z
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 07 02 	call	0x40e	; 0x40e <Uart_U08Bit_PutNum>
			Uart_Print(1," Ycod : ");
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	6b e0       	ldi	r22, 0x0B	; 11
 196:	71 e0       	ldi	r23, 0x01	; 1
 198:	0e 94 ef 01 	call	0x3de	; 0x3de <Uart_Print>
			Uart_U08Bit_PutNum(1, CoordinateY[cnt]);
 19c:	86 eb       	ldi	r24, 0xB6	; 182
 19e:	e8 2e       	mov	r14, r24
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	f8 2e       	mov	r15, r24
 1a4:	e0 0e       	add	r14, r16
 1a6:	f1 1e       	adc	r15, r17
 1a8:	f7 01       	movw	r30, r14
 1aa:	60 81       	ld	r22, Z
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 07 02 	call	0x40e	; 0x40e <Uart_U08Bit_PutNum>
			Uart_Print(1," Zcod : ");
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	64 e1       	ldi	r22, 0x14	; 20
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	0e 94 ef 01 	call	0x3de	; 0x3de <Uart_Print>
			Uart_U08Bit_PutNum(1, CoordinateZ[cnt]);
 1bc:	0b 54       	subi	r16, 0x4B	; 75
 1be:	1e 4f       	sbci	r17, 0xFE	; 254
 1c0:	f8 01       	movw	r30, r16
 1c2:	60 81       	ld	r22, Z
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 07 02 	call	0x40e	; 0x40e <Uart_U08Bit_PutNum>

			Moving_XYCoordinate(CoordinateX[cnt],CoordinateY[cnt]);
 1ca:	f6 01       	movw	r30, r12
 1cc:	80 81       	ld	r24, Z
 1ce:	f7 01       	movw	r30, r14
 1d0:	60 81       	ld	r22, Z
 1d2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <Moving_XYCoordinate>
	//_delay_ms(5);		// delay. NECESSARY!!!
	
	if(RXstate == RXEND)
	{
		Mode = MODE_RUN;
		for(U08 cnt=0; cnt<RXLENGTH; cnt++)
 1d6:	b3 94       	inc	r11
 1d8:	80 91 40 01 	lds	r24, 0x0140
 1dc:	b8 16       	cp	r11, r24
 1de:	38 f2       	brcs	.-114    	; 0x16e <main+0x26>
			Uart_U08Bit_PutNum(1, CoordinateZ[cnt]);

			Moving_XYCoordinate(CoordinateX[cnt],CoordinateY[cnt]);
			//Change ServoPWM
		}
		RXstate = RXREADY;
 1e0:	10 92 41 01 	sts	0x0141, r1
		SendRequestPacket(IND_TX_NEXTPAGE, 0x00);
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	0e 94 26 04 	call	0x84c	; 0x84c <SendRequestPacket>
 1ec:	b8 cf       	rjmp	.-144    	; 0x15e <main+0x16>

000001ee <__vector_18>:
{
	TCNT1 = 65285;
}

ISR(USART0_RX_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	0b b6       	in	r0, 0x3b	; 59
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	U08 data;
	Disable_ISR();
 214:	8f b7       	in	r24, 0x3f	; 63
 216:	8f 77       	andi	r24, 0x7F	; 127
 218:	8f bf       	out	0x3f, r24	; 63

	data = UDR0;
 21a:	2c b1       	in	r18, 0x0c	; 12
	//Uart_Putch(1, data);
	if(( data == PACKET_START) && ( pContext.b_start == NOT_YET))
 21c:	2f 3f       	cpi	r18, 0xFF	; 255
 21e:	d1 f4       	brne	.+52     	; 0x254 <__vector_18+0x66>
 220:	80 91 48 01 	lds	r24, 0x0148
 224:	90 91 49 01 	lds	r25, 0x0149
 228:	89 2b       	or	r24, r25
 22a:	a1 f4       	brne	.+40     	; 0x254 <__vector_18+0x66>
	{
		pContext.rPacketData[pContext.isr_cnt++] = data;
 22c:	80 91 46 01 	lds	r24, 0x0146
 230:	90 91 47 01 	lds	r25, 0x0147
 234:	fc 01       	movw	r30, r24
 236:	ea 5b       	subi	r30, 0xBA	; 186
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	24 83       	std	Z+4, r18	; 0x04
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 47 01 	sts	0x0147, r25
 242:	80 93 46 01 	sts	0x0146, r24
		pContext.b_start = DONE;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 49 01 	sts	0x0149, r25
 24e:	80 93 48 01 	sts	0x0148, r24
 252:	19 c0       	rjmp	.+50     	; 0x286 <__vector_18+0x98>
	}
	else if((pContext.isr_cnt >= 1) && (pContext.b_start == DONE))
 254:	80 91 46 01 	lds	r24, 0x0146
 258:	90 91 47 01 	lds	r25, 0x0147
 25c:	89 2b       	or	r24, r25
 25e:	99 f0       	breq	.+38     	; 0x286 <__vector_18+0x98>
 260:	80 91 48 01 	lds	r24, 0x0148
 264:	90 91 49 01 	lds	r25, 0x0149
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	69 f4       	brne	.+26     	; 0x286 <__vector_18+0x98>
	{
		pContext.rPacketData[pContext.isr_cnt++] = data;
 26c:	80 91 46 01 	lds	r24, 0x0146
 270:	90 91 47 01 	lds	r25, 0x0147
 274:	fc 01       	movw	r30, r24
 276:	ea 5b       	subi	r30, 0xBA	; 186
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	24 83       	std	Z+4, r18	; 0x04
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	90 93 47 01 	sts	0x0147, r25
 282:	80 93 46 01 	sts	0x0146, r24
	}
	PacketManager((PARTNER_PACKET*)&pPacket, (UART_CONTEXT*)&pContext );
 286:	8b e7       	ldi	r24, 0x7B	; 123
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	66 e4       	ldi	r22, 0x46	; 70
 28c:	71 e0       	ldi	r23, 0x01	; 1
 28e:	0e 94 30 05 	call	0xa60	; 0xa60 <PacketManager>
	Enable_ISR();
 292:	8f b7       	in	r24, 0x3f	; 63
 294:	80 68       	ori	r24, 0x80	; 128
 296:	8f bf       	out	0x3f, r24	; 63
}
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0b be       	out	0x3b, r0	; 59
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <Init_Timer>:
//------------------------------------------------------------------------------
void Init_Timer0(void)			// 타이머0 초기화
{
		
	#ifdef TIMER0_USE_PWM
		sbi( DDRB, 4 );		//OC0 enble
 2be:	bc 9a       	sbi	0x17, 4	; 23
		TCNT0 = 0;
 2c0:	12 be       	out	0x32, r1	; 50
		TCCR0 = ( 1 << WGM01 ) | ( 1 << WGM00 )  | ( 0 << COM00 ) | ( 1 << COM01 ) 
 2c2:	8f e6       	ldi	r24, 0x6F	; 111
 2c4:	83 bf       	out	0x33, r24	; 51
				| ( 1 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		// FAST PWM mode 설정
		OCR0 = 0;
 2c6:	11 be       	out	0x31, r1	; 49
//               			===== Timer2 Initialize =====
//------------------------------------------------------------------------------
void Init_Timer2(void)        	// 타이머2 초기화
{   
	#ifdef TIMER2_USE_PWM
		sbi( DDRB, 7 );		//OC0 enble
 2c8:	bf 9a       	sbi	0x17, 7	; 23
		TCCR2 = ( 1 << WGM21 ) | ( 1 << WGM20 ) | ( 0 << COM20 )| ( 1 << COM21 )
 2ca:	8d e6       	ldi	r24, 0x6D	; 109
 2cc:	85 bd       	out	0x25, r24	; 37
				| ( 1 << CS20 ) | ( 0 << CS21 ) | ( 1 << CS22 );	// FAST PWM mode 설정
		TCNT2 = 0;
 2ce:	14 bc       	out	0x24, r1	; 36
		OCR2 = 50;
 2d0:	82 e3       	ldi	r24, 0x32	; 50
 2d2:	83 bd       	out	0x23, r24	; 35
//------------------------------------------------------------------------------
//               			===== Timer1 Initialize =====
//------------------------------------------------------------------------------
void Init_Timer1(void)        	// 타이머1 초기화
{
	sbi( TIMSK, TOIE1 );     	// 타이머1 오버플로어 ON
 2d4:	87 b7       	in	r24, 0x37	; 55
 2d6:	84 60       	ori	r24, 0x04	; 4
 2d8:	87 bf       	out	0x37, r24	; 55
	TCNT1 	= 0;          		// 타이머1 상수
 2da:	1d bc       	out	0x2d, r1	; 45
 2dc:	1c bc       	out	0x2c, r1	; 44
	TCCR1B 	= ( 1 << CS10 ) | ( 1 << CS11 ) | ( 0 << CS12 );	// 타이머1 설정 (Normal-Mode,CLK/1)
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	8e bd       	out	0x2e, r24	; 46
		Init_Timer2();           	//타이머2 초기화
		
        // 16비트 타이머
		Init_Timer1();           	//타이머1 초기화
		//Init_Timer3();           	//타이머3 초기화
}
 2e2:	08 95       	ret

000002e4 <Init_Timer0>:
//------------------------------------------------------------------------------
void Init_Timer0(void)			// 타이머0 초기화
{
		
	#ifdef TIMER0_USE_PWM
		sbi( DDRB, 4 );		//OC0 enble
 2e4:	bc 9a       	sbi	0x17, 4	; 23
		TCNT0 = 0;
 2e6:	12 be       	out	0x32, r1	; 50
		TCCR0 = ( 1 << WGM01 ) | ( 1 << WGM00 )  | ( 0 << COM00 ) | ( 1 << COM01 ) 
 2e8:	8f e6       	ldi	r24, 0x6F	; 111
 2ea:	83 bf       	out	0x33, r24	; 51
				| ( 1 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		// FAST PWM mode 설정
		OCR0 = 0;
 2ec:	11 be       	out	0x31, r1	; 49
		TCNT0 = 0;		// 타이머0 상수 
		
		TCCR0 = ( 0 << CS00 ) | ( 1 << CS01 ) | ( 0 << CS02 );				// prescaler 설정
		
	#endif
}
 2ee:	08 95       	ret

000002f0 <Init_Timer1>:
//------------------------------------------------------------------------------
//               			===== Timer1 Initialize =====
//------------------------------------------------------------------------------
void Init_Timer1(void)        	// 타이머1 초기화
{
	sbi( TIMSK, TOIE1 );     	// 타이머1 오버플로어 ON
 2f0:	87 b7       	in	r24, 0x37	; 55
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	87 bf       	out	0x37, r24	; 55
	TCNT1 	= 0;          		// 타이머1 상수
 2f6:	1d bc       	out	0x2d, r1	; 45
 2f8:	1c bc       	out	0x2c, r1	; 44
	TCCR1B 	= ( 1 << CS10 ) | ( 1 << CS11 ) | ( 0 << CS12 );	// 타이머1 설정 (Normal-Mode,CLK/1)
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	8e bd       	out	0x2e, r24	; 46
}
 2fe:	08 95       	ret

00000300 <Init_Timer2>:
//               			===== Timer2 Initialize =====
//------------------------------------------------------------------------------
void Init_Timer2(void)        	// 타이머2 초기화
{   
	#ifdef TIMER2_USE_PWM
		sbi( DDRB, 7 );		//OC0 enble
 300:	bf 9a       	sbi	0x17, 7	; 23
		TCCR2 = ( 1 << WGM21 ) | ( 1 << WGM20 ) | ( 0 << COM20 )| ( 1 << COM21 )
 302:	8d e6       	ldi	r24, 0x6D	; 109
 304:	85 bd       	out	0x25, r24	; 37
				| ( 1 << CS20 ) | ( 0 << CS21 ) | ( 1 << CS22 );	// FAST PWM mode 설정
		TCNT2 = 0;
 306:	14 bc       	out	0x24, r1	; 36
		OCR2 = 50;
 308:	82 e3       	ldi	r24, 0x32	; 50
 30a:	83 bd       	out	0x23, r24	; 35
		sbi( TIMSK, TOIE2 );     	// 타이머2 오버플로어 ON
		TCNT2 = 0;				// 타이머2 상수
		
		TCCR2 = ( 0 << CS00 ) | ( 0 << CS01 ) | ( 0 << CS02 );				// prescaler 설정
	#endif
}
 30c:	08 95       	ret

0000030e <Init_Timer3>:
//------------------------------------------------------------------------------
//               			===== Timer3 Initialize =====
//------------------------------------------------------------------------------
void Init_Timer3(void)        	// 타이머3 초기화
{
	sbi( ETIMSK, TOIE3 );    	// 타이머3 오버플로어 ON
 30e:	ed e7       	ldi	r30, 0x7D	; 125
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	84 60       	ori	r24, 0x04	; 4
 316:	80 83       	st	Z, r24
	TCNT3 	= 0;          	// 타이머3 상수
 318:	10 92 89 00 	sts	0x0089, r1
 31c:	10 92 88 00 	sts	0x0088, r1
	TCCR3B 	= ( 0 << CS30 ) | ( 0 << CS31 ) | ( 0 << CS32 );           	// 타이머3 설정 (Normal-Mode,CLK/1)
 320:	10 92 8a 00 	sts	0x008A, r1
}
 324:	08 95       	ret

00000326 <Init_Uart>:
//------------------------------------------------------------------------------
//     				===== Uart_Init =====
//             		: 희망하는 속도로 시리얼 통신을 초기화 한다.
//------------------------------------------------------------------------------
void Init_Uart(U08 Com, U32 Uart_Baud)
{
 326:	1f 93       	push	r17
 328:	18 2f       	mov	r17, r24
 32a:	9a 01       	movw	r18, r20
 32c:	ab 01       	movw	r20, r22
	U16 Temp_UBRR;

	Temp_UBRR = AVR_CLK/(16L * Uart_Baud) - 1;   	// 통신 보레이트 계산식
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	44 1f       	adc	r20, r20
 336:	55 1f       	adc	r21, r21
 338:	8a 95       	dec	r24
 33a:	d1 f7       	brne	.-12     	; 0x330 <Init_Uart+0xa>
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	74 e2       	ldi	r23, 0x24	; 36
 340:	84 ef       	ldi	r24, 0xF4	; 244
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 99 06 	call	0xd32	; 0xd32 <__udivmodsi4>
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	30 40       	sbci	r19, 0x00	; 0
													// U2X = 0 일때 (일반모드)
	
    //---------------------------- UART0 초기화 --------------------------------
	if( Com == UART0 )                           	
 34c:	11 23       	and	r17, r17
 34e:	71 f4       	brne	.+28     	; 0x36c <Init_Uart+0x46>
	{
		UBRR0H = (Temp_UBRR >> 8);              // 통신속도 설정
 350:	30 93 90 00 	sts	0x0090, r19
		UBRR0L = (Temp_UBRR & 0x00FF);
 354:	29 b9       	out	0x09, r18	; 9
		
		UCSR0A = (0<<RXC0)  | (1<<UDRE0);		// 수신,송신 상태비트 초기화
 356:	80 e2       	ldi	r24, 0x20	; 32
 358:	8b b9       	out	0x0b, r24	; 11
        UCSR0B = (1<<RXEN0) | (1<<TXEN0);  		// 수신,송신 기능 활성화
 35a:	88 e1       	ldi	r24, 0x18	; 24
 35c:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = (3<<UCSZ00);				// START 1비트/DATA 8비트/STOP 1비트
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	80 93 95 00 	sts	0x0095, r24
		
		cbi( DDRE, 0 );                         // RXD0 핀 입력으로 설정
 364:	10 98       	cbi	0x02, 0	; 2
		sbi( DDRE, 1 );                         // TXD0 핀 출력으로 설정
 366:	11 9a       	sbi	0x02, 1	; 2
		
		#ifdef UART0_RX_INT_ENABLE			// UART0_RX_INT_ENABLE 설정시만
			UCSR0B |=  (1<<RXCIE0);	             	// 수신인터럽트0 활성화
 368:	57 9a       	sbi	0x0a, 7	; 10
 36a:	16 c0       	rjmp	.+44     	; 0x398 <Init_Uart+0x72>
		#endif
	}
	
    //---------------------------- UART1 초기화 --------------------------------
	if( Com == UART1)
 36c:	11 30       	cpi	r17, 0x01	; 1
 36e:	a1 f4       	brne	.+40     	; 0x398 <Init_Uart+0x72>
	{
		UBRR1H = (Temp_UBRR >> 8);              // 통신속도 설정
 370:	30 93 98 00 	sts	0x0098, r19
		UBRR1L = (Temp_UBRR & 0x00FF);
 374:	20 93 99 00 	sts	0x0099, r18

		UCSR1A = (0<<RXC1)  | (1<<UDRE1); 	// 수신,송신 상태비트 초기화
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	80 93 9b 00 	sts	0x009B, r24
		UCSR1B = (1<<RXEN1) | (1<<TXEN1);    	// 수신,송신 기능 활성화
 37e:	88 e1       	ldi	r24, 0x18	; 24
 380:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = (3<<UCSZ10);                   // START 1비트/DATA 8비트/STOP 1비트
 384:	86 e0       	ldi	r24, 0x06	; 6
 386:	80 93 9d 00 	sts	0x009D, r24
		
		cbi( DDRD, 2 );                         // RXD1 핀 입력으로 설정
 38a:	8a 98       	cbi	0x11, 2	; 17
		sbi( DDRD, 3 );                         // TXD1 핀 출력으로 설정
 38c:	8b 9a       	sbi	0x11, 3	; 17
		
		#ifdef UART1_RX_INT_ENABLE			// UART1_RX_INT_ENABLE 설정시만
			UCSR1B |=  (1<<RXCIE1);              	// 수신인터럽트1 활성화
 38e:	80 91 9a 00 	lds	r24, 0x009A
 392:	80 68       	ori	r24, 0x80	; 128
 394:	80 93 9a 00 	sts	0x009A, r24
		#endif
	}

}
 398:	1f 91       	pop	r17
 39a:	08 95       	ret

0000039c <Uart_Getch>:
//       			===== Uart_Getch =====
//              	: 시리얼 포트로 부터 1바이트 데이터를 받는다.
//----------------------------------------------------------------------------
U08 Uart_Getch(U08 Com)
{
	switch( Com )
 39c:	88 23       	and	r24, r24
 39e:	21 f0       	breq	.+8      	; 0x3a8 <Uart_Getch+0xc>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <Uart_Getch+0x14>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
	{
		case UART0:
			while(!( UCSR0A & (1<<RXC0)) );    // 수신완료까지 대기
 3a8:	5f 9b       	sbis	0x0b, 7	; 11
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <Uart_Getch+0xc>
			return UDR0;                       // 수신데이터 반환
 3ac:	8c b1       	in	r24, 0x0c	; 12
 3ae:	08 95       	ret
		
		case UART1:
			while(!( UCSR1A & (1<<RXC1)) );    // 수신완료까지 대기
 3b0:	80 91 9b 00 	lds	r24, 0x009B
 3b4:	87 ff       	sbrs	r24, 7
 3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <Uart_Getch+0x14>
			return UDR1;                       // 순신데이터 반환
 3b8:	80 91 9c 00 	lds	r24, 0x009C
		
        default:
			return 0;
	}
}
 3bc:	08 95       	ret

000003be <Uart_Putch>:
//   				===== Uart_Putch =====
//             		: 시리얼 포트로 1바이트 보낸다.
//----------------------------------------------------------------------------
void Uart_Putch(U08 Com, U08 PutData)
{
	switch(Com)
 3be:	88 23       	and	r24, r24
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <Uart_Putch+0xa>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	59 f4       	brne	.+22     	; 0x3dc <Uart_Putch+0x1e>
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <Uart_Putch+0x12>
	{
		case UART0:
			while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
 3c8:	5d 9b       	sbis	0x0b, 5	; 11
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <Uart_Putch+0xa>
			UDR0 = PutData;                     // 데이터를 전송한다
 3cc:	6c b9       	out	0x0c, r22	; 12
 3ce:	08 95       	ret
			break;
		
		case UART1:
			while(!( UCSR1A & (1<<UDRE1)) );    // 송신가능시점까지 대기
 3d0:	80 91 9b 00 	lds	r24, 0x009B
 3d4:	85 ff       	sbrs	r24, 5
 3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <Uart_Putch+0x12>
			UDR1 = PutData;                     // 데이터를 전송한다
 3d8:	60 93 9c 00 	sts	0x009C, r22
 3dc:	08 95       	ret

000003de <Uart_Print>:
//----------------------------------------------------------------------------
//          		===== Uart_Print =====
//             		: 시리얼로 문자열을 보낸다.
//----------------------------------------------------------------------------
void Uart_Print(U08 Com, char *UartPrintData)
{
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	18 2f       	mov	r17, r24
 3e6:	eb 01       	movw	r28, r22
 3e8:	0b c0       	rjmp	.+22     	; 0x400 <Uart_Print+0x22>
	while(*UartPrintData != '\0')				// NULL문자 전까지 반복
	{
		Uart_Putch( Com, *UartPrintData );		// 1바이트씩 전송
 3ea:	81 2f       	mov	r24, r17
 3ec:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
		
		if(*UartPrintData == 0x0A)  			// LF 에 CR을 보탠다
 3f0:	88 81       	ld	r24, Y
 3f2:	8a 30       	cpi	r24, 0x0A	; 10
 3f4:	21 f4       	brne	.+8      	; 0x3fe <Uart_Print+0x20>
			Uart_Putch( Com, 0x0D );
 3f6:	81 2f       	mov	r24, r17
 3f8:	6d e0       	ldi	r22, 0x0D	; 13
 3fa:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
		
		UartPrintData++;
 3fe:	21 96       	adiw	r28, 0x01	; 1
//          		===== Uart_Print =====
//             		: 시리얼로 문자열을 보낸다.
//----------------------------------------------------------------------------
void Uart_Print(U08 Com, char *UartPrintData)
{
	while(*UartPrintData != '\0')				// NULL문자 전까지 반복
 400:	68 81       	ld	r22, Y
 402:	66 23       	and	r22, r22
 404:	91 f7       	brne	.-28     	; 0x3ea <Uart_Print+0xc>
		if(*UartPrintData == 0x0A)  			// LF 에 CR을 보탠다
			Uart_Putch( Com, 0x0D );
		
		UartPrintData++;
	}
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	08 95       	ret

0000040e <Uart_U08Bit_PutNum>:
//----------------------------------------------------------------------------
//        			===== Uart_U08Bit_PutNum =====
//             		: 시리얼로 unsigned char 형 숫자를 출력
//----------------------------------------------------------------------------
void Uart_U08Bit_PutNum(U08 Com, U08 NumData)
{
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	08 2f       	mov	r16, r24
 414:	16 2f       	mov	r17, r22
	U08 TempData;

	TempData =  NumData/100;
	Uart_Putch(Com, TempData+48);			// 100 자리 무조건 출력
 416:	86 2f       	mov	r24, r22
 418:	64 e6       	ldi	r22, 0x64	; 100
 41a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 41e:	68 2f       	mov	r22, r24
 420:	60 5d       	subi	r22, 0xD0	; 208
 422:	80 2f       	mov	r24, r16
 424:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      		// 10  자리 무조건 출력
 428:	81 2f       	mov	r24, r17
 42a:	64 e6       	ldi	r22, 0x64	; 100
 42c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 430:	89 2f       	mov	r24, r25
 432:	6a e0       	ldi	r22, 0x0A	; 10
 434:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 438:	68 2f       	mov	r22, r24
 43a:	60 5d       	subi	r22, 0xD0	; 208
 43c:	80 2f       	mov	r24, r16
 43e:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);     	 	// 1   자리 무조건 출력
 442:	81 2f       	mov	r24, r17
 444:	6a e0       	ldi	r22, 0x0A	; 10
 446:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 44a:	90 5d       	subi	r25, 0xD0	; 208
 44c:	80 2f       	mov	r24, r16
 44e:	69 2f       	mov	r22, r25
 450:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
}
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <Uart_U08Bit_PutNum_Substance>:
//----------------------------------------------------------------------------
//        			===== Uart_U08Bit_PutNum_Substance =====
//              	: 시리얼로 unsigned char 형 숫자를 출력(실질적인 숫자)
//----------------------------------------------------------------------------
void Uart_U08Bit_PutNum_Substance(U08 Com, U08 NumData)
{
 45a:	ff 92       	push	r15
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	08 2f       	mov	r16, r24
 462:	f6 2e       	mov	r15, r22
	U08 TempData100;
	U08 TempData10;
	U08 TempData1;

	TempData100 =  NumData/100;
 464:	86 2f       	mov	r24, r22
 466:	64 e6       	ldi	r22, 0x64	; 100
 468:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 46c:	18 2f       	mov	r17, r24
	if(TempData100 > 0)					// 100 자리가 0보다 크면 출력
 46e:	88 23       	and	r24, r24
 470:	29 f0       	breq	.+10     	; 0x47c <Uart_U08Bit_PutNum_Substance+0x22>
		Uart_Putch(Com, TempData100+48);   		// 100 자리 출력
 472:	68 2f       	mov	r22, r24
 474:	60 5d       	subi	r22, 0xD0	; 208
 476:	80 2f       	mov	r24, r16
 478:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData10 = (NumData%100)/10;
 47c:	8f 2d       	mov	r24, r15
 47e:	64 e6       	ldi	r22, 0x64	; 100
 480:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 484:	89 2f       	mov	r24, r25
 486:	6a e0       	ldi	r22, 0x0A	; 10
 488:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 48c:	68 2f       	mov	r22, r24
	if(TempData10 > 0)					// 10  자리가 0보다 크면 출력
 48e:	88 23       	and	r24, r24
 490:	19 f0       	breq	.+6      	; 0x498 <Uart_U08Bit_PutNum_Substance+0x3e>
		Uart_Putch(Com, TempData10+48);   		
 492:	60 5d       	subi	r22, 0xD0	; 208
 494:	80 2f       	mov	r24, r16
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <Uart_U08Bit_PutNum_Substance+0x46>
    else 							// 10  자리가 0이면
    {
        if(TempData100 > 0)					// 100 자리가 존재하면 0출력
 498:	11 23       	and	r17, r17
 49a:	21 f0       	breq	.+8      	; 0x4a4 <Uart_U08Bit_PutNum_Substance+0x4a>
	        Uart_Putch(Com, TempData10+48);   		// 100 자리가 존재하지 않으면 출력하지 않음
 49c:	80 2f       	mov	r24, r16
 49e:	60 e3       	ldi	r22, 0x30	; 48
 4a0:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
    }

	TempData1 = NumData%10;
	Uart_Putch(Com, TempData1+48);      			// 1   자리는 무조건 출력
 4a4:	8f 2d       	mov	r24, r15
 4a6:	6a e0       	ldi	r22, 0x0A	; 10
 4a8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 4ac:	90 5d       	subi	r25, 0xD0	; 208
 4ae:	80 2f       	mov	r24, r16
 4b0:	69 2f       	mov	r22, r25
 4b2:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
}
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	08 95       	ret

000004be <Uart_U10Bit_PutNum>:
//        			===== Uart_U10Bit_PutNum =====
//             		: 시리얼로 unsigned char 형 숫자를 출력
// * 임시적용 *
//----------------------------------------------------------------------------
void Uart_U10Bit_PutNum(U08 Com, U16 NumData)
{
 4be:	ff 92       	push	r15
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	f8 2e       	mov	r15, r24
 4c6:	8b 01       	movw	r16, r22
	U16 TempData;

	TempData =  NumData/1000;
	Uart_Putch(Com, TempData+48);			// 1000 자리 무조건 출력
 4c8:	cb 01       	movw	r24, r22
 4ca:	68 ee       	ldi	r22, 0xE8	; 232
 4cc:	73 e0       	ldi	r23, 0x03	; 3
 4ce:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 4d2:	60 5d       	subi	r22, 0xD0	; 208
 4d4:	8f 2d       	mov	r24, r15
 4d6:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData = (NumData%1000)/100;
	Uart_Putch(Com, TempData+48);			// 100  자리 무조건 출력
 4da:	c8 01       	movw	r24, r16
 4dc:	68 ee       	ldi	r22, 0xE8	; 232
 4de:	73 e0       	ldi	r23, 0x03	; 3
 4e0:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 4e4:	64 e6       	ldi	r22, 0x64	; 100
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 4ec:	60 5d       	subi	r22, 0xD0	; 208
 4ee:	8f 2d       	mov	r24, r15
 4f0:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      		// 10   자리 무조건 출력
 4f4:	c8 01       	movw	r24, r16
 4f6:	64 e6       	ldi	r22, 0x64	; 100
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 4fe:	6a e0       	ldi	r22, 0x0A	; 10
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 506:	60 5d       	subi	r22, 0xD0	; 208
 508:	8f 2d       	mov	r24, r15
 50a:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);      		// 1    자리 무조건 출력
 50e:	c8 01       	movw	r24, r16
 510:	6a e0       	ldi	r22, 0x0A	; 10
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 518:	68 2f       	mov	r22, r24
 51a:	60 5d       	subi	r22, 0xD0	; 208
 51c:	8f 2d       	mov	r24, r15
 51e:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
}
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	08 95       	ret

0000052a <Uart_U10Bit_PutNum3>:
//        			===== Uart_U10Bit_PutNum =====
//             		: 시리얼로 unsigned char 형 숫자를 출력
// * 임시적용 *
//----------------------------------------------------------------------------
void Uart_U10Bit_PutNum3(U08 Com, U16 NumData)
{
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	f8 2e       	mov	r15, r24
 532:	8b 01       	movw	r16, r22
	U16 TempData;
	
	TempData = (NumData%1000)/100;
	Uart_Putch(Com, TempData+48);			// 100  자리 무조건 출력
 534:	cb 01       	movw	r24, r22
 536:	68 ee       	ldi	r22, 0xE8	; 232
 538:	73 e0       	ldi	r23, 0x03	; 3
 53a:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 53e:	64 e6       	ldi	r22, 0x64	; 100
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 546:	60 5d       	subi	r22, 0xD0	; 208
 548:	8f 2d       	mov	r24, r15
 54a:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      		// 10   자리 무조건 출력
 54e:	c8 01       	movw	r24, r16
 550:	64 e6       	ldi	r22, 0x64	; 100
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 558:	6a e0       	ldi	r22, 0x0A	; 10
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 560:	60 5d       	subi	r22, 0xD0	; 208
 562:	8f 2d       	mov	r24, r15
 564:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);      		// 1    자리 무조건 출력
 568:	c8 01       	movw	r24, r16
 56a:	6a e0       	ldi	r22, 0x0A	; 10
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 572:	68 2f       	mov	r22, r24
 574:	60 5d       	subi	r22, 0xD0	; 208
 576:	8f 2d       	mov	r24, r15
 578:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
}
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	08 95       	ret

00000584 <Uart_U16Bit_PutNum>:
//----------------------------------------------------------------------------
//          		===== Uart_U16Bit_PutNum =====
//          		: 시리얼로 unsigned char 형 숫자를 출력
//----------------------------------------------------------------------------
void Uart_U16Bit_PutNum(U08 Com, U16 NumData)
{
 584:	ff 92       	push	r15
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	f8 2e       	mov	r15, r24
 58c:	8b 01       	movw	r16, r22
	U16 TempData;

	TempData = NumData/10000;
	Uart_Putch(Com, TempData+48);      // 10000 	자리 무조건 출력
 58e:	cb 01       	movw	r24, r22
 590:	60 e1       	ldi	r22, 0x10	; 16
 592:	77 e2       	ldi	r23, 0x27	; 39
 594:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 598:	60 5d       	subi	r22, 0xD0	; 208
 59a:	8f 2d       	mov	r24, r15
 59c:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData = (NumData%10000)/1000;
	Uart_Putch(Com, TempData+48);      // 1000 	자리 무조건 출력
 5a0:	c8 01       	movw	r24, r16
 5a2:	60 e1       	ldi	r22, 0x10	; 16
 5a4:	77 e2       	ldi	r23, 0x27	; 39
 5a6:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 5aa:	68 ee       	ldi	r22, 0xE8	; 232
 5ac:	73 e0       	ldi	r23, 0x03	; 3
 5ae:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 5b2:	60 5d       	subi	r22, 0xD0	; 208
 5b4:	8f 2d       	mov	r24, r15
 5b6:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData = (NumData%1000)/100;
	Uart_Putch(Com, TempData+48);      // 100  	자리 무조건 출력
 5ba:	c8 01       	movw	r24, r16
 5bc:	68 ee       	ldi	r22, 0xE8	; 232
 5be:	73 e0       	ldi	r23, 0x03	; 3
 5c0:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 5c4:	64 e6       	ldi	r22, 0x64	; 100
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 5cc:	60 5d       	subi	r22, 0xD0	; 208
 5ce:	8f 2d       	mov	r24, r15
 5d0:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      // 10   	자리 무조건 출력
 5d4:	c8 01       	movw	r24, r16
 5d6:	64 e6       	ldi	r22, 0x64	; 100
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 5de:	6a e0       	ldi	r22, 0x0A	; 10
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 5e6:	60 5d       	subi	r22, 0xD0	; 208
 5e8:	8f 2d       	mov	r24, r15
 5ea:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);      // 1   	자리 무조건 출력
 5ee:	c8 01       	movw	r24, r16
 5f0:	6a e0       	ldi	r22, 0x0A	; 10
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 5f8:	68 2f       	mov	r22, r24
 5fa:	60 5d       	subi	r22, 0xD0	; 208
 5fc:	8f 2d       	mov	r24, r15
 5fe:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
}
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	ff 90       	pop	r15
 608:	08 95       	ret

0000060a <Uart_U16Bit_PutNum_Substance>:
//----------------------------------------------------------------------------
//        			===== Uart_U16Bit_PutNum_Substance =====
//              	: 시리얼로 unsigned int 형 숫자를 출력(실질적인 숫자)
//----------------------------------------------------------------------------
void Uart_U16Bit_PutNum_Substance(U08 Com, U16 NumData)	// 0~65535
{
 60a:	af 92       	push	r10
 60c:	bf 92       	push	r11
 60e:	df 92       	push	r13
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	d8 2e       	mov	r13, r24
 61e:	5b 01       	movw	r10, r22
    U16 TempData1000;
    U16 TempData100;
    U16 TempData10;
    U16 TempData1;

    TempData10000 = (NumData/10000);
 620:	cb 01       	movw	r24, r22
 622:	60 e1       	ldi	r22, 0x10	; 16
 624:	77 e2       	ldi	r23, 0x27	; 39
 626:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 62a:	7b 01       	movw	r14, r22
    if(TempData10000 > 0)							// 10000 자리가 0보다 크면 출력
 62c:	61 15       	cp	r22, r1
 62e:	71 05       	cpc	r23, r1
 630:	21 f0       	breq	.+8      	; 0x63a <Uart_U16Bit_PutNum_Substance+0x30>
        Uart_Putch(Com, TempData10000+48);
 632:	60 5d       	subi	r22, 0xD0	; 208
 634:	8d 2d       	mov	r24, r13
 636:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
													// 10000 자리가 0이면 출력하지 않음

    TempData1000 = ((NumData%10000)/1000);			
 63a:	c5 01       	movw	r24, r10
 63c:	60 e1       	ldi	r22, 0x10	; 16
 63e:	77 e2       	ldi	r23, 0x27	; 39
 640:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 644:	68 ee       	ldi	r22, 0xE8	; 232
 646:	73 e0       	ldi	r23, 0x03	; 3
 648:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 64c:	8b 01       	movw	r16, r22
    if(TempData1000 > 0)							// 1000  자리가 0보다 크면 출력
 64e:	61 15       	cp	r22, r1
 650:	71 05       	cpc	r23, r1
 652:	19 f0       	breq	.+6      	; 0x65a <Uart_U16Bit_PutNum_Substance+0x50>
        Uart_Putch(Com, TempData1000+48);
 654:	60 5d       	subi	r22, 0xD0	; 208
 656:	8d 2d       	mov	r24, r13
 658:	05 c0       	rjmp	.+10     	; 0x664 <Uart_U16Bit_PutNum_Substance+0x5a>
    else											// 1000  자리가 0이면
    {
        if(TempData10000 > 0)						// 10000 자리가 존재하면 0출력
 65a:	e1 14       	cp	r14, r1
 65c:	f1 04       	cpc	r15, r1
 65e:	21 f0       	breq	.+8      	; 0x668 <Uart_U16Bit_PutNum_Substance+0x5e>
            Uart_Putch(Com, TempData1000+48);	    // 10000 자리가 존재하지 않으면 출력하지 않음
 660:	8d 2d       	mov	r24, r13
 662:	60 e3       	ldi	r22, 0x30	; 48
 664:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
    }

    TempData100 = ((NumData%1000)/100);				
 668:	c5 01       	movw	r24, r10
 66a:	68 ee       	ldi	r22, 0xE8	; 232
 66c:	73 e0       	ldi	r23, 0x03	; 3
 66e:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 672:	64 e6       	ldi	r22, 0x64	; 100
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 67a:	eb 01       	movw	r28, r22
    if(TempData100 > 0)								// 100   자리가 0보다 크면 출력
 67c:	61 15       	cp	r22, r1
 67e:	71 05       	cpc	r23, r1
 680:	29 f0       	breq	.+10     	; 0x68c <Uart_U16Bit_PutNum_Substance+0x82>
        Uart_Putch(Com, TempData100+48);
 682:	cb 01       	movw	r24, r22
 684:	80 5d       	subi	r24, 0xD0	; 208
 686:	68 2f       	mov	r22, r24
 688:	8d 2d       	mov	r24, r13
 68a:	08 c0       	rjmp	.+16     	; 0x69c <Uart_U16Bit_PutNum_Substance+0x92>
    else											// 100   자리가 0이면
    {
        if(TempData1000 > 0)						// 1000  자리가 존재하면 0출력
 68c:	01 15       	cp	r16, r1
 68e:	11 05       	cpc	r17, r1
 690:	19 f4       	brne	.+6      	; 0x698 <Uart_U16Bit_PutNum_Substance+0x8e>
            Uart_Putch(Com, TempData100+48);
        else										// 1000  자리가 존재하지 않으면						
        {
            if(TempData10000 > 0)					// 10000 자리가 존재하면 0출력
 692:	e1 14       	cp	r14, r1
 694:	f1 04       	cpc	r15, r1
 696:	21 f0       	breq	.+8      	; 0x6a0 <Uart_U16Bit_PutNum_Substance+0x96>
                Uart_Putch(Com, TempData100+48);	// 10000 자리가 존재하지 않으면 출력하지 않음
 698:	8d 2d       	mov	r24, r13
 69a:	60 e3       	ldi	r22, 0x30	; 48
 69c:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
        }											
    }

    TempData10 = ((NumData%100)/10);
 6a0:	c5 01       	movw	r24, r10
 6a2:	64 e6       	ldi	r22, 0x64	; 100
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 6aa:	6a e0       	ldi	r22, 0x0A	; 10
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
    if(TempData10 > 0)								// 10    자리가 0보다 크면 출력
 6b2:	61 15       	cp	r22, r1
 6b4:	71 05       	cpc	r23, r1
 6b6:	19 f0       	breq	.+6      	; 0x6be <Uart_U16Bit_PutNum_Substance+0xb4>
        Uart_Putch(Com, TempData10+48);			
 6b8:	60 5d       	subi	r22, 0xD0	; 208
 6ba:	8d 2d       	mov	r24, r13
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <Uart_U16Bit_PutNum_Substance+0xc4>
    else											// 10    자리가 0이면
    {
        if(TempData100 > 0)							// 100   자리가 존재하면 0출력
 6be:	cd 2b       	or	r28, r29
 6c0:	21 f4       	brne	.+8      	; 0x6ca <Uart_U16Bit_PutNum_Substance+0xc0>
            Uart_Putch(Com, TempData10+48);
        else										// 100   자리가 존재하지 않으면
        {
            if(TempData1000 > 0)					// 1000  자리가 존재하면 0출력
 6c2:	01 2b       	or	r16, r17
 6c4:	11 f4       	brne	.+4      	; 0x6ca <Uart_U16Bit_PutNum_Substance+0xc0>
                Uart_Putch(Com, TempData10+48);	
            else									// 1000  자리가 존재하지 않으면	
            {
                if(TempData10000 > 0)				// 10000 자리가 존재하면 0출력
 6c6:	ef 28       	or	r14, r15
 6c8:	21 f0       	breq	.+8      	; 0x6d2 <Uart_U16Bit_PutNum_Substance+0xc8>
                    Uart_Putch(Com, TempData10+48);	// 10000 자리가 존재하지 않으면 출력하지 않음
 6ca:	8d 2d       	mov	r24, r13
 6cc:	60 e3       	ldi	r22, 0x30	; 48
 6ce:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
            }
        }
    }
	TempData1 = NumData%10;
	Uart_Putch(Com, TempData1+48);      // 1자리는 값이 0이라도 그냥 찍는다.
 6d2:	c5 01       	movw	r24, r10
 6d4:	6a e0       	ldi	r22, 0x0A	; 10
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	0e 94 85 06 	call	0xd0a	; 0xd0a <__udivmodhi4>
 6dc:	68 2f       	mov	r22, r24
 6de:	60 5d       	subi	r22, 0xD0	; 208
 6e0:	8d 2d       	mov	r24, r13
 6e2:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
 }
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	ff 90       	pop	r15
 6f0:	ef 90       	pop	r14
 6f2:	df 90       	pop	r13
 6f4:	bf 90       	pop	r11
 6f6:	af 90       	pop	r10
 6f8:	08 95       	ret

000006fa <Uart_ByteToHexPutch>:
//----------------------------------------------------------------------------
//         			===== Uart_ByteToHexPutch =====
//         			:8비트 데이타를 헥사로 출력한다.
//----------------------------------------------------------------------------
void Uart_ByteToHexPutch(U08 Com, U08 ByteData)
{
 6fa:	ff 92       	push	r15
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17
 700:	df 93       	push	r29
 702:	cf 93       	push	r28
 704:	cd b7       	in	r28, 0x3d	; 61
 706:	de b7       	in	r29, 0x3e	; 62
 708:	61 97       	sbiw	r28, 0x11	; 17
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
 714:	f8 2e       	mov	r15, r24
 716:	96 2f       	mov	r25, r22
	U08 HexData;
	U08 Hex_Table[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 718:	de 01       	movw	r26, r28
 71a:	11 96       	adiw	r26, 0x01	; 1
 71c:	ed e2       	ldi	r30, 0x2D	; 45
 71e:	f1 e0       	ldi	r31, 0x01	; 1
 720:	80 e1       	ldi	r24, 0x10	; 16
 722:	01 90       	ld	r0, Z+
 724:	0d 92       	st	X+, r0
 726:	81 50       	subi	r24, 0x01	; 1
 728:	e1 f7       	brne	.-8      	; 0x722 <Uart_ByteToHexPutch+0x28>
	
	HexData = Hex_Table[ByteData>>4];
	Uart_Putch(Com, HexData);            // 상위 비트를 출력
 72a:	89 2f       	mov	r24, r25
 72c:	82 95       	swap	r24
 72e:	8f 70       	andi	r24, 0x0F	; 15
 730:	8e 01       	movw	r16, r28
 732:	0f 5f       	subi	r16, 0xFF	; 255
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	f8 01       	movw	r30, r16
 738:	e8 0f       	add	r30, r24
 73a:	f1 1d       	adc	r31, r1
 73c:	8f 2d       	mov	r24, r15
 73e:	60 81       	ld	r22, Z
 740:	99 8b       	std	Y+17, r25	; 0x11
 742:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
	
	HexData = Hex_Table[ByteData&0x0F];
	Uart_Putch(Com, HexData);            // 하위 비트를 출력
 746:	99 89       	ldd	r25, Y+17	; 0x11
 748:	9f 70       	andi	r25, 0x0F	; 15
 74a:	09 0f       	add	r16, r25
 74c:	11 1d       	adc	r17, r1
 74e:	8f 2d       	mov	r24, r15
 750:	f8 01       	movw	r30, r16
 752:	60 81       	ld	r22, Z
 754:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
}
 758:	61 96       	adiw	r28, 0x11	; 17
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	f8 94       	cli
 75e:	de bf       	out	0x3e, r29	; 62
 760:	0f be       	out	0x3f, r0	; 63
 762:	cd bf       	out	0x3d, r28	; 61
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	ff 90       	pop	r15
 76e:	08 95       	ret

00000770 <Uart_WordToHexPutch>:
//         			===== Uart_WordToHexPutch =====
//         			:16비트 데이타를 헥사로 출력한다.
//	*** 수정 : 3자리로 출력
//----------------------------------------------------------------------------
void Uart_WordToHexPutch(U08 Com, U16 WordData)
{
 770:	df 92       	push	r13
 772:	ef 92       	push	r14
 774:	ff 92       	push	r15
 776:	0f 93       	push	r16
 778:	1f 93       	push	r17
 77a:	df 93       	push	r29
 77c:	cf 93       	push	r28
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
 782:	60 97       	sbiw	r28, 0x10	; 16
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	de bf       	out	0x3e, r29	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	cd bf       	out	0x3d, r28	; 61
 78e:	d8 2e       	mov	r13, r24
 790:	7b 01       	movw	r14, r22
	U08 HexData;
	U08 Hex_Table[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 792:	de 01       	movw	r26, r28
 794:	11 96       	adiw	r26, 0x01	; 1
 796:	ed e1       	ldi	r30, 0x1D	; 29
 798:	f1 e0       	ldi	r31, 0x01	; 1
 79a:	80 e1       	ldi	r24, 0x10	; 16
 79c:	01 90       	ld	r0, Z+
 79e:	0d 92       	st	X+, r0
 7a0:	81 50       	subi	r24, 0x01	; 1
 7a2:	e1 f7       	brne	.-8      	; 0x79c <Uart_WordToHexPutch+0x2c>
	

	HexData = Hex_Table[(WordData>>8) & 0x000F];
	Uart_Putch(Com, HexData);            // 상위 비트를 출력
 7a4:	ef 2d       	mov	r30, r15
 7a6:	ff 27       	eor	r31, r31
 7a8:	ef 70       	andi	r30, 0x0F	; 15
 7aa:	f0 70       	andi	r31, 0x00	; 0
 7ac:	8e 01       	movw	r16, r28
 7ae:	0f 5f       	subi	r16, 0xFF	; 255
 7b0:	1f 4f       	sbci	r17, 0xFF	; 255
 7b2:	e0 0f       	add	r30, r16
 7b4:	f1 1f       	adc	r31, r17
 7b6:	8d 2d       	mov	r24, r13
 7b8:	60 81       	ld	r22, Z
 7ba:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>

	HexData = Hex_Table[(WordData>>4) & 0x000F];
	Uart_Putch(Com, HexData);            // 상위 비트를 출력
 7be:	f7 01       	movw	r30, r14
 7c0:	94 e0       	ldi	r25, 0x04	; 4
 7c2:	f6 95       	lsr	r31
 7c4:	e7 95       	ror	r30
 7c6:	9a 95       	dec	r25
 7c8:	e1 f7       	brne	.-8      	; 0x7c2 <Uart_WordToHexPutch+0x52>
 7ca:	ef 70       	andi	r30, 0x0F	; 15
 7cc:	f0 70       	andi	r31, 0x00	; 0
 7ce:	e0 0f       	add	r30, r16
 7d0:	f1 1f       	adc	r31, r17
 7d2:	8d 2d       	mov	r24, r13
 7d4:	60 81       	ld	r22, Z
 7d6:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>

    HexData = Hex_Table[WordData & 0x000F];
	Uart_Putch(Com, HexData);            // 하위 비트를 출력
 7da:	8f e0       	ldi	r24, 0x0F	; 15
 7dc:	e8 22       	and	r14, r24
 7de:	ff 24       	eor	r15, r15
 7e0:	0e 0d       	add	r16, r14
 7e2:	1f 1d       	adc	r17, r15
 7e4:	8d 2d       	mov	r24, r13
 7e6:	f8 01       	movw	r30, r16
 7e8:	60 81       	ld	r22, Z
 7ea:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
}
 7ee:	60 96       	adiw	r28, 0x10	; 16
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	df 90       	pop	r13
 808:	08 95       	ret

0000080a <Checksum>:
			break;
	}
}

U16 Checksum(PARTNER_PACKET *packet, UART_CONTEXT *context)
{
 80a:	fc 01       	movw	r30, r24
 80c:	db 01       	movw	r26, r22
	U16 i;

	for(i=0 ; i < 3 ; i++)
	{
		packet->checksum ^= context->rPacketData[i+2];
 80e:	96 a9       	ldd	r25, Z+54	; 0x36
 810:	16 96       	adiw	r26, 0x06	; 6
 812:	8c 91       	ld	r24, X
 814:	16 97       	sbiw	r26, 0x06	; 6
 816:	98 27       	eor	r25, r24
 818:	96 ab       	std	Z+54, r25	; 0x36
 81a:	17 96       	adiw	r26, 0x07	; 7
 81c:	8c 91       	ld	r24, X
 81e:	17 97       	sbiw	r26, 0x07	; 7
 820:	89 27       	eor	r24, r25
 822:	86 ab       	std	Z+54, r24	; 0x36
 824:	18 96       	adiw	r26, 0x08	; 8
 826:	9c 91       	ld	r25, X
 828:	18 97       	sbiw	r26, 0x08	; 8
 82a:	98 27       	eor	r25, r24
 82c:	96 ab       	std	Z+54, r25	; 0x36
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 82e:	e0 e2       	ldi	r30, 0x20	; 32
 830:	fe e4       	ldi	r31, 0x4E	; 78
 832:	31 97       	sbiw	r30, 0x01	; 1
 834:	f1 f7       	brne	.-4      	; 0x832 <Checksum+0x28>
 836:	20 e0       	ldi	r18, 0x00	; 0
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	19 96       	adiw	r26, 0x09	; 9
 83c:	8c 91       	ld	r24, X
 83e:	98 17       	cp	r25, r24
 840:	11 f4       	brne	.+4      	; 0x846 <Checksum+0x3c>
 842:	21 e0       	ldi	r18, 0x01	; 1
 844:	30 e0       	ldi	r19, 0x00	; 0

	_delay_ms(5);	// delay. NECESSARY!!!

	if(packet->checksum ==  context->rPacketData[5])		return 1;
	else													return 0;
}
 846:	c9 01       	movw	r24, r18
 848:	08 95       	ret

0000084a <proc_packet_error>:
			//Uart_Print(1, "PACKET_END_ERR\n");
			break;			
		default:
			break;
	}
}
 84a:	08 95       	ret

0000084c <SendRequestPacket>:

void SendRequestPacket(U08 IND, U08 DATA)
{
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	18 2f       	mov	r17, r24
 852:	06 2f       	mov	r16, r22
	TXParameter[2] = DATA;
	TXParameter[3] = PACKET_END;

	for(cnt=0; cnt<4; cnt++)	
	{
		Uart_Putch(0, TXParameter[cnt]);
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	6f ef       	ldi	r22, 0xFF	; 255
 858:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	61 2f       	mov	r22, r17
 860:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	60 2f       	mov	r22, r16
 868:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	6e ee       	ldi	r22, 0xEE	; 238
 870:	0e 94 df 01 	call	0x3be	; 0x3be <Uart_Putch>
		//_delay_us(100);
	}
}
 874:	1f 91       	pop	r17
 876:	0f 91       	pop	r16
 878:	08 95       	ret

0000087a <proc_packet_command>:
	}
}


void proc_packet_command( PARTNER_PACKET *packet )
{
 87a:	1f 93       	push	r17
 87c:	dc 01       	movw	r26, r24

	switch( packet->index )
 87e:	1c 91       	ld	r17, X
 880:	14 30       	cpi	r17, 0x04	; 4
 882:	09 f4       	brne	.+2      	; 0x886 <proc_packet_command+0xc>
 884:	5f c0       	rjmp	.+190    	; 0x944 <proc_packet_command+0xca>
 886:	15 30       	cpi	r17, 0x05	; 5
 888:	40 f4       	brcc	.+16     	; 0x89a <proc_packet_command+0x20>
 88a:	12 30       	cpi	r17, 0x02	; 2
 88c:	f1 f0       	breq	.+60     	; 0x8ca <proc_packet_command+0x50>
 88e:	13 30       	cpi	r17, 0x03	; 3
 890:	b0 f5       	brcc	.+108    	; 0x8fe <proc_packet_command+0x84>
 892:	11 30       	cpi	r17, 0x01	; 1
 894:	09 f0       	breq	.+2      	; 0x898 <proc_packet_command+0x1e>
 896:	d6 c0       	rjmp	.+428    	; 0xa44 <proc_packet_command+0x1ca>
 898:	0d c0       	rjmp	.+26     	; 0x8b4 <proc_packet_command+0x3a>
 89a:	16 30       	cpi	r17, 0x06	; 6
 89c:	09 f4       	brne	.+2      	; 0x8a0 <proc_packet_command+0x26>
 89e:	9b c0       	rjmp	.+310    	; 0x9d6 <proc_packet_command+0x15c>
 8a0:	16 30       	cpi	r17, 0x06	; 6
 8a2:	08 f4       	brcc	.+2      	; 0x8a6 <proc_packet_command+0x2c>
 8a4:	76 c0       	rjmp	.+236    	; 0x992 <proc_packet_command+0x118>
 8a6:	17 30       	cpi	r17, 0x07	; 7
 8a8:	09 f4       	brne	.+2      	; 0x8ac <proc_packet_command+0x32>
 8aa:	b6 c0       	rjmp	.+364    	; 0xa18 <proc_packet_command+0x19e>
 8ac:	10 3a       	cpi	r17, 0xA0	; 160
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <proc_packet_command+0x38>
 8b0:	c9 c0       	rjmp	.+402    	; 0xa44 <proc_packet_command+0x1ca>
 8b2:	b9 c0       	rjmp	.+370    	; 0xa26 <proc_packet_command+0x1ac>
	{
		case IND_RX_TXSTART:
			//Moving_StartPoint();
			SendRequestPacket(IND_TX_STATE, DATA_TX_STANDBY);
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	60 eb       	ldi	r22, 0xB0	; 176
 8b8:	0e 94 26 04 	call	0x84c	; 0x84c <SendRequestPacket>
			Mode = MODE_STANDBY;
 8bc:	10 93 3e 01 	sts	0x013E, r17
			TXflag = 1;
 8c0:	10 93 3f 01 	sts	0x013F, r17
			nPAGE = 0;
 8c4:	10 92 43 01 	sts	0x0143, r1
 8c8:	bd c0       	rjmp	.+378    	; 0xa44 <proc_packet_command+0x1ca>
			break;
			
		case IND_RX_PAGESTART:
			if(TXflag == 1)
 8ca:	20 91 3f 01 	lds	r18, 0x013F
 8ce:	21 30       	cpi	r18, 0x01	; 1
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <proc_packet_command+0x5a>
 8d2:	b8 c0       	rjmp	.+368    	; 0xa44 <proc_packet_command+0x1ca>
			{
				PAGEcnt = packet->ycod;
 8d4:	12 96       	adiw	r26, 0x02	; 2
 8d6:	8c 91       	ld	r24, X
 8d8:	12 97       	sbiw	r26, 0x02	; 2
 8da:	80 93 b5 02 	sts	0x02B5, r24
				
				if(PAGEcnt == nPAGE)
 8de:	90 91 b5 02 	lds	r25, 0x02B5
 8e2:	80 91 43 01 	lds	r24, 0x0143
 8e6:	98 17       	cp	r25, r24
 8e8:	09 f0       	breq	.+2      	; 0x8ec <proc_packet_command+0x72>
 8ea:	92 c0       	rjmp	.+292    	; 0xa10 <proc_packet_command+0x196>
				{
					RXLENGTH = packet->xcod;
 8ec:	11 96       	adiw	r26, 0x01	; 1
 8ee:	8c 91       	ld	r24, X
 8f0:	80 93 40 01 	sts	0x0140, r24
					RXstate = RXBUFFERING;
 8f4:	20 93 41 01 	sts	0x0141, r18
					RXcnt = 0;
 8f8:	10 92 42 01 	sts	0x0142, r1
 8fc:	a3 c0       	rjmp	.+326    	; 0xa44 <proc_packet_command+0x1ca>
			}
			
			break;

		case IND_RX_ZSTART:
			if((TXflag==1) && (RXstate==RXBUFFERING))
 8fe:	80 91 3f 01 	lds	r24, 0x013F
 902:	81 30       	cpi	r24, 0x01	; 1
 904:	09 f0       	breq	.+2      	; 0x908 <proc_packet_command+0x8e>
 906:	9e c0       	rjmp	.+316    	; 0xa44 <proc_packet_command+0x1ca>
 908:	80 91 41 01 	lds	r24, 0x0141
 90c:	81 30       	cpi	r24, 0x01	; 1
 90e:	09 f0       	breq	.+2      	; 0x912 <proc_packet_command+0x98>
 910:	99 c0       	rjmp	.+306    	; 0xa44 <proc_packet_command+0x1ca>
			{
				CoordinateX[RXcnt] = packet->xcod;
 912:	e0 91 42 01 	lds	r30, 0x0142
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	11 96       	adiw	r26, 0x01	; 1
 91a:	8c 91       	ld	r24, X
 91c:	11 97       	sbiw	r26, 0x01	; 1
 91e:	ea 54       	subi	r30, 0x4A	; 74
 920:	fd 4f       	sbci	r31, 0xFD	; 253
 922:	80 83       	st	Z, r24
				CoordinateY[RXcnt] = packet->ycod;
 924:	e0 91 42 01 	lds	r30, 0x0142
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	12 96       	adiw	r26, 0x02	; 2
 92c:	8c 91       	ld	r24, X
 92e:	ea 54       	subi	r30, 0x4A	; 74
 930:	fc 4f       	sbci	r31, 0xFC	; 252
 932:	80 83       	st	Z, r24
				CoordinateZ[RXcnt] = 2;
 934:	e0 91 42 01 	lds	r30, 0x0142
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	eb 54       	subi	r30, 0x4B	; 75
 93c:	fe 4f       	sbci	r31, 0xFE	; 254
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	80 83       	st	Z, r24
 942:	21 c0       	rjmp	.+66     	; 0x986 <proc_packet_command+0x10c>
				RXcnt++;
			}
			break;
			
		case IND_RX_ZING:
			if((TXflag==1) && (RXstate==RXBUFFERING))
 944:	80 91 3f 01 	lds	r24, 0x013F
 948:	81 30       	cpi	r24, 0x01	; 1
 94a:	09 f0       	breq	.+2      	; 0x94e <proc_packet_command+0xd4>
 94c:	7b c0       	rjmp	.+246    	; 0xa44 <proc_packet_command+0x1ca>
 94e:	90 91 41 01 	lds	r25, 0x0141
 952:	91 30       	cpi	r25, 0x01	; 1
 954:	09 f0       	breq	.+2      	; 0x958 <proc_packet_command+0xde>
 956:	76 c0       	rjmp	.+236    	; 0xa44 <proc_packet_command+0x1ca>
			{
				CoordinateX[RXcnt] = packet->xcod;
 958:	e0 91 42 01 	lds	r30, 0x0142
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	11 96       	adiw	r26, 0x01	; 1
 960:	8c 91       	ld	r24, X
 962:	11 97       	sbiw	r26, 0x01	; 1
 964:	ea 54       	subi	r30, 0x4A	; 74
 966:	fd 4f       	sbci	r31, 0xFD	; 253
 968:	80 83       	st	Z, r24
				CoordinateY[RXcnt] = packet->ycod;
 96a:	e0 91 42 01 	lds	r30, 0x0142
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	12 96       	adiw	r26, 0x02	; 2
 972:	8c 91       	ld	r24, X
 974:	ea 54       	subi	r30, 0x4A	; 74
 976:	fc 4f       	sbci	r31, 0xFC	; 252
 978:	80 83       	st	Z, r24
				CoordinateZ[RXcnt] = 1;
 97a:	e0 91 42 01 	lds	r30, 0x0142
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	eb 54       	subi	r30, 0x4B	; 75
 982:	fe 4f       	sbci	r31, 0xFE	; 254
 984:	90 83       	st	Z, r25
				RXcnt++;
 986:	80 91 42 01 	lds	r24, 0x0142
 98a:	8f 5f       	subi	r24, 0xFF	; 255
 98c:	80 93 42 01 	sts	0x0142, r24
 990:	59 c0       	rjmp	.+178    	; 0xa44 <proc_packet_command+0x1ca>
			}
			break;

		case IND_RX_ZEND:
			if((TXflag==1) && (RXstate==RXBUFFERING))
 992:	80 91 3f 01 	lds	r24, 0x013F
 996:	81 30       	cpi	r24, 0x01	; 1
 998:	09 f0       	breq	.+2      	; 0x99c <proc_packet_command+0x122>
 99a:	54 c0       	rjmp	.+168    	; 0xa44 <proc_packet_command+0x1ca>
 99c:	80 91 41 01 	lds	r24, 0x0141
 9a0:	81 30       	cpi	r24, 0x01	; 1
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <proc_packet_command+0x12c>
 9a4:	4f c0       	rjmp	.+158    	; 0xa44 <proc_packet_command+0x1ca>
			{
				CoordinateX[RXcnt] = packet->xcod;
 9a6:	e0 91 42 01 	lds	r30, 0x0142
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	11 96       	adiw	r26, 0x01	; 1
 9ae:	8c 91       	ld	r24, X
 9b0:	11 97       	sbiw	r26, 0x01	; 1
 9b2:	ea 54       	subi	r30, 0x4A	; 74
 9b4:	fd 4f       	sbci	r31, 0xFD	; 253
 9b6:	80 83       	st	Z, r24
				CoordinateY[RXcnt] = packet->ycod;
 9b8:	e0 91 42 01 	lds	r30, 0x0142
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	12 96       	adiw	r26, 0x02	; 2
 9c0:	8c 91       	ld	r24, X
 9c2:	ea 54       	subi	r30, 0x4A	; 74
 9c4:	fc 4f       	sbci	r31, 0xFC	; 252
 9c6:	80 83       	st	Z, r24
				CoordinateZ[RXcnt] = 0;
 9c8:	e0 91 42 01 	lds	r30, 0x0142
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	eb 54       	subi	r30, 0x4B	; 75
 9d0:	fe 4f       	sbci	r31, 0xFE	; 254
 9d2:	10 82       	st	Z, r1
 9d4:	d8 cf       	rjmp	.-80     	; 0x986 <proc_packet_command+0x10c>
				RXcnt++;
			}
			break;

		case IND_RX_PAGEEND:
			if((TXflag==1) && (RXstate==RXBUFFERING))
 9d6:	80 91 3f 01 	lds	r24, 0x013F
 9da:	81 30       	cpi	r24, 0x01	; 1
 9dc:	99 f5       	brne	.+102    	; 0xa44 <proc_packet_command+0x1ca>
 9de:	20 91 41 01 	lds	r18, 0x0141
 9e2:	21 30       	cpi	r18, 0x01	; 1
 9e4:	79 f5       	brne	.+94     	; 0xa44 <proc_packet_command+0x1ca>
			{
				if(RXcnt == RXLENGTH)
 9e6:	90 91 42 01 	lds	r25, 0x0142
 9ea:	80 91 40 01 	lds	r24, 0x0140
 9ee:	98 17       	cp	r25, r24
 9f0:	59 f4       	brne	.+22     	; 0xa08 <proc_packet_command+0x18e>
				{
					nPAGE++;
 9f2:	80 91 43 01 	lds	r24, 0x0143
 9f6:	8f 5f       	subi	r24, 0xFF	; 255
 9f8:	80 93 43 01 	sts	0x0143, r24
					Mode = MODE_RUN;
 9fc:	82 e0       	ldi	r24, 0x02	; 2
 9fe:	80 93 3e 01 	sts	0x013E, r24
					RXstate = RXEND;
 a02:	80 93 41 01 	sts	0x0141, r24
 a06:	1e c0       	rjmp	.+60     	; 0xa44 <proc_packet_command+0x1ca>
				}
				else	
				{
					Mode = MODE_STANDBY;
 a08:	20 93 3e 01 	sts	0x013E, r18
					RXstate = RXREADY;
 a0c:	10 92 41 01 	sts	0x0141, r1
					SendRequestPacket(IND_TX_PAGEERR, nPAGE);
 a10:	60 91 43 01 	lds	r22, 0x0143
 a14:	82 e0       	ldi	r24, 0x02	; 2
 a16:	14 c0       	rjmp	.+40     	; 0xa40 <proc_packet_command+0x1c6>
				}
			}
			break;

		case IND_RX_TXEND:
			TXflag = 0;
 a18:	10 92 3f 01 	sts	0x013F, r1
			Position_Homing();
 a1c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <Position_Homing>
			
			Mode = MODE_READY;
 a20:	10 92 3e 01 	sts	0x013E, r1
 a24:	0f c0       	rjmp	.+30     	; 0xa44 <proc_packet_command+0x1ca>
			//SendRequestPacket(IND_TX_STATE, DATA_TX_READY);
			break;

		case IND_RX_ASKREADY:
			if(Mode == MODE_READY)			SendRequestPacket(IND_TX_STATE, DATA_TX_READY);
 a26:	80 91 3e 01 	lds	r24, 0x013E
 a2a:	88 23       	and	r24, r24
 a2c:	19 f4       	brne	.+6      	; 0xa34 <proc_packet_command+0x1ba>
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	60 ea       	ldi	r22, 0xA0	; 160
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <proc_packet_command+0x1c6>
			else if(Mode == MODE_STANDBY) 	SendRequestPacket(IND_TX_STATE, DATA_TX_STANDBY);
 a34:	81 30       	cpi	r24, 0x01	; 1
 a36:	11 f4       	brne	.+4      	; 0xa3c <proc_packet_command+0x1c2>
 a38:	60 eb       	ldi	r22, 0xB0	; 176
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <proc_packet_command+0x1c6>
			else							SendRequestPacket(IND_TX_STATE, DATA_TX_RUN);
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	60 ec       	ldi	r22, 0xC0	; 192
 a40:	0e 94 26 04 	call	0x84c	; 0x84c <SendRequestPacket>
			break;

		default :
			break;
	}
}
 a44:	1f 91       	pop	r17
 a46:	08 95       	ret

00000a48 <Init_packet>:
extern MODE_STATE Mode;


void Init_packet( PARTNER_PACKET *packet, UART_CONTEXT *context )
{
	memset(packet, 0, sizeof(PARTNER_PACKET));
 a48:	fc 01       	movw	r30, r24
 a4a:	8a e3       	ldi	r24, 0x3A	; 58
 a4c:	df 01       	movw	r26, r30
 a4e:	1d 92       	st	X+, r1
 a50:	8a 95       	dec	r24
 a52:	e9 f7       	brne	.-6      	; 0xa4e <Init_packet+0x6>
	memset(context, 0, sizeof(UART_CONTEXT));
 a54:	84 e3       	ldi	r24, 0x34	; 52
 a56:	db 01       	movw	r26, r22
 a58:	1d 92       	st	X+, r1
 a5a:	8a 95       	dec	r24
 a5c:	e9 f7       	brne	.-6      	; 0xa58 <Init_packet+0x10>
}
 a5e:	08 95       	ret

00000a60 <PacketManager>:


void PacketManager( PARTNER_PACKET *packet, UART_CONTEXT *context )
{
 a60:	0f 93       	push	r16
 a62:	1f 93       	push	r17
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	ec 01       	movw	r28, r24
 a6a:	8b 01       	movw	r16, r22
	static PACKET_STATE current_pk_state = PK_ST_INIT;
	static PACKET_STATE next_pk_state = PK_ST_INIT;

	current_pk_state = next_pk_state;
 a6c:	20 91 44 01 	lds	r18, 0x0144
 a70:	20 93 45 01 	sts	0x0145, r18

	switch( current_pk_state )
 a74:	23 30       	cpi	r18, 0x03	; 3
 a76:	29 f1       	breq	.+74     	; 0xac2 <PacketManager+0x62>
 a78:	24 30       	cpi	r18, 0x04	; 4
 a7a:	28 f4       	brcc	.+10     	; 0xa86 <PacketManager+0x26>
 a7c:	21 30       	cpi	r18, 0x01	; 1
 a7e:	99 f0       	breq	.+38     	; 0xaa6 <PacketManager+0x46>
 a80:	22 30       	cpi	r18, 0x02	; 2
 a82:	d0 f4       	brcc	.+52     	; 0xab8 <PacketManager+0x58>
 a84:	07 c0       	rjmp	.+14     	; 0xa94 <PacketManager+0x34>
 a86:	25 30       	cpi	r18, 0x05	; 5
 a88:	31 f1       	breq	.+76     	; 0xad6 <PacketManager+0x76>
 a8a:	25 30       	cpi	r18, 0x05	; 5
 a8c:	f8 f0       	brcs	.+62     	; 0xacc <PacketManager+0x6c>
 a8e:	26 30       	cpi	r18, 0x06	; 6
 a90:	b9 f5       	brne	.+110    	; 0xb00 <PacketManager+0xa0>
 a92:	25 c0       	rjmp	.+74     	; 0xade <PacketManager+0x7e>
	{
		case PK_ST_INIT:
			if( context->b_start )
 a94:	fb 01       	movw	r30, r22
 a96:	82 81       	ldd	r24, Z+2	; 0x02
 a98:	93 81       	ldd	r25, Z+3	; 0x03
 a9a:	89 2b       	or	r24, r25
 a9c:	89 f1       	breq	.+98     	; 0xb00 <PacketManager+0xa0>
			{
				packet->timeout_cnt = 0;
 a9e:	19 ae       	std	Y+57, r1	; 0x39
 aa0:	18 ae       	std	Y+56, r1	; 0x38

				next_pk_state = PK_ST_LENGTH;
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	19 c0       	rjmp	.+50     	; 0xad8 <PacketManager+0x78>
			}
			break;

		case PK_ST_LENGTH:
			packet->data_len = context->rPacketData[1];
 aa6:	fb 01       	movw	r30, r22
 aa8:	85 81       	ldd	r24, Z+5	; 0x05
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	9d 83       	std	Y+5, r25	; 0x05
 aae:	8c 83       	std	Y+4, r24	; 0x04

			if( packet->data_len == PACKET_LENGTH )		
 ab0:	03 97       	sbiw	r24, 0x03	; 3
 ab2:	f9 f4       	brne	.+62     	; 0xaf2 <PacketManager+0x92>
			{
				next_pk_state = PK_ST_INDEX;
 ab4:	82 e0       	ldi	r24, 0x02	; 2
 ab6:	10 c0       	rjmp	.+32     	; 0xad8 <PacketManager+0x78>
				Init_packet(packet, context);
			}
			break;
			
		case PK_ST_INDEX:
			packet->index = context->rPacketData[2];
 ab8:	fb 01       	movw	r30, r22
 aba:	86 81       	ldd	r24, Z+6	; 0x06
 abc:	88 83       	st	Y, r24

			next_pk_state =  PK_ST_XCOD;
 abe:	83 e0       	ldi	r24, 0x03	; 3
 ac0:	0b c0       	rjmp	.+22     	; 0xad8 <PacketManager+0x78>
			break;

		case PK_ST_XCOD:
			packet->xcod = context->rPacketData[3];
 ac2:	fb 01       	movw	r30, r22
 ac4:	87 81       	ldd	r24, Z+7	; 0x07
 ac6:	89 83       	std	Y+1, r24	; 0x01

			next_pk_state =  PK_ST_YCOD;
 ac8:	84 e0       	ldi	r24, 0x04	; 4
 aca:	06 c0       	rjmp	.+12     	; 0xad8 <PacketManager+0x78>
			break;
			
		case PK_ST_YCOD:
			packet->ycod = context->rPacketData[4];
 acc:	fb 01       	movw	r30, r22
 ace:	80 85       	ldd	r24, Z+8	; 0x08
 ad0:	8a 83       	std	Y+2, r24	; 0x02

			next_pk_state = PK_ST_CHKSUM;
 ad2:	85 e0       	ldi	r24, 0x05	; 5
 ad4:	01 c0       	rjmp	.+2      	; 0xad8 <PacketManager+0x78>
			break;

		case PK_ST_CHKSUM:
			if(1)//( Checksum( packet, context ))
			{
				next_pk_state = PK_ST_END;
 ad6:	86 e0       	ldi	r24, 0x06	; 6
 ad8:	80 93 44 01 	sts	0x0144, r24
 adc:	11 c0       	rjmp	.+34     	; 0xb00 <PacketManager+0xa0>
				Init_packet(packet, context);
			}
			break;

		case PK_ST_END:
			packet->end = context->rPacketData[6];
 ade:	fb 01       	movw	r30, r22
 ae0:	82 85       	ldd	r24, Z+10	; 0x0a
 ae2:	8b 83       	std	Y+3, r24	; 0x03
			
			if( packet->end == PACKET_END )		
 ae4:	8e 3e       	cpi	r24, 0xEE	; 238
 ae6:	29 f4       	brne	.+10     	; 0xaf2 <PacketManager+0x92>
			{
				packet->error_code = PACKET_NO_ERR;
 ae8:	1f aa       	std	Y+55, r1	; 0x37
				
				proc_packet_error( packet->error_code );		// packet end error
				proc_packet_command(packet);
 aea:	ce 01       	movw	r24, r28
 aec:	0e 94 3d 04 	call	0x87a	; 0x87a <proc_packet_command>
 af0:	01 c0       	rjmp	.+2      	; 0xaf4 <PacketManager+0x94>
			}
			else
			{			
				packet->error_code = PACKET_END_ERR;
 af2:	2f ab       	std	Y+55, r18	; 0x37
				proc_packet_error( packet->error_code );		// packet end error
			}
			
			next_pk_state = PK_ST_INIT;
 af4:	10 92 44 01 	sts	0x0144, r1
			Init_packet(packet, context);
 af8:	ce 01       	movw	r24, r28
 afa:	b8 01       	movw	r22, r16
 afc:	0e 94 24 05 	call	0xa48	; 0xa48 <Init_packet>
			break;

		default:
			break;
	}
}
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	08 95       	ret

00000b0a <X_StepMotor_Move_1step>:
volatile U08 XCD, YCD;


void X_StepMotor_Move_1step( U08 Direction )
{
	Direction == FORWARD ? (PORTG &= ~( 1 << 1 )) : (PORTG |= 1 << 1);
 b0a:	88 23       	and	r24, r24
 b0c:	21 f4       	brne	.+8      	; 0xb16 <X_StepMotor_Move_1step+0xc>
 b0e:	80 91 65 00 	lds	r24, 0x0065
 b12:	8d 7f       	andi	r24, 0xFD	; 253
 b14:	03 c0       	rjmp	.+6      	; 0xb1c <X_StepMotor_Move_1step+0x12>
 b16:	80 91 65 00 	lds	r24, 0x0065
 b1a:	82 60       	ori	r24, 0x02	; 2
 b1c:	80 93 65 00 	sts	0x0065, r24
 b20:	80 91 65 00 	lds	r24, 0x0065

	PORTG ^= 1 << 0;
 b24:	80 91 65 00 	lds	r24, 0x0065
 b28:	91 e0       	ldi	r25, 0x01	; 1
 b2a:	89 27       	eor	r24, r25
 b2c:	80 93 65 00 	sts	0x0065, r24
}
 b30:	08 95       	ret

00000b32 <Y_StepMotor_Move_1step>:

void Y_StepMotor_Move_1step( U08 Direction )
{
	Direction == FORWARD ? (PORTG &= ~( 1 << 4 )) : (PORTG |= 1 << 4);
 b32:	88 23       	and	r24, r24
 b34:	21 f4       	brne	.+8      	; 0xb3e <Y_StepMotor_Move_1step+0xc>
 b36:	80 91 65 00 	lds	r24, 0x0065
 b3a:	8f 7e       	andi	r24, 0xEF	; 239
 b3c:	03 c0       	rjmp	.+6      	; 0xb44 <Y_StepMotor_Move_1step+0x12>
 b3e:	80 91 65 00 	lds	r24, 0x0065
 b42:	80 61       	ori	r24, 0x10	; 16
 b44:	80 93 65 00 	sts	0x0065, r24
 b48:	80 91 65 00 	lds	r24, 0x0065

	PORTG ^= 1 << 3;
 b4c:	80 91 65 00 	lds	r24, 0x0065
 b50:	98 e0       	ldi	r25, 0x08	; 8
 b52:	89 27       	eor	r24, r25
 b54:	80 93 65 00 	sts	0x0065, r24
}
 b58:	08 95       	ret

00000b5a <Position_Homing>:
	//while(/*!Yaxis Photo INT check*/0)
	//{
	//	Y_StepMotor_Move_1step(BACKWARD);
	//	_delay_ms(STPULSEWIDE);
	//}
}
 b5a:	08 95       	ret

00000b5c <Moving_StartPoint>:

void Moving_StartPoint(void)
{
 b5c:	0f 93       	push	r16
 b5e:	1f 93       	push	r17
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
 b64:	c0 e0       	ldi	r28, 0x00	; 0
 b66:	d0 e0       	ldi	r29, 0x00	; 0
 b68:	00 e4       	ldi	r16, 0x40	; 64
 b6a:	16 e0       	ldi	r17, 0x06	; 6
	U16 stCNT;
	for( stCNT=0; stCNT<13*STEP05MM*2; stCNT++ )
	{
		X_StepMotor_Move_1step(FORWARD);
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	0e 94 85 05 	call	0xb0a	; 0xb0a <X_StepMotor_Move_1step>
		Y_StepMotor_Move_1step(FORWARD);
 b72:	80 e0       	ldi	r24, 0x00	; 0
 b74:	0e 94 99 05 	call	0xb32	; 0xb32 <Y_StepMotor_Move_1step>
 b78:	c8 01       	movw	r24, r16
 b7a:	01 97       	sbiw	r24, 0x01	; 1
 b7c:	f1 f7       	brne	.-4      	; 0xb7a <Moving_StartPoint+0x1e>
}

void Moving_StartPoint(void)
{
	U16 stCNT;
	for( stCNT=0; stCNT<13*STEP05MM*2; stCNT++ )
 b7e:	21 96       	adiw	r28, 0x01	; 1
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	c0 38       	cpi	r28, 0x80	; 128
 b84:	d8 07       	cpc	r29, r24
 b86:	91 f7       	brne	.-28     	; 0xb6c <Moving_StartPoint+0x10>
	{
		X_StepMotor_Move_1step(FORWARD);
		Y_StepMotor_Move_1step(FORWARD);
		_delay_us(STPULSEWIDE);
	}
	nXCD = 0;
 b88:	10 92 b9 04 	sts	0x04B9, r1
	nYCD = 0;
 b8c:	10 92 b7 04 	sts	0x04B7, r1
}
 b90:	df 91       	pop	r29
 b92:	cf 91       	pop	r28
 b94:	1f 91       	pop	r17
 b96:	0f 91       	pop	r16
 b98:	08 95       	ret

00000b9a <Moving_XYCoordinate>:


void Moving_XYCoordinate(U08 XCd, U08 YCd)
{
 b9a:	cf 92       	push	r12
 b9c:	df 92       	push	r13
 b9e:	ef 92       	push	r14
 ba0:	ff 92       	push	r15
 ba2:	0f 93       	push	r16
 ba4:	1f 93       	push	r17
 ba6:	df 93       	push	r29
 ba8:	cf 93       	push	r28
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
 bae:	28 97       	sbiw	r28, 0x08	; 8
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	de bf       	out	0x3e, r29	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	cd bf       	out	0x3d, r28	; 61
	volatile U08 GoalPositonX, GoalPositonY;
	volatile U08 MoveSpaceX=0, MoveSpaceY=0;
 bba:	1b 82       	std	Y+3, r1	; 0x03
 bbc:	1c 82       	std	Y+4, r1	; 0x04
	volatile U08 MoveDirectionX=0, MoveDirectionY=0, HoldPositionX=0,HoldPositionY=0;
 bbe:	1d 82       	std	Y+5, r1	; 0x05
 bc0:	1e 82       	std	Y+6, r1	; 0x06
 bc2:	1f 82       	std	Y+7, r1	; 0x07
 bc4:	18 86       	std	Y+8, r1	; 0x08
	GoalPositonX = XCd;
 bc6:	89 83       	std	Y+1, r24	; 0x01
	GoalPositonY = YCd;
 bc8:	6a 83       	std	Y+2, r22	; 0x02

/*//-------------------------------------------------------------------*/

	if(GoalPositonX > nXCD)
 bca:	99 81       	ldd	r25, Y+1	; 0x01
 bcc:	80 91 b9 04 	lds	r24, 0x04B9
 bd0:	89 17       	cp	r24, r25
 bd2:	28 f4       	brcc	.+10     	; 0xbde <Moving_XYCoordinate+0x44>
	{
		MoveDirectionX = FORWARD;
 bd4:	1d 82       	std	Y+5, r1	; 0x05
		MoveSpaceX = GoalPositonX - nXCD;
 bd6:	89 81       	ldd	r24, Y+1	; 0x01
 bd8:	90 91 b9 04 	lds	r25, 0x04B9
 bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <Moving_XYCoordinate+0x58>
		nXCD = GoalPositonX;
	}
	else if(GoalPositonX < nXCD)
 bde:	99 81       	ldd	r25, Y+1	; 0x01
 be0:	80 91 b9 04 	lds	r24, 0x04B9
 be4:	98 17       	cp	r25, r24
 be6:	58 f4       	brcc	.+22     	; 0xbfe <Moving_XYCoordinate+0x64>
	{
		MoveDirectionX = BACKWARD;
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	8d 83       	std	Y+5, r24	; 0x05
		MoveSpaceX = nXCD - GoalPositonX;
 bec:	80 91 b9 04 	lds	r24, 0x04B9
 bf0:	99 81       	ldd	r25, Y+1	; 0x01
 bf2:	89 1b       	sub	r24, r25
 bf4:	8b 83       	std	Y+3, r24	; 0x03
		nXCD = GoalPositonX;
 bf6:	89 81       	ldd	r24, Y+1	; 0x01
 bf8:	80 93 b9 04 	sts	0x04B9, r24
 bfc:	02 c0       	rjmp	.+4      	; 0xc02 <Moving_XYCoordinate+0x68>
	}
	else
	{
		HoldPositionX = 1;
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	8f 83       	std	Y+7, r24	; 0x07
	}


	if(GoalPositonY > nYCD)
 c02:	9a 81       	ldd	r25, Y+2	; 0x02
 c04:	80 91 b7 04 	lds	r24, 0x04B7
 c08:	89 17       	cp	r24, r25
 c0a:	28 f4       	brcc	.+10     	; 0xc16 <Moving_XYCoordinate+0x7c>
	{
		MoveDirectionY = FORWARD;
 c0c:	1e 82       	std	Y+6, r1	; 0x06
		MoveSpaceY = GoalPositonY - nYCD;
 c0e:	8a 81       	ldd	r24, Y+2	; 0x02
 c10:	90 91 b7 04 	lds	r25, 0x04B7
 c14:	0a c0       	rjmp	.+20     	; 0xc2a <Moving_XYCoordinate+0x90>
		nYCD = GoalPositonY;
	}
	else if(GoalPositonY < nYCD)
 c16:	9a 81       	ldd	r25, Y+2	; 0x02
 c18:	80 91 b7 04 	lds	r24, 0x04B7
 c1c:	98 17       	cp	r25, r24
 c1e:	58 f4       	brcc	.+22     	; 0xc36 <Moving_XYCoordinate+0x9c>
	{
		MoveDirectionY = BACKWARD;
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	8e 83       	std	Y+6, r24	; 0x06
		MoveSpaceY = nYCD - GoalPositonY;
 c24:	80 91 b7 04 	lds	r24, 0x04B7
 c28:	9a 81       	ldd	r25, Y+2	; 0x02
 c2a:	89 1b       	sub	r24, r25
 c2c:	8c 83       	std	Y+4, r24	; 0x04
		nYCD = GoalPositonY;
 c2e:	8a 81       	ldd	r24, Y+2	; 0x02
 c30:	80 93 b7 04 	sts	0x04B7, r24
 c34:	02 c0       	rjmp	.+4      	; 0xc3a <Moving_XYCoordinate+0xa0>
	}
	else
	{
		HoldPositionY = 1;
 c36:	81 e0       	ldi	r24, 0x01	; 1
 c38:	88 87       	std	Y+8, r24	; 0x08
	}

/*//-------------------------------------------------------------------*/

	if(HoldPositionX == 0)
 c3a:	8f 81       	ldd	r24, Y+7	; 0x07
 c3c:	88 23       	and	r24, r24
 c3e:	09 f5       	brne	.+66     	; 0xc82 <Moving_XYCoordinate+0xe8>
 c40:	00 e0       	ldi	r16, 0x00	; 0
 c42:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(U16 stCNT=0; stCNT < MoveSpaceX*STEP05MM; stCNT++)
 c44:	30 e4       	ldi	r19, 0x40	; 64
 c46:	c3 2e       	mov	r12, r19
 c48:	31 e0       	ldi	r19, 0x01	; 1
 c4a:	d3 2e       	mov	r13, r19
 c4c:	20 e4       	ldi	r18, 0x40	; 64
 c4e:	e2 2e       	mov	r14, r18
 c50:	26 e0       	ldi	r18, 0x06	; 6
 c52:	f2 2e       	mov	r15, r18
 c54:	08 c0       	rjmp	.+16     	; 0xc66 <Moving_XYCoordinate+0xcc>
		{
			X_StepMotor_Move_1step(MoveDirectionX);
 c56:	8d 81       	ldd	r24, Y+5	; 0x05
 c58:	0e 94 85 05 	call	0xb0a	; 0xb0a <X_StepMotor_Move_1step>
 c5c:	c7 01       	movw	r24, r14
 c5e:	01 97       	sbiw	r24, 0x01	; 1
 c60:	f1 f7       	brne	.-4      	; 0xc5e <Moving_XYCoordinate+0xc4>

/*//-------------------------------------------------------------------*/

	if(HoldPositionX == 0)
	{
		for(U16 stCNT=0; stCNT < MoveSpaceX*STEP05MM; stCNT++)
 c62:	0f 5f       	subi	r16, 0xFF	; 255
 c64:	1f 4f       	sbci	r17, 0xFF	; 255
 c66:	8b 81       	ldd	r24, Y+3	; 0x03
 c68:	90 e0       	ldi	r25, 0x00	; 0
 c6a:	9c 01       	movw	r18, r24
 c6c:	2c 9d       	mul	r18, r12
 c6e:	c0 01       	movw	r24, r0
 c70:	2d 9d       	mul	r18, r13
 c72:	90 0d       	add	r25, r0
 c74:	3c 9d       	mul	r19, r12
 c76:	90 0d       	add	r25, r0
 c78:	11 24       	eor	r1, r1
 c7a:	08 17       	cp	r16, r24
 c7c:	19 07       	cpc	r17, r25
 c7e:	58 f3       	brcs	.-42     	; 0xc56 <Moving_XYCoordinate+0xbc>
 c80:	01 c0       	rjmp	.+2      	; 0xc84 <Moving_XYCoordinate+0xea>
		{
			X_StepMotor_Move_1step(MoveDirectionX);
			_delay_us(STPULSEWIDE);
		}
	}
	else { HoldPositionX = 0; }
 c82:	1f 82       	std	Y+7, r1	; 0x07

	if(HoldPositionY == 0)
 c84:	88 85       	ldd	r24, Y+8	; 0x08
 c86:	88 23       	and	r24, r24
 c88:	09 f5       	brne	.+66     	; 0xccc <Moving_XYCoordinate+0x132>
 c8a:	00 e0       	ldi	r16, 0x00	; 0
 c8c:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(U16 stCNT=0; stCNT < MoveSpaceY*STEP05MM; stCNT++)
 c8e:	90 e4       	ldi	r25, 0x40	; 64
 c90:	c9 2e       	mov	r12, r25
 c92:	91 e0       	ldi	r25, 0x01	; 1
 c94:	d9 2e       	mov	r13, r25
 c96:	80 e4       	ldi	r24, 0x40	; 64
 c98:	e8 2e       	mov	r14, r24
 c9a:	86 e0       	ldi	r24, 0x06	; 6
 c9c:	f8 2e       	mov	r15, r24
 c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <Moving_XYCoordinate+0x116>
		{
			Y_StepMotor_Move_1step(MoveDirectionY);
 ca0:	8e 81       	ldd	r24, Y+6	; 0x06
 ca2:	0e 94 99 05 	call	0xb32	; 0xb32 <Y_StepMotor_Move_1step>
 ca6:	c7 01       	movw	r24, r14
 ca8:	01 97       	sbiw	r24, 0x01	; 1
 caa:	f1 f7       	brne	.-4      	; 0xca8 <Moving_XYCoordinate+0x10e>
	}
	else { HoldPositionX = 0; }

	if(HoldPositionY == 0)
	{
		for(U16 stCNT=0; stCNT < MoveSpaceY*STEP05MM; stCNT++)
 cac:	0f 5f       	subi	r16, 0xFF	; 255
 cae:	1f 4f       	sbci	r17, 0xFF	; 255
 cb0:	8c 81       	ldd	r24, Y+4	; 0x04
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	9c 01       	movw	r18, r24
 cb6:	2c 9d       	mul	r18, r12
 cb8:	c0 01       	movw	r24, r0
 cba:	2d 9d       	mul	r18, r13
 cbc:	90 0d       	add	r25, r0
 cbe:	3c 9d       	mul	r19, r12
 cc0:	90 0d       	add	r25, r0
 cc2:	11 24       	eor	r1, r1
 cc4:	08 17       	cp	r16, r24
 cc6:	19 07       	cpc	r17, r25
 cc8:	58 f3       	brcs	.-42     	; 0xca0 <Moving_XYCoordinate+0x106>
 cca:	01 c0       	rjmp	.+2      	; 0xcce <Moving_XYCoordinate+0x134>
		{
			Y_StepMotor_Move_1step(MoveDirectionY);
			_delay_us(STPULSEWIDE);
		}
	}
	else { HoldPositionY = 0; }
 ccc:	18 86       	std	Y+8, r1	; 0x08

/*//-------------------------------------------------------------------*/		
}
 cce:	28 96       	adiw	r28, 0x08	; 8
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	f8 94       	cli
 cd4:	de bf       	out	0x3e, r29	; 62
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	cd bf       	out	0x3d, r28	; 61
 cda:	cf 91       	pop	r28
 cdc:	df 91       	pop	r29
 cde:	1f 91       	pop	r17
 ce0:	0f 91       	pop	r16
 ce2:	ff 90       	pop	r15
 ce4:	ef 90       	pop	r14
 ce6:	df 90       	pop	r13
 ce8:	cf 90       	pop	r12
 cea:	08 95       	ret

00000cec <exit>:
 cec:	f8 94       	cli
 cee:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_exit>

00000cf2 <__udivmodqi4>:
 cf2:	99 1b       	sub	r25, r25
 cf4:	79 e0       	ldi	r23, 0x09	; 9
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__udivmodqi4_ep>

00000cf8 <__udivmodqi4_loop>:
 cf8:	99 1f       	adc	r25, r25
 cfa:	96 17       	cp	r25, r22
 cfc:	08 f0       	brcs	.+2      	; 0xd00 <__udivmodqi4_ep>
 cfe:	96 1b       	sub	r25, r22

00000d00 <__udivmodqi4_ep>:
 d00:	88 1f       	adc	r24, r24
 d02:	7a 95       	dec	r23
 d04:	c9 f7       	brne	.-14     	; 0xcf8 <__udivmodqi4_loop>
 d06:	80 95       	com	r24
 d08:	08 95       	ret

00000d0a <__udivmodhi4>:
 d0a:	aa 1b       	sub	r26, r26
 d0c:	bb 1b       	sub	r27, r27
 d0e:	51 e1       	ldi	r21, 0x11	; 17
 d10:	07 c0       	rjmp	.+14     	; 0xd20 <__udivmodhi4_ep>

00000d12 <__udivmodhi4_loop>:
 d12:	aa 1f       	adc	r26, r26
 d14:	bb 1f       	adc	r27, r27
 d16:	a6 17       	cp	r26, r22
 d18:	b7 07       	cpc	r27, r23
 d1a:	10 f0       	brcs	.+4      	; 0xd20 <__udivmodhi4_ep>
 d1c:	a6 1b       	sub	r26, r22
 d1e:	b7 0b       	sbc	r27, r23

00000d20 <__udivmodhi4_ep>:
 d20:	88 1f       	adc	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	5a 95       	dec	r21
 d26:	a9 f7       	brne	.-22     	; 0xd12 <__udivmodhi4_loop>
 d28:	80 95       	com	r24
 d2a:	90 95       	com	r25
 d2c:	bc 01       	movw	r22, r24
 d2e:	cd 01       	movw	r24, r26
 d30:	08 95       	ret

00000d32 <__udivmodsi4>:
 d32:	a1 e2       	ldi	r26, 0x21	; 33
 d34:	1a 2e       	mov	r1, r26
 d36:	aa 1b       	sub	r26, r26
 d38:	bb 1b       	sub	r27, r27
 d3a:	fd 01       	movw	r30, r26
 d3c:	0d c0       	rjmp	.+26     	; 0xd58 <__udivmodsi4_ep>

00000d3e <__udivmodsi4_loop>:
 d3e:	aa 1f       	adc	r26, r26
 d40:	bb 1f       	adc	r27, r27
 d42:	ee 1f       	adc	r30, r30
 d44:	ff 1f       	adc	r31, r31
 d46:	a2 17       	cp	r26, r18
 d48:	b3 07       	cpc	r27, r19
 d4a:	e4 07       	cpc	r30, r20
 d4c:	f5 07       	cpc	r31, r21
 d4e:	20 f0       	brcs	.+8      	; 0xd58 <__udivmodsi4_ep>
 d50:	a2 1b       	sub	r26, r18
 d52:	b3 0b       	sbc	r27, r19
 d54:	e4 0b       	sbc	r30, r20
 d56:	f5 0b       	sbc	r31, r21

00000d58 <__udivmodsi4_ep>:
 d58:	66 1f       	adc	r22, r22
 d5a:	77 1f       	adc	r23, r23
 d5c:	88 1f       	adc	r24, r24
 d5e:	99 1f       	adc	r25, r25
 d60:	1a 94       	dec	r1
 d62:	69 f7       	brne	.-38     	; 0xd3e <__udivmodsi4_loop>
 d64:	60 95       	com	r22
 d66:	70 95       	com	r23
 d68:	80 95       	com	r24
 d6a:	90 95       	com	r25
 d6c:	9b 01       	movw	r18, r22
 d6e:	ac 01       	movw	r20, r24
 d70:	bd 01       	movw	r22, r26
 d72:	cf 01       	movw	r24, r30
 d74:	08 95       	ret

00000d76 <_exit>:
 d76:	f8 94       	cli

00000d78 <__stop_program>:
 d78:	ff cf       	rjmp	.-2      	; 0xd78 <__stop_program>
