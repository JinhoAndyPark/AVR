
PWM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800060  00800060  00000374  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000be  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027e  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000130  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024b  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e2  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	ac c0       	rjmp	.+344    	; 0x15c <__vector_1>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	92 c0       	rjmp	.+292    	; 0x12e <__vector_4>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a0 37       	cpi	r26, 0x70	; 112
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	dd d0       	rcall	.+442    	; 0x202 <main>
  48:	06 c1       	rjmp	.+524    	; 0x256 <exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <RX>:
unsigned int Encoder_CNT=0,Encoder_TMR=0,nTIME=0,nRPM=0;
unsigned char Read_flag=0;

unsigned char RX(void)
{
	if(temp =='1')	OCR_val=250;	//55~255 10% 
  4c:	80 91 61 00 	lds	r24, 0x0061
  50:	90 91 62 00 	lds	r25, 0x0062
  54:	81 33       	cpi	r24, 0x31	; 49
  56:	91 05       	cpc	r25, r1
  58:	29 f4       	brne	.+10     	; 0x64 <RX+0x18>
  5a:	8a ef       	ldi	r24, 0xFA	; 250
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	07 c0       	rjmp	.+14     	; 0x72 <RX+0x26>
	else if(temp=='2') OCR_val=230;	//50%
  64:	82 33       	cpi	r24, 0x32	; 50
  66:	91 05       	cpc	r25, r1
  68:	69 f4       	brne	.+26     	; 0x84 <RX+0x38>
  6a:	86 ee       	ldi	r24, 0xE6	; 230
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	80 93 63 00 	sts	0x0063, r24
  76:	90 93 64 00 	sts	0x0064, r25
  7a:	a0 93 65 00 	sts	0x0065, r26
  7e:	b0 93 66 00 	sts	0x0066, r27
  82:	0f c0       	rjmp	.+30     	; 0xa2 <RX+0x56>
	else if(temp=='3') OCR_val=210;	//90%
  84:	c3 97       	sbiw	r24, 0x33	; 51
  86:	29 f4       	brne	.+10     	; 0x92 <RX+0x46>
  88:	82 ed       	ldi	r24, 0xD2	; 210
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	f0 cf       	rjmp	.-32     	; 0x72 <RX+0x26>
	else OCR_val=0;				//none input
  92:	10 92 63 00 	sts	0x0063, r1
  96:	10 92 64 00 	sts	0x0064, r1
  9a:	10 92 65 00 	sts	0x0065, r1
  9e:	10 92 66 00 	sts	0x0066, r1

	OCR0=OCR_val;
  a2:	80 91 63 00 	lds	r24, 0x0063
  a6:	8c bf       	out	0x3c, r24	; 60

	while((UCSRA & 0x80) ==0);			//waiting recieve data
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <RX+0x5c>

	temp=UDR;
  ac:	8c b1       	in	r24, 0x0c	; 12
  ae:	80 93 61 00 	sts	0x0061, r24
  b2:	10 92 62 00 	sts	0x0062, r1
	
}
  b6:	08 95       	ret

000000b8 <TX>:

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <TX>

	UDR = i;
  bc:	8c b9       	out	0x0c, r24	; 12
}
  be:	08 95       	ret

000000c0 <Uart_U16Bit_PutNum>:


void Uart_U16Bit_PutNum(U16 NumData)
{
  c0:	9c 01       	movw	r18, r24
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <Uart_U16Bit_PutNum+0x2>

	UDR = i;
  c6:	c9 01       	movw	r24, r18
  c8:	60 e1       	ldi	r22, 0x10	; 16
  ca:	77 e2       	ldi	r23, 0x27	; 39
  cc:	c6 d0       	rcall	.+396    	; 0x25a <__udivmodhi4>
  ce:	60 5d       	subi	r22, 0xD0	; 208
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	6c b9       	out	0x0c, r22	; 12
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
  d4:	5d 9b       	sbis	0x0b, 5	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <Uart_U16Bit_PutNum+0x14>

	UDR = i;
  d8:	c9 01       	movw	r24, r18
  da:	60 e1       	ldi	r22, 0x10	; 16
  dc:	77 e2       	ldi	r23, 0x27	; 39
  de:	bd d0       	rcall	.+378    	; 0x25a <__udivmodhi4>
  e0:	68 ee       	ldi	r22, 0xE8	; 232
  e2:	73 e0       	ldi	r23, 0x03	; 3
  e4:	ba d0       	rcall	.+372    	; 0x25a <__udivmodhi4>
  e6:	60 5d       	subi	r22, 0xD0	; 208
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	6c b9       	out	0x0c, r22	; 12
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <Uart_U16Bit_PutNum+0x2c>

	UDR = i;
  f0:	c9 01       	movw	r24, r18
  f2:	68 ee       	ldi	r22, 0xE8	; 232
  f4:	73 e0       	ldi	r23, 0x03	; 3
  f6:	b1 d0       	rcall	.+354    	; 0x25a <__udivmodhi4>
  f8:	64 e6       	ldi	r22, 0x64	; 100
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	ae d0       	rcall	.+348    	; 0x25a <__udivmodhi4>
  fe:	60 5d       	subi	r22, 0xD0	; 208
 100:	7f 4f       	sbci	r23, 0xFF	; 255
 102:	6c b9       	out	0x0c, r22	; 12
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
 104:	5d 9b       	sbis	0x0b, 5	; 11
 106:	fe cf       	rjmp	.-4      	; 0x104 <Uart_U16Bit_PutNum+0x44>

	UDR = i;
 108:	c9 01       	movw	r24, r18
 10a:	64 e6       	ldi	r22, 0x64	; 100
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	a5 d0       	rcall	.+330    	; 0x25a <__udivmodhi4>
 110:	6a e0       	ldi	r22, 0x0A	; 10
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	a2 d0       	rcall	.+324    	; 0x25a <__udivmodhi4>
 116:	60 5d       	subi	r22, 0xD0	; 208
 118:	7f 4f       	sbci	r23, 0xFF	; 255
 11a:	6c b9       	out	0x0c, r22	; 12
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
 11c:	5d 9b       	sbis	0x0b, 5	; 11
 11e:	fe cf       	rjmp	.-4      	; 0x11c <Uart_U16Bit_PutNum+0x5c>

	UDR = i;
 120:	c9 01       	movw	r24, r18
 122:	6a e0       	ldi	r22, 0x0A	; 10
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	99 d0       	rcall	.+306    	; 0x25a <__udivmodhi4>
 128:	c0 96       	adiw	r24, 0x30	; 48
 12a:	8c b9       	out	0x0c, r24	; 12
	TempData = (NumData%100)/10;
	TX(TempData+48);      // 10   	자리 무조건 출력
	
	TempData =  NumData%10;
	TX(TempData+48);      // 1   	자리 무조건 출력
}
 12c:	08 95       	ret

0000012e <__vector_4>:

SIGNAL(TIMER2_OVF_vect)	//0.000004s
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
	Encoder_TMR++;
 13c:	80 91 69 00 	lds	r24, 0x0069
 140:	90 91 6a 00 	lds	r25, 0x006A
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 6a 00 	sts	0x006A, r25
 14a:	80 93 69 00 	sts	0x0069, r24
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_1>:

SIGNAL(INT0_vect)	//ENCODER vector
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	Encoder_CNT++;
 17e:	80 91 67 00 	lds	r24, 0x0067
 182:	90 91 68 00 	lds	r25, 0x0068
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	90 93 68 00 	sts	0x0068, r25
 18c:	80 93 67 00 	sts	0x0067, r24
	if(Encoder_CNT>=500)
 190:	84 5f       	subi	r24, 0xF4	; 244
 192:	91 40       	sbci	r25, 0x01	; 1
 194:	28 f1       	brcs	.+74     	; 0x1e0 <__vector_1+0x84>
	{
		Encoder_CNT = 0;
 196:	10 92 68 00 	sts	0x0068, r1
 19a:	10 92 67 00 	sts	0x0067, r1
		nTIME = Encoder_TMR;
		//Encoder_TMR = 0;
		nTIME = (nTIME*256)+TCNT2;
 19e:	84 b5       	in	r24, 0x24	; 36
 1a0:	30 91 69 00 	lds	r19, 0x0069
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	28 0f       	add	r18, r24
 1a8:	31 1d       	adc	r19, r1
 1aa:	30 93 6c 00 	sts	0x006C, r19
 1ae:	20 93 6b 00 	sts	0x006B, r18
		TCNT2=0; Encoder_TMR=0;
 1b2:	14 bc       	out	0x24, r1	; 36
 1b4:	10 92 6a 00 	sts	0x006A, r1
 1b8:	10 92 69 00 	sts	0x0069, r1
		nRPM = 15000000/nTIME;
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	60 ec       	ldi	r22, 0xC0	; 192
 1c2:	71 ee       	ldi	r23, 0xE1	; 225
 1c4:	84 ee       	ldi	r24, 0xE4	; 228
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	5c d0       	rcall	.+184    	; 0x282 <__divmodsi4>
 1ca:	a9 01       	movw	r20, r18
 1cc:	30 93 6e 00 	sts	0x006E, r19
 1d0:	20 93 6d 00 	sts	0x006D, r18
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
 1d4:	5d 9b       	sbis	0x0b, 5	; 11
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <__vector_1+0x78>

	UDR = i;
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	8c b9       	out	0x0c, r24	; 12
		//Encoder_TMR = 0;
		nTIME = (nTIME*256)+TCNT2;
		TCNT2=0; Encoder_TMR=0;
		nRPM = 15000000/nTIME;
		TX(' ');
		Uart_U16Bit_PutNum(nRPM);
 1dc:	ca 01       	movw	r24, r20
 1de:	70 df       	rcall	.-288    	; 0xc0 <Uart_U16Bit_PutNum>

	}
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <main>:



int main(void)
{
 202:	1f 93       	push	r17
	DDRB=0xFF;//0b00001011;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFB;//0b10000000;
 208:	8b ef       	ldi	r24, 0xFB	; 251
 20a:	81 bb       	out	0x11, r24	; 17

	PORTB=0x02;//0b00000000;
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	88 bb       	out	0x18, r24	; 24
	PORTD=0x00;
 210:	12 ba       	out	0x12, r1	; 18

	TCCR0 = 0x7d;//0b01101101;
 212:	8d e7       	ldi	r24, 0x7D	; 125
 214:	83 bf       	out	0x33, r24	; 51
	TCCR2 = 0x04;//0b00000000;
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	85 bd       	out	0x25, r24	; 37
	OCR0=OCR_val;///2)*-5)-1;
 21a:	80 91 63 00 	lds	r24, 0x0063
 21e:	8c bf       	out	0x3c, r24	; 60
	//TCNT0=55;
	
	//TCCR1B = 0x04;	//256
	//TCNT1 = 65535;	//
	 
	TIMSK = 0x41;	//using Time1 16bit timer
 220:	81 e4       	ldi	r24, 0x41	; 65
 222:	89 bf       	out	0x39, r24	; 57

	MCUCR = 0x03;
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	85 bf       	out	0x35, r24	; 53
	GICR = 0x40;
 228:	80 e4       	ldi	r24, 0x40	; 64
 22a:	8b bf       	out	0x3b, r24	; 59

	UCSRA = 0x00;	
 22c:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18;	
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x06;
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 bd       	out	0x20, r24	; 32

	UBRRH = 0x00;
 236:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;	//9600 baud rate
 238:	87 e6       	ldi	r24, 0x67	; 103
 23a:	89 b9       	out	0x09, r24	; 9

	//DDRD=0x02;		//Rx:Input, Tx:Output

	SREG = 0x80;
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	8f bf       	out	0x3f, r24	; 63
//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);

	UDR = i;
 240:	10 e2       	ldi	r17, 0x20	; 32
	SREG = 0x80;

	while(1)
	{
		
		RX();		//recieve data from computer
 242:	04 df       	rcall	.-504    	; 0x4c <RX>
		TX(temp);	//return data to computer
 244:	80 91 61 00 	lds	r24, 0x0061
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
 248:	5d 9b       	sbis	0x0b, 5	; 11
 24a:	fe cf       	rjmp	.-4      	; 0x248 <main+0x46>

	UDR = i;
 24c:	8c b9       	out	0x0c, r24	; 12
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
 24e:	5d 9b       	sbis	0x0b, 5	; 11
 250:	fe cf       	rjmp	.-4      	; 0x24e <main+0x4c>

	UDR = i;
 252:	1c b9       	out	0x0c, r17	; 12
 254:	f6 cf       	rjmp	.-20     	; 0x242 <main+0x40>

00000256 <exit>:
 256:	f8 94       	cli
 258:	51 c0       	rjmp	.+162    	; 0x2fc <_exit>

0000025a <__udivmodhi4>:
 25a:	aa 1b       	sub	r26, r26
 25c:	bb 1b       	sub	r27, r27
 25e:	51 e1       	ldi	r21, 0x11	; 17
 260:	07 c0       	rjmp	.+14     	; 0x270 <__udivmodhi4_ep>

00000262 <__udivmodhi4_loop>:
 262:	aa 1f       	adc	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	a6 17       	cp	r26, r22
 268:	b7 07       	cpc	r27, r23
 26a:	10 f0       	brcs	.+4      	; 0x270 <__udivmodhi4_ep>
 26c:	a6 1b       	sub	r26, r22
 26e:	b7 0b       	sbc	r27, r23

00000270 <__udivmodhi4_ep>:
 270:	88 1f       	adc	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	5a 95       	dec	r21
 276:	a9 f7       	brne	.-22     	; 0x262 <__udivmodhi4_loop>
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	bc 01       	movw	r22, r24
 27e:	cd 01       	movw	r24, r26
 280:	08 95       	ret

00000282 <__divmodsi4>:
 282:	97 fb       	bst	r25, 7
 284:	09 2e       	mov	r0, r25
 286:	05 26       	eor	r0, r21
 288:	0e d0       	rcall	.+28     	; 0x2a6 <__divmodsi4_neg1>
 28a:	57 fd       	sbrc	r21, 7
 28c:	04 d0       	rcall	.+8      	; 0x296 <__divmodsi4_neg2>
 28e:	14 d0       	rcall	.+40     	; 0x2b8 <__udivmodsi4>
 290:	0a d0       	rcall	.+20     	; 0x2a6 <__divmodsi4_neg1>
 292:	00 1c       	adc	r0, r0
 294:	38 f4       	brcc	.+14     	; 0x2a4 <__divmodsi4_exit>

00000296 <__divmodsi4_neg2>:
 296:	50 95       	com	r21
 298:	40 95       	com	r20
 29a:	30 95       	com	r19
 29c:	21 95       	neg	r18
 29e:	3f 4f       	sbci	r19, 0xFF	; 255
 2a0:	4f 4f       	sbci	r20, 0xFF	; 255
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255

000002a4 <__divmodsi4_exit>:
 2a4:	08 95       	ret

000002a6 <__divmodsi4_neg1>:
 2a6:	f6 f7       	brtc	.-4      	; 0x2a4 <__divmodsi4_exit>
 2a8:	90 95       	com	r25
 2aa:	80 95       	com	r24
 2ac:	70 95       	com	r23
 2ae:	61 95       	neg	r22
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	8f 4f       	sbci	r24, 0xFF	; 255
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	08 95       	ret

000002b8 <__udivmodsi4>:
 2b8:	a1 e2       	ldi	r26, 0x21	; 33
 2ba:	1a 2e       	mov	r1, r26
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	fd 01       	movw	r30, r26
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <__udivmodsi4_ep>

000002c4 <__udivmodsi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	ee 1f       	adc	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	a2 17       	cp	r26, r18
 2ce:	b3 07       	cpc	r27, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__udivmodsi4_ep>
 2d6:	a2 1b       	sub	r26, r18
 2d8:	b3 0b       	sbc	r27, r19
 2da:	e4 0b       	sbc	r30, r20
 2dc:	f5 0b       	sbc	r31, r21

000002de <__udivmodsi4_ep>:
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	1a 94       	dec	r1
 2e8:	69 f7       	brne	.-38     	; 0x2c4 <__udivmodsi4_loop>
 2ea:	60 95       	com	r22
 2ec:	70 95       	com	r23
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	bd 01       	movw	r22, r26
 2f8:	cf 01       	movw	r24, r30
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
