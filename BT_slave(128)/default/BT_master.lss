
BT_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000008ce  00000962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000073  00800122  00800122  00000984  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000270  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a3  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f0  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000858  00000000  00000000  000019e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064f  00000000  00000000  00002851  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 39       	cpi	r26, 0x95	; 149
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  c6:	0c 94 20 04 	jmp	0x840	; 0x840 <exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
//------------------------------------------------------------------------------
//                   		=== Interrupt Service Routine ===
//------------------------------------------------------------------------------

ISR(USART0_RX_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	0b b6       	in	r0, 0x3b	; 59
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	U08 data;
	Disable_ISR();
  e6:	8f b7       	in	r24, 0x3f	; 63
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	8f bf       	out	0x3f, r24	; 63

	data = UDR0;
  ec:	2c b1       	in	r18, 0x0c	; 12

	if(( data == PACKET_START) && ( pContext.b_start == NOT_YET))
  ee:	2f 3f       	cpi	r18, 0xFF	; 255
  f0:	d1 f4       	brne	.+52     	; 0x126 <__vector_18+0x58>
  f2:	80 91 2a 01 	lds	r24, 0x012A
  f6:	90 91 2b 01 	lds	r25, 0x012B
  fa:	89 2b       	or	r24, r25
  fc:	a1 f4       	brne	.+40     	; 0x126 <__vector_18+0x58>
	{
		pContext.rPacketData[pContext.isr_cnt++] = data;
  fe:	80 91 28 01 	lds	r24, 0x0128
 102:	90 91 29 01 	lds	r25, 0x0129
 106:	fc 01       	movw	r30, r24
 108:	e8 5d       	subi	r30, 0xD8	; 216
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	24 83       	std	Z+4, r18	; 0x04
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	90 93 29 01 	sts	0x0129, r25
 114:	80 93 28 01 	sts	0x0128, r24
		pContext.b_start = DONE;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 2b 01 	sts	0x012B, r25
 120:	80 93 2a 01 	sts	0x012A, r24
 124:	19 c0       	rjmp	.+50     	; 0x158 <__vector_18+0x8a>
	}
	else if((pContext.isr_cnt >= 1) && (pContext.b_start == DONE))
 126:	80 91 28 01 	lds	r24, 0x0128
 12a:	90 91 29 01 	lds	r25, 0x0129
 12e:	89 2b       	or	r24, r25
 130:	99 f0       	breq	.+38     	; 0x158 <__vector_18+0x8a>
 132:	80 91 2a 01 	lds	r24, 0x012A
 136:	90 91 2b 01 	lds	r25, 0x012B
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	69 f4       	brne	.+26     	; 0x158 <__vector_18+0x8a>
	{
		pContext.rPacketData[pContext.isr_cnt++] = data;
 13e:	80 91 28 01 	lds	r24, 0x0128
 142:	90 91 29 01 	lds	r25, 0x0129
 146:	fc 01       	movw	r30, r24
 148:	e8 5d       	subi	r30, 0xD8	; 216
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	24 83       	std	Z+4, r18	; 0x04
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 29 01 	sts	0x0129, r25
 154:	80 93 28 01 	sts	0x0128, r24
	}
	Enable_ISR();
 158:	8f b7       	in	r24, 0x3f	; 63
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	8f bf       	out	0x3f, r24	; 63
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0b be       	out	0x3b, r0	; 59
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <proc_packet_error>:
		case PACKET_END_ERR:	
			break;			
		default:
			break;
	}
}
 176:	08 95       	ret

00000178 <HostUartTxD>:


void HostUartTxD(unsigned char* packet, int len)
{
 178:	ac 01       	movw	r20, r24
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	09 c0       	rjmp	.+18     	; 0x192 <HostUartTxD+0x1a>
	int cnt;

	for(cnt = 0; cnt < len ; cnt++)
	{
		while(!(UCSR0A & (1 <<UDRE0)));
 180:	5d 9b       	sbis	0x0b, 5	; 11
 182:	fe cf       	rjmp	.-4      	; 0x180 <HostUartTxD+0x8>
		UDR0 = packet[cnt];
 184:	fa 01       	movw	r30, r20
 186:	e2 0f       	add	r30, r18
 188:	f3 1f       	adc	r31, r19
 18a:	80 81       	ld	r24, Z
 18c:	8c b9       	out	0x0c, r24	; 12

void HostUartTxD(unsigned char* packet, int len)
{
	int cnt;

	for(cnt = 0; cnt < len ; cnt++)
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	26 17       	cp	r18, r22
 194:	37 07       	cpc	r19, r23
 196:	a4 f3       	brlt	.-24     	; 0x180 <HostUartTxD+0x8>
	{
		while(!(UCSR0A & (1 <<UDRE0)));
		UDR0 = packet[cnt];
	}
}
 198:	08 95       	ret

0000019a <Packet_TxD>:

void Packet_TxD( U08 Length, U08 ID, U08 Data )			// Laser -> GUI 로 Packet 전송시 사용
{
 19a:	df 93       	push	r29
 19c:	cf 93       	push	r28
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <Packet_TxD+0x6>
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <Packet_TxD+0x8>
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <Packet_TxD+0xa>
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	28 2f       	mov	r18, r24
	U08 PacketBuffer[6];
	
	PacketBuffer[0] = PACKET_START;		// Start Code
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	89 83       	std	Y+1, r24	; 0x01
	PacketBuffer[1] = Length;			// Length
 1ae:	2a 83       	std	Y+2, r18	; 0x02
	PacketBuffer[2] = ID;				//My ID
 1b0:	6b 83       	std	Y+3, r22	; 0x03
	PacketBuffer[3] = Data;				//Data
 1b2:	4c 83       	std	Y+4, r20	; 0x04
	PacketBuffer[4] = ~Data;			//reverse Data
 1b4:	40 95       	com	r20
 1b6:	4d 83       	std	Y+5, r20	; 0x05
	PacketBuffer[5] = PACKET_END;		// End Code
 1b8:	8e ee       	ldi	r24, 0xEE	; 238
 1ba:	8e 83       	std	Y+6, r24	; 0x06

	HostUartTxD( PacketBuffer, Length + 4 );
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	2c 5f       	subi	r18, 0xFC	; 252
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	b9 01       	movw	r22, r18
 1c8:	0e 94 bc 00 	call	0x178	; 0x178 <HostUartTxD>
}
 1cc:	26 96       	adiw	r28, 0x06	; 6
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	cf 91       	pop	r28
 1da:	df 91       	pop	r29
 1dc:	08 95       	ret

000001de <proc_packet_command>:
			break;
	}
}

void proc_packet_command( GUI_PACKET *packet )
{
 1de:	fc 01       	movw	r30, r24

	switch( packet->id )
 1e0:	80 81       	ld	r24, Z
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <proc_packet_command+0x12>
	{
		case MY_ID:	// Command
			Packet_TxD( 2, MY_ID, 0xF0 );
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	40 ef       	ldi	r20, 0xF0	; 240
 1ec:	0e 94 cd 00 	call	0x19a	; 0x19a <Packet_TxD>
 1f0:	08 95       	ret

000001f2 <Init_Main>:
//------------------------------------------------------------------------------
//                       	=== Initialize Function ===
//------------------------------------------------------------------------------
void Init_Main(void)
{
	Disable_ISR();           	// 전체인터럽트 사용금지
 1f2:	8f b7       	in	r24, 0x3f	; 63
 1f4:	8f 77       	andi	r24, 0x7F	; 127
 1f6:	8f bf       	out	0x3f, r24	; 63
	 
	//Init_IO();				// 초기화_입출력포트	
	//Init_Ext_Interrupt(INT0);	// 초기화_외부인터럽트0/1/2/3/4/5/6/7
	//Init_Timer();				// 초기화_타이머0/1/2/3
    Init_Uart(0,57600);  		// 초기화_시리얼통신0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	51 ee       	ldi	r21, 0xE1	; 225
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 ae 01 	call	0x35c	; 0x35c <Init_Uart>
	//Init_ADC();				// 초기화_ADC
    //Init_SPI(MASTER);			// 초기화_SPI통신 
	//Init_TWI(MASTER);			// 초기화_TWI통신

    
	Enable_ISR();            	// 전체인터럽트 사용허가
 206:	8f b7       	in	r24, 0x3f	; 63
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	8f bf       	out	0x3f, r24	; 63
}
 20c:	08 95       	ret

0000020e <Init_packet>:
	Enable_ISR();
}

void Init_packet( GUI_PACKET *packet, UART_CONTEXT *context )
{
	memset(packet, 0, sizeof(GUI_PACKET));
 20e:	fc 01       	movw	r30, r24
 210:	89 e3       	ldi	r24, 0x39	; 57
 212:	df 01       	movw	r26, r30
 214:	1d 92       	st	X+, r1
 216:	8a 95       	dec	r24
 218:	e9 f7       	brne	.-6      	; 0x214 <Init_packet+0x6>
	memset(context, 0, sizeof(UART_CONTEXT));
 21a:	84 e3       	ldi	r24, 0x34	; 52
 21c:	db 01       	movw	r26, r22
 21e:	1d 92       	st	X+, r1
 220:	8a 95       	dec	r24
 222:	e9 f7       	brne	.-6      	; 0x21e <Init_packet+0x10>
}
 224:	08 95       	ret

00000226 <PacketManager>:

void PacketManager( GUI_PACKET *packet, UART_CONTEXT *context )
{
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
 230:	8b 01       	movw	r16, r22
	static PACKET_STATE current_pk_state = PK_ST_INIT;
	static PACKET_STATE next_pk_state = PK_ST_INIT;

	current_pk_state = next_pk_state;
 232:	20 91 26 01 	lds	r18, 0x0126
 236:	20 93 27 01 	sts	0x0127, r18

	switch( current_pk_state )
 23a:	22 30       	cpi	r18, 0x02	; 2
 23c:	09 f1       	breq	.+66     	; 0x280 <PacketManager+0x5a>
 23e:	23 30       	cpi	r18, 0x03	; 3
 240:	30 f4       	brcc	.+12     	; 0x24e <PacketManager+0x28>
 242:	22 23       	and	r18, r18
 244:	59 f0       	breq	.+22     	; 0x25c <PacketManager+0x36>
 246:	21 30       	cpi	r18, 0x01	; 1
 248:	09 f0       	breq	.+2      	; 0x24c <PacketManager+0x26>
 24a:	3e c0       	rjmp	.+124    	; 0x2c8 <PacketManager+0xa2>
 24c:	10 c0       	rjmp	.+32     	; 0x26e <PacketManager+0x48>
 24e:	24 30       	cpi	r18, 0x04	; 4
 250:	11 f1       	breq	.+68     	; 0x296 <PacketManager+0x70>
 252:	24 30       	cpi	r18, 0x04	; 4
 254:	d8 f0       	brcs	.+54     	; 0x28c <PacketManager+0x66>
 256:	25 30       	cpi	r18, 0x05	; 5
 258:	b9 f5       	brne	.+110    	; 0x2c8 <PacketManager+0xa2>
 25a:	25 c0       	rjmp	.+74     	; 0x2a6 <PacketManager+0x80>
	{
		case PK_ST_INIT:
			if( context->b_start )
 25c:	fb 01       	movw	r30, r22
 25e:	82 81       	ldd	r24, Z+2	; 0x02
 260:	93 81       	ldd	r25, Z+3	; 0x03
 262:	89 2b       	or	r24, r25
 264:	89 f1       	breq	.+98     	; 0x2c8 <PacketManager+0xa2>
			{
				packet->timeout_cnt = 0;
 266:	18 ae       	std	Y+56, r1	; 0x38
 268:	1f aa       	std	Y+55, r1	; 0x37

				next_pk_state = PK_ST_LENGTH;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	19 c0       	rjmp	.+50     	; 0x2a0 <PacketManager+0x7a>
			}
			break;

		case PK_ST_LENGTH:
			packet->data_len = context->rPacketData[1];
 26e:	fb 01       	movw	r30, r22
 270:	85 81       	ldd	r24, Z+5	; 0x05
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	9d 83       	std	Y+5, r25	; 0x05
 276:	8c 83       	std	Y+4, r24	; 0x04

			if( packet->data_len == PACKET_LENGTH )		
 278:	02 97       	sbiw	r24, 0x02	; 2
 27a:	f9 f4       	brne	.+62     	; 0x2ba <PacketManager+0x94>
			{
				next_pk_state = PK_ST_ID;
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	10 c0       	rjmp	.+32     	; 0x2a0 <PacketManager+0x7a>
				Init_packet(packet, context);
			}
			break;

		case PK_ST_ID:
			packet->id = context->rPacketData[2];
 280:	fb 01       	movw	r30, r22
 282:	86 81       	ldd	r24, Z+6	; 0x06
 284:	88 83       	st	Y, r24

			switch( packet->id )
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	c1 f4       	brne	.+48     	; 0x2ba <PacketManager+0x94>
 28a:	0a c0       	rjmp	.+20     	; 0x2a0 <PacketManager+0x7a>
					break;
			}
			break;

		case PK_ST_DATA:
			packet->value = context->rPacketData[3] ;
 28c:	fb 01       	movw	r30, r22
 28e:	87 81       	ldd	r24, Z+7	; 0x07
 290:	89 83       	std	Y+1, r24	; 0x01

			next_pk_state =  PK_ST_rDATA;
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <PacketManager+0x7a>
			break;
			
		case PK_ST_rDATA:
			packet->rev_value = ~(context->rPacketData[4]);
 296:	fb 01       	movw	r30, r22
 298:	80 85       	ldd	r24, Z+8	; 0x08
 29a:	80 95       	com	r24
 29c:	8a 83       	std	Y+2, r24	; 0x02

			next_pk_state = PK_ST_END;
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	80 93 26 01 	sts	0x0126, r24
 2a4:	11 c0       	rjmp	.+34     	; 0x2c8 <PacketManager+0xa2>
				
			break;

		case PK_ST_END:
			packet->end = context->rPacketData[5];
 2a6:	fb 01       	movw	r30, r22
 2a8:	81 85       	ldd	r24, Z+9	; 0x09
 2aa:	8b 83       	std	Y+3, r24	; 0x03
			
			if( packet->end == PACKET_END )		
 2ac:	8e 3e       	cpi	r24, 0xEE	; 238
 2ae:	29 f4       	brne	.+10     	; 0x2ba <PacketManager+0x94>
			{
				packet->error_code = PACKET_NO_ERR;
 2b0:	1e aa       	std	Y+54, r1	; 0x36
				
				proc_packet_error( packet->error_code );		// packet end error
				proc_packet_command(packet);
 2b2:	ce 01       	movw	r24, r28
 2b4:	0e 94 ef 00 	call	0x1de	; 0x1de <proc_packet_command>
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <PacketManager+0x96>
			}
			else 
			{			
				packet->error_code = PACKET_END_ERR;
 2ba:	2e ab       	std	Y+54, r18	; 0x36
				proc_packet_error( packet->error_code );		// packet end error
			}
			
			next_pk_state = PK_ST_INIT;
 2bc:	10 92 26 01 	sts	0x0126, r1
			Init_packet(packet, context);
 2c0:	ce 01       	movw	r24, r28
 2c2:	b8 01       	movw	r22, r16
 2c4:	0e 94 07 01 	call	0x20e	; 0x20e <Init_packet>
			break;

		default:
			break;
	}
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <main>:

//------------------------------------------------------------------------------
//                      	=== Main Function ===
//------------------------------------------------------------------------------
int main(void)
{ 
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
	Init_Main();		// 초기화_MCU
 2d6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Init_Main>
	
	Init_packet((GUI_PACKET*)&pPacket, (UART_CONTEXT*)&pContext);
 2da:	8c e5       	ldi	r24, 0x5C	; 92
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	68 e2       	ldi	r22, 0x28	; 40
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	0e 94 07 01 	call	0x20e	; 0x20e <Init_packet>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e6:	c0 e4       	ldi	r28, 0x40	; 64
 2e8:	df e1       	ldi	r29, 0x1F	; 31
	{         
	//--------------------------------------------------------------------------
	//		=== Function Module ===
	//--------------------------------------------------------------------------
		
		PacketManager( (GUI_PACKET*)&pPacket, (UART_CONTEXT *)&pContext );
 2ea:	8c e5       	ldi	r24, 0x5C	; 92
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	68 e2       	ldi	r22, 0x28	; 40
 2f0:	71 e0       	ldi	r23, 0x01	; 1
 2f2:	0e 94 13 01 	call	0x226	; 0x226 <PacketManager>
 2f6:	ce 01       	movw	r24, r28
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x26>
 2fc:	f6 cf       	rjmp	.-20     	; 0x2ea <main+0x18>

000002fe <Init_Timer>:
//------------------------------------------------------------------------------
void Init_Timer0(void)			// 타이머0 초기화
{
		
	#ifdef TIMER0_USE_PWM
		sbi( DDRB, 4 );		//OC0 enble
 2fe:	bc 9a       	sbi	0x17, 4	; 23
		TCNT0 = 0;
 300:	12 be       	out	0x32, r1	; 50
		TCCR0 = ( 1 << WGM01 ) | ( 1 << WGM00 )  | ( 0 << COM00 ) | ( 1 << COM01 ) 
 302:	8f e6       	ldi	r24, 0x6F	; 111
 304:	83 bf       	out	0x33, r24	; 51
				| ( 1 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		// FAST PWM mode 설정
		OCR0 = 100;
 306:	84 e6       	ldi	r24, 0x64	; 100
 308:	81 bf       	out	0x31, r24	; 49
//------------------------------------------------------------------------------
//               			===== Timer1 Initialize =====
//------------------------------------------------------------------------------
void Init_Timer1(void)        	// 타이머1 초기화
{
	sbi( TIMSK, TOIE1 );     	// 타이머1 오버플로어 ON
 30a:	87 b7       	in	r24, 0x37	; 55
 30c:	84 60       	ori	r24, 0x04	; 4
 30e:	87 bf       	out	0x37, r24	; 55
	TCNT1 	= 0;          		// 타이머1 상수
 310:	1d bc       	out	0x2d, r1	; 45
 312:	1c bc       	out	0x2c, r1	; 44
	TCCR1B 	= ( 1 << CS10 ) | ( 1 << CS11 ) | ( 0 << CS12 );	// 타이머1 설정 (Normal-Mode,CLK/1)
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	8e bd       	out	0x2e, r24	; 46
		//Init_Timer2();           	//타이머2 초기화
		
        // 16비트 타이머
		Init_Timer1();           	//타이머1 초기화
		//Init_Timer3();           	//타이머3 초기화
}
 318:	08 95       	ret

0000031a <Init_Timer0>:
//------------------------------------------------------------------------------
void Init_Timer0(void)			// 타이머0 초기화
{
		
	#ifdef TIMER0_USE_PWM
		sbi( DDRB, 4 );		//OC0 enble
 31a:	bc 9a       	sbi	0x17, 4	; 23
		TCNT0 = 0;
 31c:	12 be       	out	0x32, r1	; 50
		TCCR0 = ( 1 << WGM01 ) | ( 1 << WGM00 )  | ( 0 << COM00 ) | ( 1 << COM01 ) 
 31e:	8f e6       	ldi	r24, 0x6F	; 111
 320:	83 bf       	out	0x33, r24	; 51
				| ( 1 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		// FAST PWM mode 설정
		OCR0 = 100;
 322:	84 e6       	ldi	r24, 0x64	; 100
 324:	81 bf       	out	0x31, r24	; 49
		TCNT0 = 0;					// 타이머0 상수
		
		TCCR0 = ( 0 << CS00 ) | ( 1 << CS01 ) | ( 0 << CS02 );				// prescaler 설정
		
	#endif
}
 326:	08 95       	ret

00000328 <Init_Timer1>:
//------------------------------------------------------------------------------
//               			===== Timer1 Initialize =====
//------------------------------------------------------------------------------
void Init_Timer1(void)        	// 타이머1 초기화
{
	sbi( TIMSK, TOIE1 );     	// 타이머1 오버플로어 ON
 328:	87 b7       	in	r24, 0x37	; 55
 32a:	84 60       	ori	r24, 0x04	; 4
 32c:	87 bf       	out	0x37, r24	; 55
	TCNT1 	= 0;          		// 타이머1 상수
 32e:	1d bc       	out	0x2d, r1	; 45
 330:	1c bc       	out	0x2c, r1	; 44
	TCCR1B 	= ( 1 << CS10 ) | ( 1 << CS11 ) | ( 0 << CS12 );	// 타이머1 설정 (Normal-Mode,CLK/1)
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	8e bd       	out	0x2e, r24	; 46
}
 336:	08 95       	ret

00000338 <Init_Timer2>:
				| ( 0 << CS20 ) | ( 0 << CS21 ) | ( 0 << CS22 );	// FAST PWM mode 설정
		TCNT2 = 0;
		OCR2 = 0;

	#else
		sbi( TIMSK, TOIE2 );     	// 타이머2 오버플로어 ON
 338:	87 b7       	in	r24, 0x37	; 55
 33a:	80 64       	ori	r24, 0x40	; 64
 33c:	87 bf       	out	0x37, r24	; 55
		TCNT2 = 0x00;				// 타이머2 상수
 33e:	14 bc       	out	0x24, r1	; 36
		
		TCCR2 = ( 0 << CS00 ) | ( 0 << CS01 ) | ( 0 << CS02 );				// prescaler 설정
 340:	15 bc       	out	0x25, r1	; 37
	#endif
}
 342:	08 95       	ret

00000344 <Init_Timer3>:
//------------------------------------------------------------------------------
//               			===== Timer3 Initialize =====
//------------------------------------------------------------------------------
void Init_Timer3(void)        	// 타이머3 초기화
{
	sbi( ETIMSK, TOIE3 );    	// 타이머3 오버플로어 ON
 344:	ed e7       	ldi	r30, 0x7D	; 125
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	84 60       	ori	r24, 0x04	; 4
 34c:	80 83       	st	Z, r24
	TCNT3 	= 0;          	// 타이머3 상수
 34e:	10 92 89 00 	sts	0x0089, r1
 352:	10 92 88 00 	sts	0x0088, r1
	TCCR3B 	= ( 0 << CS30 ) | ( 0 << CS31 ) | ( 0 << CS32 );           	// 타이머3 설정 (Normal-Mode,CLK/1)
 356:	10 92 8a 00 	sts	0x008A, r1
}
 35a:	08 95       	ret

0000035c <Init_Uart>:
//------------------------------------------------------------------------------
//     				===== Uart_Init =====
//             		: 희망하는 속도로 시리얼 통신을 초기화 한다.
//------------------------------------------------------------------------------
void Init_Uart(U08 Com, U32 Uart_Baud)
{
 35c:	1f 93       	push	r17
 35e:	18 2f       	mov	r17, r24
 360:	9a 01       	movw	r18, r20
 362:	ab 01       	movw	r20, r22
	U16 Temp_UBRR;

	Temp_UBRR = AVR_CLK/(16L * Uart_Baud) - 1;   	// 통신 보레이트 계산식
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	44 1f       	adc	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	8a 95       	dec	r24
 370:	d1 f7       	brne	.-12     	; 0x366 <Init_Uart+0xa>
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	74 e2       	ldi	r23, 0x24	; 36
 376:	84 ef       	ldi	r24, 0xF4	; 244
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 43 04 	call	0x886	; 0x886 <__udivmodsi4>
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	30 40       	sbci	r19, 0x00	; 0
													// U2X = 0 일때 (일반모드)
	
    //---------------------------- UART0 초기화 --------------------------------
	if( Com == UART0 )                           	
 382:	11 23       	and	r17, r17
 384:	71 f4       	brne	.+28     	; 0x3a2 <Init_Uart+0x46>
	{
		UBRR0H = (Temp_UBRR >> 8);              // 통신속도 설정
 386:	30 93 90 00 	sts	0x0090, r19
		UBRR0L = (Temp_UBRR & 0x00FF);
 38a:	29 b9       	out	0x09, r18	; 9
		
		UCSR0A = (0<<RXC0)  | (1<<UDRE0);		// 수신,송신 상태비트 초기화
 38c:	80 e2       	ldi	r24, 0x20	; 32
 38e:	8b b9       	out	0x0b, r24	; 11
        UCSR0B = (1<<RXEN0) | (1<<TXEN0);  		// 수신,송신 기능 활성화
 390:	88 e1       	ldi	r24, 0x18	; 24
 392:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = (3<<UCSZ00);				// START 1비트/DATA 8비트/STOP 1비트
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	80 93 95 00 	sts	0x0095, r24
		
		cbi( DDRE, 0 );                         // RXD0 핀 입력으로 설정
 39a:	10 98       	cbi	0x02, 0	; 2
		sbi( DDRE, 1 );                         // TXD0 핀 출력으로 설정
 39c:	11 9a       	sbi	0x02, 1	; 2
		
		#ifdef UART0_RX_INT_ENABLE			// UART0_RX_INT_ENABLE 설정시만
			UCSR0B |=  (1<<RXCIE0);	             	// 수신인터럽트0 활성화
 39e:	57 9a       	sbi	0x0a, 7	; 10
 3a0:	16 c0       	rjmp	.+44     	; 0x3ce <Init_Uart+0x72>
		#endif
	}
	
    //---------------------------- UART1 초기화 --------------------------------
	if( Com == UART1)
 3a2:	11 30       	cpi	r17, 0x01	; 1
 3a4:	a1 f4       	brne	.+40     	; 0x3ce <Init_Uart+0x72>
	{
		UBRR1H = (Temp_UBRR >> 8);              // 통신속도 설정
 3a6:	30 93 98 00 	sts	0x0098, r19
		UBRR1L = (Temp_UBRR & 0x00FF);
 3aa:	20 93 99 00 	sts	0x0099, r18

		UCSR1A = (0<<RXC1)  | (1<<UDRE1); 	// 수신,송신 상태비트 초기화
 3ae:	80 e2       	ldi	r24, 0x20	; 32
 3b0:	80 93 9b 00 	sts	0x009B, r24
		UCSR1B = (1<<RXEN1) | (1<<TXEN1);    	// 수신,송신 기능 활성화
 3b4:	88 e1       	ldi	r24, 0x18	; 24
 3b6:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = (3<<UCSZ10);                   // START 1비트/DATA 8비트/STOP 1비트
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	80 93 9d 00 	sts	0x009D, r24
		
		cbi( DDRD, 2 );                         // RXD1 핀 입력으로 설정
 3c0:	8a 98       	cbi	0x11, 2	; 17
		sbi( DDRD, 3 );                         // TXD1 핀 출력으로 설정
 3c2:	8b 9a       	sbi	0x11, 3	; 17
		
		#ifdef UART1_RX_INT_ENABLE			// UART1_RX_INT_ENABLE 설정시만
			UCSR1B |=  (1<<RXCIE1);              	// 수신인터럽트1 활성화
 3c4:	80 91 9a 00 	lds	r24, 0x009A
 3c8:	80 68       	ori	r24, 0x80	; 128
 3ca:	80 93 9a 00 	sts	0x009A, r24
		#endif
	}

}
 3ce:	1f 91       	pop	r17
 3d0:	08 95       	ret

000003d2 <Uart_Getch>:
//       			===== Uart_Getch =====
//              	: 시리얼 포트로 부터 1바이트 데이터를 받는다.
//----------------------------------------------------------------------------
U08 Uart_Getch(U08 Com)
{
	switch( Com )
 3d2:	88 23       	and	r24, r24
 3d4:	21 f0       	breq	.+8      	; 0x3de <Uart_Getch+0xc>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	31 f0       	breq	.+12     	; 0x3e6 <Uart_Getch+0x14>
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
	{
		case UART0:
			while(!( UCSR0A & (1<<RXC0)) );    // 수신완료까지 대기
 3de:	5f 9b       	sbis	0x0b, 7	; 11
 3e0:	fe cf       	rjmp	.-4      	; 0x3de <Uart_Getch+0xc>
			return UDR0;                       // 수신데이터 반환
 3e2:	8c b1       	in	r24, 0x0c	; 12
 3e4:	08 95       	ret
		
		case UART1:
			while(!( UCSR1A & (1<<RXC1)) );    // 수신완료까지 대기
 3e6:	80 91 9b 00 	lds	r24, 0x009B
 3ea:	87 ff       	sbrs	r24, 7
 3ec:	fc cf       	rjmp	.-8      	; 0x3e6 <Uart_Getch+0x14>
			return UDR1;                       // 순신데이터 반환
 3ee:	80 91 9c 00 	lds	r24, 0x009C
		
        default:
			return 0;
	}
}
 3f2:	08 95       	ret

000003f4 <Uart_Putch>:
//   				===== Uart_Putch =====
//             		: 시리얼 포트로 1바이트 보낸다.
//----------------------------------------------------------------------------
void Uart_Putch(U08 Com, U08 PutData)
{
	switch(Com)
 3f4:	88 23       	and	r24, r24
 3f6:	19 f0       	breq	.+6      	; 0x3fe <Uart_Putch+0xa>
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	59 f4       	brne	.+22     	; 0x412 <Uart_Putch+0x1e>
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <Uart_Putch+0x12>
	{
		case UART0:
			while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
 3fe:	5d 9b       	sbis	0x0b, 5	; 11
 400:	fe cf       	rjmp	.-4      	; 0x3fe <Uart_Putch+0xa>
			UDR0 = PutData;                     // 데이터를 전송한다
 402:	6c b9       	out	0x0c, r22	; 12
 404:	08 95       	ret
			break;
		
		case UART1:
			while(!( UCSR1A & (1<<UDRE1)) );    // 송신가능시점까지 대기
 406:	80 91 9b 00 	lds	r24, 0x009B
 40a:	85 ff       	sbrs	r24, 5
 40c:	fc cf       	rjmp	.-8      	; 0x406 <Uart_Putch+0x12>
			UDR1 = PutData;                     // 데이터를 전송한다
 40e:	60 93 9c 00 	sts	0x009C, r22
 412:	08 95       	ret

00000414 <Uart_Print>:
//----------------------------------------------------------------------------
//          		===== Uart_Print =====
//             		: 시리얼로 문자열을 보낸다.
//----------------------------------------------------------------------------
void Uart_Print(U08 Com, char *UartPrintData)
{
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	18 2f       	mov	r17, r24
 41c:	eb 01       	movw	r28, r22
 41e:	0b c0       	rjmp	.+22     	; 0x436 <Uart_Print+0x22>
	while(*UartPrintData != '\0')				// NULL문자 전까지 반복
	{
		Uart_Putch( Com, *UartPrintData );		// 1바이트씩 전송
 420:	81 2f       	mov	r24, r17
 422:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
		
		if(*UartPrintData == 0x0A)  			// LF 에 CR을 보탠다
 426:	88 81       	ld	r24, Y
 428:	8a 30       	cpi	r24, 0x0A	; 10
 42a:	21 f4       	brne	.+8      	; 0x434 <Uart_Print+0x20>
			Uart_Putch( Com, 0x0D );
 42c:	81 2f       	mov	r24, r17
 42e:	6d e0       	ldi	r22, 0x0D	; 13
 430:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
		
		UartPrintData++;
 434:	21 96       	adiw	r28, 0x01	; 1
//          		===== Uart_Print =====
//             		: 시리얼로 문자열을 보낸다.
//----------------------------------------------------------------------------
void Uart_Print(U08 Com, char *UartPrintData)
{
	while(*UartPrintData != '\0')				// NULL문자 전까지 반복
 436:	68 81       	ld	r22, Y
 438:	66 23       	and	r22, r22
 43a:	91 f7       	brne	.-28     	; 0x420 <Uart_Print+0xc>
		if(*UartPrintData == 0x0A)  			// LF 에 CR을 보탠다
			Uart_Putch( Com, 0x0D );
		
		UartPrintData++;
	}
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	08 95       	ret

00000444 <Uart_U08Bit_PutNum>:
//----------------------------------------------------------------------------
//        			===== Uart_U08Bit_PutNum =====
//             		: 시리얼로 unsigned char 형 숫자를 출력
//----------------------------------------------------------------------------
void Uart_U08Bit_PutNum(U08 Com, U08 NumData)
{
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	08 2f       	mov	r16, r24
 44a:	16 2f       	mov	r17, r22
	U08 TempData;

	TempData =  NumData/100;
	Uart_Putch(Com, TempData+48);			// 100 자리 무조건 출력
 44c:	86 2f       	mov	r24, r22
 44e:	64 e6       	ldi	r22, 0x64	; 100
 450:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodqi4>
 454:	68 2f       	mov	r22, r24
 456:	60 5d       	subi	r22, 0xD0	; 208
 458:	80 2f       	mov	r24, r16
 45a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      		// 10  자리 무조건 출력
 45e:	81 2f       	mov	r24, r17
 460:	64 e6       	ldi	r22, 0x64	; 100
 462:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodqi4>
 466:	89 2f       	mov	r24, r25
 468:	6a e0       	ldi	r22, 0x0A	; 10
 46a:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodqi4>
 46e:	68 2f       	mov	r22, r24
 470:	60 5d       	subi	r22, 0xD0	; 208
 472:	80 2f       	mov	r24, r16
 474:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);     	 	// 1   자리 무조건 출력
 478:	81 2f       	mov	r24, r17
 47a:	6a e0       	ldi	r22, 0x0A	; 10
 47c:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodqi4>
 480:	90 5d       	subi	r25, 0xD0	; 208
 482:	80 2f       	mov	r24, r16
 484:	69 2f       	mov	r22, r25
 486:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
}
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	08 95       	ret

00000490 <Uart_U08Bit_PutNum_Substance>:
//----------------------------------------------------------------------------
//        			===== Uart_U08Bit_PutNum_Substance =====
//              	: 시리얼로 unsigned char 형 숫자를 출력(실질적인 숫자)
//----------------------------------------------------------------------------
void Uart_U08Bit_PutNum_Substance(U08 Com, U08 NumData)
{
 490:	ff 92       	push	r15
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	08 2f       	mov	r16, r24
 498:	f6 2e       	mov	r15, r22
	U08 TempData100;
	U08 TempData10;
	U08 TempData1;

	TempData100 =  NumData/100;
 49a:	86 2f       	mov	r24, r22
 49c:	64 e6       	ldi	r22, 0x64	; 100
 49e:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodqi4>
 4a2:	18 2f       	mov	r17, r24
	if(TempData100 > 0)					// 100 자리가 0보다 크면 출력
 4a4:	88 23       	and	r24, r24
 4a6:	29 f0       	breq	.+10     	; 0x4b2 <Uart_U08Bit_PutNum_Substance+0x22>
		Uart_Putch(Com, TempData100+48);   		// 100 자리 출력
 4a8:	68 2f       	mov	r22, r24
 4aa:	60 5d       	subi	r22, 0xD0	; 208
 4ac:	80 2f       	mov	r24, r16
 4ae:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData10 = (NumData%100)/10;
 4b2:	8f 2d       	mov	r24, r15
 4b4:	64 e6       	ldi	r22, 0x64	; 100
 4b6:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodqi4>
 4ba:	89 2f       	mov	r24, r25
 4bc:	6a e0       	ldi	r22, 0x0A	; 10
 4be:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodqi4>
 4c2:	68 2f       	mov	r22, r24
	if(TempData10 > 0)					// 10  자리가 0보다 크면 출력
 4c4:	88 23       	and	r24, r24
 4c6:	19 f0       	breq	.+6      	; 0x4ce <Uart_U08Bit_PutNum_Substance+0x3e>
		Uart_Putch(Com, TempData10+48);   		
 4c8:	60 5d       	subi	r22, 0xD0	; 208
 4ca:	80 2f       	mov	r24, r16
 4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <Uart_U08Bit_PutNum_Substance+0x46>
    else 							// 10  자리가 0이면
    {
        if(TempData100 > 0)					// 100 자리가 존재하면 0출력
 4ce:	11 23       	and	r17, r17
 4d0:	21 f0       	breq	.+8      	; 0x4da <Uart_U08Bit_PutNum_Substance+0x4a>
	        Uart_Putch(Com, TempData10+48);   		// 100 자리가 존재하지 않으면 출력하지 않음
 4d2:	80 2f       	mov	r24, r16
 4d4:	60 e3       	ldi	r22, 0x30	; 48
 4d6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
    }

	TempData1 = NumData%10;
	Uart_Putch(Com, TempData1+48);      			// 1   자리는 무조건 출력
 4da:	8f 2d       	mov	r24, r15
 4dc:	6a e0       	ldi	r22, 0x0A	; 10
 4de:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodqi4>
 4e2:	90 5d       	subi	r25, 0xD0	; 208
 4e4:	80 2f       	mov	r24, r16
 4e6:	69 2f       	mov	r22, r25
 4e8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
}
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	08 95       	ret

000004f4 <Uart_U10Bit_PutNum>:
//        			===== Uart_U10Bit_PutNum =====
//             		: 시리얼로 unsigned char 형 숫자를 출력
// * 임시적용 *
//----------------------------------------------------------------------------
void Uart_U10Bit_PutNum(U08 Com, U16 NumData)
{
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	f8 2e       	mov	r15, r24
 4fc:	8b 01       	movw	r16, r22
	U16 TempData;

	TempData =  NumData/1000;
	Uart_Putch(Com, TempData+48);			// 1000 자리 무조건 출력
 4fe:	cb 01       	movw	r24, r22
 500:	68 ee       	ldi	r22, 0xE8	; 232
 502:	73 e0       	ldi	r23, 0x03	; 3
 504:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 508:	60 5d       	subi	r22, 0xD0	; 208
 50a:	8f 2d       	mov	r24, r15
 50c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData = (NumData%1000)/100;
	Uart_Putch(Com, TempData+48);			// 100  자리 무조건 출력
 510:	c8 01       	movw	r24, r16
 512:	68 ee       	ldi	r22, 0xE8	; 232
 514:	73 e0       	ldi	r23, 0x03	; 3
 516:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 51a:	64 e6       	ldi	r22, 0x64	; 100
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 522:	60 5d       	subi	r22, 0xD0	; 208
 524:	8f 2d       	mov	r24, r15
 526:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      		// 10   자리 무조건 출력
 52a:	c8 01       	movw	r24, r16
 52c:	64 e6       	ldi	r22, 0x64	; 100
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 534:	6a e0       	ldi	r22, 0x0A	; 10
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 53c:	60 5d       	subi	r22, 0xD0	; 208
 53e:	8f 2d       	mov	r24, r15
 540:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);      		// 1    자리 무조건 출력
 544:	c8 01       	movw	r24, r16
 546:	6a e0       	ldi	r22, 0x0A	; 10
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 54e:	68 2f       	mov	r22, r24
 550:	60 5d       	subi	r22, 0xD0	; 208
 552:	8f 2d       	mov	r24, r15
 554:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
}
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	08 95       	ret

00000560 <Uart_U10Bit_PutNum3>:
//        			===== Uart_U10Bit_PutNum =====
//             		: 시리얼로 unsigned char 형 숫자를 출력
// * 임시적용 *
//----------------------------------------------------------------------------
void Uart_U10Bit_PutNum3(U08 Com, U16 NumData)
{
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	f8 2e       	mov	r15, r24
 568:	8b 01       	movw	r16, r22
	U16 TempData;
	
	TempData = (NumData%1000)/100;
	Uart_Putch(Com, TempData+48);			// 100  자리 무조건 출력
 56a:	cb 01       	movw	r24, r22
 56c:	68 ee       	ldi	r22, 0xE8	; 232
 56e:	73 e0       	ldi	r23, 0x03	; 3
 570:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 574:	64 e6       	ldi	r22, 0x64	; 100
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 57c:	60 5d       	subi	r22, 0xD0	; 208
 57e:	8f 2d       	mov	r24, r15
 580:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      		// 10   자리 무조건 출력
 584:	c8 01       	movw	r24, r16
 586:	64 e6       	ldi	r22, 0x64	; 100
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 58e:	6a e0       	ldi	r22, 0x0A	; 10
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 596:	60 5d       	subi	r22, 0xD0	; 208
 598:	8f 2d       	mov	r24, r15
 59a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);      		// 1    자리 무조건 출력
 59e:	c8 01       	movw	r24, r16
 5a0:	6a e0       	ldi	r22, 0x0A	; 10
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 5a8:	68 2f       	mov	r22, r24
 5aa:	60 5d       	subi	r22, 0xD0	; 208
 5ac:	8f 2d       	mov	r24, r15
 5ae:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
}
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	ff 90       	pop	r15
 5b8:	08 95       	ret

000005ba <Uart_U16Bit_PutNum>:
//----------------------------------------------------------------------------
//          		===== Uart_U16Bit_PutNum =====
//          		: 시리얼로 unsigned char 형 숫자를 출력
//----------------------------------------------------------------------------
void Uart_U16Bit_PutNum(U08 Com, U16 NumData)
{
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	f8 2e       	mov	r15, r24
 5c2:	8b 01       	movw	r16, r22
	U16 TempData;

	TempData = NumData/10000;
	Uart_Putch(Com, TempData+48);      // 10000 	자리 무조건 출력
 5c4:	cb 01       	movw	r24, r22
 5c6:	60 e1       	ldi	r22, 0x10	; 16
 5c8:	77 e2       	ldi	r23, 0x27	; 39
 5ca:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 5ce:	60 5d       	subi	r22, 0xD0	; 208
 5d0:	8f 2d       	mov	r24, r15
 5d2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData = (NumData%10000)/1000;
	Uart_Putch(Com, TempData+48);      // 1000 	자리 무조건 출력
 5d6:	c8 01       	movw	r24, r16
 5d8:	60 e1       	ldi	r22, 0x10	; 16
 5da:	77 e2       	ldi	r23, 0x27	; 39
 5dc:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 5e0:	68 ee       	ldi	r22, 0xE8	; 232
 5e2:	73 e0       	ldi	r23, 0x03	; 3
 5e4:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 5e8:	60 5d       	subi	r22, 0xD0	; 208
 5ea:	8f 2d       	mov	r24, r15
 5ec:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData = (NumData%1000)/100;
	Uart_Putch(Com, TempData+48);      // 100  	자리 무조건 출력
 5f0:	c8 01       	movw	r24, r16
 5f2:	68 ee       	ldi	r22, 0xE8	; 232
 5f4:	73 e0       	ldi	r23, 0x03	; 3
 5f6:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 5fa:	64 e6       	ldi	r22, 0x64	; 100
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 602:	60 5d       	subi	r22, 0xD0	; 208
 604:	8f 2d       	mov	r24, r15
 606:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);      // 10   	자리 무조건 출력
 60a:	c8 01       	movw	r24, r16
 60c:	64 e6       	ldi	r22, 0x64	; 100
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 614:	6a e0       	ldi	r22, 0x0A	; 10
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 61c:	60 5d       	subi	r22, 0xD0	; 208
 61e:	8f 2d       	mov	r24, r15
 620:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	TempData =  NumData%10;
	Uart_Putch(Com, TempData+48);      // 1   	자리 무조건 출력
 624:	c8 01       	movw	r24, r16
 626:	6a e0       	ldi	r22, 0x0A	; 10
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 62e:	68 2f       	mov	r22, r24
 630:	60 5d       	subi	r22, 0xD0	; 208
 632:	8f 2d       	mov	r24, r15
 634:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
}
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	ff 90       	pop	r15
 63e:	08 95       	ret

00000640 <Uart_U16Bit_PutNum_Substance>:
//----------------------------------------------------------------------------
//        			===== Uart_U16Bit_PutNum_Substance =====
//              	: 시리얼로 unsigned int 형 숫자를 출력(실질적인 숫자)
//----------------------------------------------------------------------------
void Uart_U16Bit_PutNum_Substance(U08 Com, U16 NumData)	// 0~65535
{
 640:	af 92       	push	r10
 642:	bf 92       	push	r11
 644:	df 92       	push	r13
 646:	ef 92       	push	r14
 648:	ff 92       	push	r15
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	d8 2e       	mov	r13, r24
 654:	5b 01       	movw	r10, r22
    U16 TempData1000;
    U16 TempData100;
    U16 TempData10;
    U16 TempData1;

    TempData10000 = (NumData/10000);
 656:	cb 01       	movw	r24, r22
 658:	60 e1       	ldi	r22, 0x10	; 16
 65a:	77 e2       	ldi	r23, 0x27	; 39
 65c:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 660:	7b 01       	movw	r14, r22
    if(TempData10000 > 0)							// 10000 자리가 0보다 크면 출력
 662:	61 15       	cp	r22, r1
 664:	71 05       	cpc	r23, r1
 666:	21 f0       	breq	.+8      	; 0x670 <Uart_U16Bit_PutNum_Substance+0x30>
        Uart_Putch(Com, TempData10000+48);
 668:	60 5d       	subi	r22, 0xD0	; 208
 66a:	8d 2d       	mov	r24, r13
 66c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
													// 10000 자리가 0이면 출력하지 않음

    TempData1000 = ((NumData%10000)/1000);			
 670:	c5 01       	movw	r24, r10
 672:	60 e1       	ldi	r22, 0x10	; 16
 674:	77 e2       	ldi	r23, 0x27	; 39
 676:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 67a:	68 ee       	ldi	r22, 0xE8	; 232
 67c:	73 e0       	ldi	r23, 0x03	; 3
 67e:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 682:	8b 01       	movw	r16, r22
    if(TempData1000 > 0)							// 1000  자리가 0보다 크면 출력
 684:	61 15       	cp	r22, r1
 686:	71 05       	cpc	r23, r1
 688:	19 f0       	breq	.+6      	; 0x690 <Uart_U16Bit_PutNum_Substance+0x50>
        Uart_Putch(Com, TempData1000+48);
 68a:	60 5d       	subi	r22, 0xD0	; 208
 68c:	8d 2d       	mov	r24, r13
 68e:	05 c0       	rjmp	.+10     	; 0x69a <Uart_U16Bit_PutNum_Substance+0x5a>
    else											// 1000  자리가 0이면
    {
        if(TempData10000 > 0)						// 10000 자리가 존재하면 0출력
 690:	e1 14       	cp	r14, r1
 692:	f1 04       	cpc	r15, r1
 694:	21 f0       	breq	.+8      	; 0x69e <Uart_U16Bit_PutNum_Substance+0x5e>
            Uart_Putch(Com, TempData1000+48);	    // 10000 자리가 존재하지 않으면 출력하지 않음
 696:	8d 2d       	mov	r24, r13
 698:	60 e3       	ldi	r22, 0x30	; 48
 69a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
    }

    TempData100 = ((NumData%1000)/100);				
 69e:	c5 01       	movw	r24, r10
 6a0:	68 ee       	ldi	r22, 0xE8	; 232
 6a2:	73 e0       	ldi	r23, 0x03	; 3
 6a4:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 6a8:	64 e6       	ldi	r22, 0x64	; 100
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 6b0:	eb 01       	movw	r28, r22
    if(TempData100 > 0)								// 100   자리가 0보다 크면 출력
 6b2:	61 15       	cp	r22, r1
 6b4:	71 05       	cpc	r23, r1
 6b6:	29 f0       	breq	.+10     	; 0x6c2 <Uart_U16Bit_PutNum_Substance+0x82>
        Uart_Putch(Com, TempData100+48);
 6b8:	cb 01       	movw	r24, r22
 6ba:	80 5d       	subi	r24, 0xD0	; 208
 6bc:	68 2f       	mov	r22, r24
 6be:	8d 2d       	mov	r24, r13
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <Uart_U16Bit_PutNum_Substance+0x92>
    else											// 100   자리가 0이면
    {
        if(TempData1000 > 0)						// 1000  자리가 존재하면 0출력
 6c2:	01 15       	cp	r16, r1
 6c4:	11 05       	cpc	r17, r1
 6c6:	19 f4       	brne	.+6      	; 0x6ce <Uart_U16Bit_PutNum_Substance+0x8e>
            Uart_Putch(Com, TempData100+48);
        else										// 1000  자리가 존재하지 않으면						
        {
            if(TempData10000 > 0)					// 10000 자리가 존재하면 0출력
 6c8:	e1 14       	cp	r14, r1
 6ca:	f1 04       	cpc	r15, r1
 6cc:	21 f0       	breq	.+8      	; 0x6d6 <Uart_U16Bit_PutNum_Substance+0x96>
                Uart_Putch(Com, TempData100+48);	// 10000 자리가 존재하지 않으면 출력하지 않음
 6ce:	8d 2d       	mov	r24, r13
 6d0:	60 e3       	ldi	r22, 0x30	; 48
 6d2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
        }											
    }

    TempData10 = ((NumData%100)/10);
 6d6:	c5 01       	movw	r24, r10
 6d8:	64 e6       	ldi	r22, 0x64	; 100
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 6e0:	6a e0       	ldi	r22, 0x0A	; 10
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
    if(TempData10 > 0)								// 10    자리가 0보다 크면 출력
 6e8:	61 15       	cp	r22, r1
 6ea:	71 05       	cpc	r23, r1
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <Uart_U16Bit_PutNum_Substance+0xb4>
        Uart_Putch(Com, TempData10+48);			
 6ee:	60 5d       	subi	r22, 0xD0	; 208
 6f0:	8d 2d       	mov	r24, r13
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <Uart_U16Bit_PutNum_Substance+0xc4>
    else											// 10    자리가 0이면
    {
        if(TempData100 > 0)							// 100   자리가 존재하면 0출력
 6f4:	cd 2b       	or	r28, r29
 6f6:	21 f4       	brne	.+8      	; 0x700 <Uart_U16Bit_PutNum_Substance+0xc0>
            Uart_Putch(Com, TempData10+48);
        else										// 100   자리가 존재하지 않으면
        {
            if(TempData1000 > 0)					// 1000  자리가 존재하면 0출력
 6f8:	01 2b       	or	r16, r17
 6fa:	11 f4       	brne	.+4      	; 0x700 <Uart_U16Bit_PutNum_Substance+0xc0>
                Uart_Putch(Com, TempData10+48);	
            else									// 1000  자리가 존재하지 않으면	
            {
                if(TempData10000 > 0)				// 10000 자리가 존재하면 0출력
 6fc:	ef 28       	or	r14, r15
 6fe:	21 f0       	breq	.+8      	; 0x708 <Uart_U16Bit_PutNum_Substance+0xc8>
                    Uart_Putch(Com, TempData10+48);	// 10000 자리가 존재하지 않으면 출력하지 않음
 700:	8d 2d       	mov	r24, r13
 702:	60 e3       	ldi	r22, 0x30	; 48
 704:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
            }
        }
    }
	TempData1 = NumData%10;
	Uart_Putch(Com, TempData1+48);      // 1자리는 값이 0이라도 그냥 찍는다.
 708:	c5 01       	movw	r24, r10
 70a:	6a e0       	ldi	r22, 0x0A	; 10
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodhi4>
 712:	68 2f       	mov	r22, r24
 714:	60 5d       	subi	r22, 0xD0	; 208
 716:	8d 2d       	mov	r24, r13
 718:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
 }
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	ff 90       	pop	r15
 726:	ef 90       	pop	r14
 728:	df 90       	pop	r13
 72a:	bf 90       	pop	r11
 72c:	af 90       	pop	r10
 72e:	08 95       	ret

00000730 <Uart_ByteToHexPutch>:
//----------------------------------------------------------------------------
//         			===== Uart_ByteToHexPutch =====
//         			:8비트 데이타를 헥사로 출력한다.
//----------------------------------------------------------------------------
void Uart_ByteToHexPutch(U08 Com, U08 ByteData)
{
 730:	ff 92       	push	r15
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	df 93       	push	r29
 738:	cf 93       	push	r28
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	61 97       	sbiw	r28, 0x11	; 17
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	f8 94       	cli
 744:	de bf       	out	0x3e, r29	; 62
 746:	0f be       	out	0x3f, r0	; 63
 748:	cd bf       	out	0x3d, r28	; 61
 74a:	f8 2e       	mov	r15, r24
 74c:	96 2f       	mov	r25, r22
	U08 HexData;
	U08 Hex_Table[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 74e:	de 01       	movw	r26, r28
 750:	11 96       	adiw	r26, 0x01	; 1
 752:	e1 e1       	ldi	r30, 0x11	; 17
 754:	f1 e0       	ldi	r31, 0x01	; 1
 756:	80 e1       	ldi	r24, 0x10	; 16
 758:	01 90       	ld	r0, Z+
 75a:	0d 92       	st	X+, r0
 75c:	81 50       	subi	r24, 0x01	; 1
 75e:	e1 f7       	brne	.-8      	; 0x758 <Uart_ByteToHexPutch+0x28>
	
	HexData = Hex_Table[ByteData>>4];
	Uart_Putch(Com, HexData);            // 상위 비트를 출력
 760:	89 2f       	mov	r24, r25
 762:	82 95       	swap	r24
 764:	8f 70       	andi	r24, 0x0F	; 15
 766:	8e 01       	movw	r16, r28
 768:	0f 5f       	subi	r16, 0xFF	; 255
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	f8 01       	movw	r30, r16
 76e:	e8 0f       	add	r30, r24
 770:	f1 1d       	adc	r31, r1
 772:	8f 2d       	mov	r24, r15
 774:	60 81       	ld	r22, Z
 776:	99 8b       	std	Y+17, r25	; 0x11
 778:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
	
	HexData = Hex_Table[ByteData&0x0F];
	Uart_Putch(Com, HexData);            // 하위 비트를 출력
 77c:	99 89       	ldd	r25, Y+17	; 0x11
 77e:	9f 70       	andi	r25, 0x0F	; 15
 780:	09 0f       	add	r16, r25
 782:	11 1d       	adc	r17, r1
 784:	8f 2d       	mov	r24, r15
 786:	f8 01       	movw	r30, r16
 788:	60 81       	ld	r22, Z
 78a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
}
 78e:	61 96       	adiw	r28, 0x11	; 17
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
 79a:	cf 91       	pop	r28
 79c:	df 91       	pop	r29
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ff 90       	pop	r15
 7a4:	08 95       	ret

000007a6 <Uart_WordToHexPutch>:
//         			===== Uart_WordToHexPutch =====
//         			:16비트 데이타를 헥사로 출력한다.
//	*** 수정 : 3자리로 출력
//----------------------------------------------------------------------------
void Uart_WordToHexPutch(U08 Com, U16 WordData)
{
 7a6:	df 92       	push	r13
 7a8:	ef 92       	push	r14
 7aa:	ff 92       	push	r15
 7ac:	0f 93       	push	r16
 7ae:	1f 93       	push	r17
 7b0:	df 93       	push	r29
 7b2:	cf 93       	push	r28
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
 7b8:	60 97       	sbiw	r28, 0x10	; 16
 7ba:	0f b6       	in	r0, 0x3f	; 63
 7bc:	f8 94       	cli
 7be:	de bf       	out	0x3e, r29	; 62
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	cd bf       	out	0x3d, r28	; 61
 7c4:	d8 2e       	mov	r13, r24
 7c6:	7b 01       	movw	r14, r22
	U08 HexData;
	U08 Hex_Table[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 7c8:	de 01       	movw	r26, r28
 7ca:	11 96       	adiw	r26, 0x01	; 1
 7cc:	e1 e0       	ldi	r30, 0x01	; 1
 7ce:	f1 e0       	ldi	r31, 0x01	; 1
 7d0:	80 e1       	ldi	r24, 0x10	; 16
 7d2:	01 90       	ld	r0, Z+
 7d4:	0d 92       	st	X+, r0
 7d6:	81 50       	subi	r24, 0x01	; 1
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <Uart_WordToHexPutch+0x2c>
	

	HexData = Hex_Table[(WordData>>8) & 0x000F];
	Uart_Putch(Com, HexData);            // 상위 비트를 출력
 7da:	ef 2d       	mov	r30, r15
 7dc:	ff 27       	eor	r31, r31
 7de:	ef 70       	andi	r30, 0x0F	; 15
 7e0:	f0 70       	andi	r31, 0x00	; 0
 7e2:	8e 01       	movw	r16, r28
 7e4:	0f 5f       	subi	r16, 0xFF	; 255
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	e0 0f       	add	r30, r16
 7ea:	f1 1f       	adc	r31, r17
 7ec:	8d 2d       	mov	r24, r13
 7ee:	60 81       	ld	r22, Z
 7f0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>

	HexData = Hex_Table[(WordData>>4) & 0x000F];
	Uart_Putch(Com, HexData);            // 상위 비트를 출력
 7f4:	f7 01       	movw	r30, r14
 7f6:	94 e0       	ldi	r25, 0x04	; 4
 7f8:	f6 95       	lsr	r31
 7fa:	e7 95       	ror	r30
 7fc:	9a 95       	dec	r25
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <Uart_WordToHexPutch+0x52>
 800:	ef 70       	andi	r30, 0x0F	; 15
 802:	f0 70       	andi	r31, 0x00	; 0
 804:	e0 0f       	add	r30, r16
 806:	f1 1f       	adc	r31, r17
 808:	8d 2d       	mov	r24, r13
 80a:	60 81       	ld	r22, Z
 80c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>

    HexData = Hex_Table[WordData & 0x000F];
	Uart_Putch(Com, HexData);            // 하위 비트를 출력
 810:	8f e0       	ldi	r24, 0x0F	; 15
 812:	e8 22       	and	r14, r24
 814:	ff 24       	eor	r15, r15
 816:	0e 0d       	add	r16, r14
 818:	1f 1d       	adc	r17, r15
 81a:	8d 2d       	mov	r24, r13
 81c:	f8 01       	movw	r30, r16
 81e:	60 81       	ld	r22, Z
 820:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_Putch>
}
 824:	60 96       	adiw	r28, 0x10	; 16
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	cf 91       	pop	r28
 832:	df 91       	pop	r29
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	df 90       	pop	r13
 83e:	08 95       	ret

00000840 <exit>:
 840:	f8 94       	cli
 842:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <_exit>

00000846 <__udivmodqi4>:
 846:	99 1b       	sub	r25, r25
 848:	79 e0       	ldi	r23, 0x09	; 9
 84a:	04 c0       	rjmp	.+8      	; 0x854 <__udivmodqi4_ep>

0000084c <__udivmodqi4_loop>:
 84c:	99 1f       	adc	r25, r25
 84e:	96 17       	cp	r25, r22
 850:	08 f0       	brcs	.+2      	; 0x854 <__udivmodqi4_ep>
 852:	96 1b       	sub	r25, r22

00000854 <__udivmodqi4_ep>:
 854:	88 1f       	adc	r24, r24
 856:	7a 95       	dec	r23
 858:	c9 f7       	brne	.-14     	; 0x84c <__udivmodqi4_loop>
 85a:	80 95       	com	r24
 85c:	08 95       	ret

0000085e <__udivmodhi4>:
 85e:	aa 1b       	sub	r26, r26
 860:	bb 1b       	sub	r27, r27
 862:	51 e1       	ldi	r21, 0x11	; 17
 864:	07 c0       	rjmp	.+14     	; 0x874 <__udivmodhi4_ep>

00000866 <__udivmodhi4_loop>:
 866:	aa 1f       	adc	r26, r26
 868:	bb 1f       	adc	r27, r27
 86a:	a6 17       	cp	r26, r22
 86c:	b7 07       	cpc	r27, r23
 86e:	10 f0       	brcs	.+4      	; 0x874 <__udivmodhi4_ep>
 870:	a6 1b       	sub	r26, r22
 872:	b7 0b       	sbc	r27, r23

00000874 <__udivmodhi4_ep>:
 874:	88 1f       	adc	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	5a 95       	dec	r21
 87a:	a9 f7       	brne	.-22     	; 0x866 <__udivmodhi4_loop>
 87c:	80 95       	com	r24
 87e:	90 95       	com	r25
 880:	bc 01       	movw	r22, r24
 882:	cd 01       	movw	r24, r26
 884:	08 95       	ret

00000886 <__udivmodsi4>:
 886:	a1 e2       	ldi	r26, 0x21	; 33
 888:	1a 2e       	mov	r1, r26
 88a:	aa 1b       	sub	r26, r26
 88c:	bb 1b       	sub	r27, r27
 88e:	fd 01       	movw	r30, r26
 890:	0d c0       	rjmp	.+26     	; 0x8ac <__udivmodsi4_ep>

00000892 <__udivmodsi4_loop>:
 892:	aa 1f       	adc	r26, r26
 894:	bb 1f       	adc	r27, r27
 896:	ee 1f       	adc	r30, r30
 898:	ff 1f       	adc	r31, r31
 89a:	a2 17       	cp	r26, r18
 89c:	b3 07       	cpc	r27, r19
 89e:	e4 07       	cpc	r30, r20
 8a0:	f5 07       	cpc	r31, r21
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <__udivmodsi4_ep>
 8a4:	a2 1b       	sub	r26, r18
 8a6:	b3 0b       	sbc	r27, r19
 8a8:	e4 0b       	sbc	r30, r20
 8aa:	f5 0b       	sbc	r31, r21

000008ac <__udivmodsi4_ep>:
 8ac:	66 1f       	adc	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	1a 94       	dec	r1
 8b6:	69 f7       	brne	.-38     	; 0x892 <__udivmodsi4_loop>
 8b8:	60 95       	com	r22
 8ba:	70 95       	com	r23
 8bc:	80 95       	com	r24
 8be:	90 95       	com	r25
 8c0:	9b 01       	movw	r18, r22
 8c2:	ac 01       	movw	r20, r24
 8c4:	bd 01       	movw	r22, r26
 8c6:	cf 01       	movw	r24, r30
 8c8:	08 95       	ret

000008ca <_exit>:
 8ca:	f8 94       	cli

000008cc <__stop_program>:
 8cc:	ff cf       	rjmp	.-2      	; 0x8cc <__stop_program>
