
interrupt_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001f6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000041  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000b0  00000000  00000000  00000257  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000067  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000125  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000086  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_1>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  c6:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_1>:

int num=0;


ISR(INT0_vect)
{	
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	num=1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 01 01 	sts	0x0101, r25
  e4:	80 93 00 01 	sts	0x0100, r24
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_2>:

ISR(INT1_vect)
{	
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	
	num=2;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 01 01 	sts	0x0101, r25
 10c:	80 93 00 01 	sts	0x0100, r24
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:



int main(void)
{	
	sbi(SREG,7);
 11e:	8f b7       	in	r24, 0x3f	; 63
 120:	80 68       	ori	r24, 0x80	; 128
 122:	8f bf       	out	0x3f, r24	; 63
	sbi(EIMSK,INT0);  
 124:	89 b7       	in	r24, 0x39	; 57
 126:	81 60       	ori	r24, 0x01	; 1
 128:	89 bf       	out	0x39, r24	; 57
	sbi(EIMSK,INT1);  
 12a:	89 b7       	in	r24, 0x39	; 57
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	89 bf       	out	0x39, r24	; 57
	EICRA = 0x0A; 
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	80 93 6a 00 	sts	0x006A, r24

	DDRC=0xff;   
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	84 bb       	out	0x14, r24	; 20
	
	
	PORTC=0x00;
 13a:	15 ba       	out	0x15, r1	; 21
	while(1)
	{
	
		if(num==1)
 13c:	20 91 00 01 	lds	r18, 0x0100
 140:	30 91 01 01 	lds	r19, 0x0101
		{	
			if(PORTC==0x00)
			PORTC=1;
			else if(PORTC==0x80)
			PORTC=1;
 144:	91 e0       	ldi	r25, 0x01	; 1
		if(num==2)
		{
			if(PORTC==0x80)
			PORTC=40;
			else if(PORTC==0)
			PORTC=80;
 146:	50 e5       	ldi	r21, 0x50	; 80
			PORTC<<1;
		}
		if(num==2)
		{
			if(PORTC==0x80)
			PORTC=40;
 148:	48 e2       	ldi	r20, 0x28	; 40
	
	PORTC=0x00;
	while(1)
	{
	
		if(num==1)
 14a:	21 30       	cpi	r18, 0x01	; 1
 14c:	31 05       	cpc	r19, r1
 14e:	41 f4       	brne	.+16     	; 0x160 <main+0x42>
		{	
			if(PORTC==0x00)
 150:	85 b3       	in	r24, 0x15	; 21
 152:	88 23       	and	r24, r24
 154:	19 f0       	breq	.+6      	; 0x15c <main+0x3e>
			PORTC=1;
			else if(PORTC==0x80)
 156:	85 b3       	in	r24, 0x15	; 21
 158:	80 38       	cpi	r24, 0x80	; 128
 15a:	79 f4       	brne	.+30     	; 0x17a <main+0x5c>
			PORTC=1;
 15c:	95 bb       	out	0x15, r25	; 21
 15e:	f5 cf       	rjmp	.-22     	; 0x14a <main+0x2c>
			else
			PORTC<<1;
		}
		if(num==2)
 160:	22 30       	cpi	r18, 0x02	; 2
 162:	31 05       	cpc	r19, r1
 164:	91 f7       	brne	.-28     	; 0x14a <main+0x2c>
		{
			if(PORTC==0x80)
 166:	85 b3       	in	r24, 0x15	; 21
 168:	80 38       	cpi	r24, 0x80	; 128
 16a:	11 f4       	brne	.+4      	; 0x170 <main+0x52>
			PORTC=40;
 16c:	45 bb       	out	0x15, r20	; 21
 16e:	ed cf       	rjmp	.-38     	; 0x14a <main+0x2c>
			else if(PORTC==0)
 170:	85 b3       	in	r24, 0x15	; 21
 172:	88 23       	and	r24, r24
 174:	11 f4       	brne	.+4      	; 0x17a <main+0x5c>
			PORTC=80;
 176:	55 bb       	out	0x15, r21	; 21
 178:	e8 cf       	rjmp	.-48     	; 0x14a <main+0x2c>
			else
			PORTC>>1;
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	e6 cf       	rjmp	.-52     	; 0x14a <main+0x2c>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
