
mega8_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000610  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000684  2**0
                  ALLOC
  2 .stab         00002130  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006a6  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00002e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000cc  00000000  00000000  00002e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000031e  00000000  00000000  00002f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a3  00000000  00000000  00003264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000395  00000000  00000000  00003407  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  0000379c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017c  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00003ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 36       	cpi	r26, 0x65	; 101
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	80 d0       	rcall	.+256    	; 0x144 <main>
  44:	e3 c0       	rjmp	.+454    	; 0x20c <exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_11>:
unsigned int Read_RXC;

unsigned char Instruction;

ISR(USART_RXC_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
	Read_RXC = UDR; //Read UDR makes rxcflag 0
  54:	8c b1       	in	r24, 0x0c	; 12
  56:	80 93 60 00 	sts	0x0060, r24
  5a:	10 92 61 00 	sts	0x0061, r1
	//Uart_Putch(UDR);

//	if( Read_RXC == 1)		//from Sig_to8[0]
//	{	
	//	Uart_Putch(1);
		Instruction = 1;
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	80 93 64 00 	sts	0x0064, r24
			//	}
	   	//	}
	


}
  64:	8f 91       	pop	r24
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

00000070 <ADC_Init>:
	return 0;
}

void ADC_Init(void)
{
	DDRC = 0x00; 			   //ADC포트 입력 설정
  70:	14 ba       	out	0x14, r1	; 20

	ADMUX = 0x40;
  72:	80 e4       	ldi	r24, 0x40	; 64
  74:	87 b9       	out	0x07, r24	; 7
	cbi(ADMUX, ADLAR);
  76:	3d 98       	cbi	0x07, 5	; 7
	ADCSRA = 0x00;			   ////AVCC단자로 입력전압 사용 및 레지스터 초기화 
  78:	16 b8       	out	0x06, r1	; 6




	sbi( ADCSRA, ADPS0 );
  7a:	30 9a       	sbi	0x06, 0	; 6
	sbi( ADCSRA, ADPS1 );
  7c:	31 9a       	sbi	0x06, 1	; 6
	sbi( ADCSRA, ADPS2 );		//프리스케일러 2분주  
  7e:	32 9a       	sbi	0x06, 2	; 6

	//sbi( ADCSRA, ADFR );			// 프리러닝 모드
	sbi( ADCSRA, ADEN );		   	// ADC 인에이블
  80:	37 9a       	sbi	0x06, 7	; 6
	//sbi( ADCSRA, ADIE );			// ADC interrupt enable
	//ADMUX = 1;

	//sbi( ADCSRA, ADSC );
}
  82:	08 95       	ret

00000084 <Uart_Init>:

void Uart_Init(void)
{
	
    //---------------------------- UART 초기화 --------------------------------
		cbi(SREG,7);
  84:	8f b7       	in	r24, 0x3f	; 63
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	8f bf       	out	0x3f, r24	; 63

		
		UCSRA = (0<<RXC) | (1<<UDRE);		// 수신,송신 상태비트 초기화
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	8b b9       	out	0x0b, r24	; 11
        UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE) | (0<<UCSZ0) ;  		// 수신인터럽트,수신,송신 기능 활성화
  8e:	88 e9       	ldi	r24, 0x98	; 152
  90:	8a b9       	out	0x0a, r24	; 10
		UCSRC = (1<<UCSZ1) | (1<<UCSZ0) | 0x80;					// START 1비트/DATA 8비트/STOP 1비트
  92:	86 e8       	ldi	r24, 0x86	; 134
  94:	80 bd       	out	0x20, r24	; 32
		
		cbi( DDRD, 0 );                         // RXD 핀 입력으로 설정
  96:	88 98       	cbi	0x11, 0	; 17
		sbi( DDRD, 1 );                         // TXD 핀 출력으로 설정
  98:	89 9a       	sbi	0x11, 1	; 17

		UBRRH = 0;
  9a:	10 bc       	out	0x20, r1	; 32
		UBRRL = 51; //1MHZ:9600:6,48:12,24:25  8MHZ:9600:51 4800:103 2400:207 5.76:8	  16MHZ:9600:103
  9c:	83 e3       	ldi	r24, 0x33	; 51
  9e:	89 b9       	out	0x09, r24	; 9

		sbi(SREG,7);
  a0:	8f b7       	in	r24, 0x3f	; 63
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	8f bf       	out	0x3f, r24	; 63
}
  a6:	08 95       	ret

000000a8 <Read_ADC>:

unsigned int Read_ADC( unsigned char ADC_Input )		//ONLY ONCE SENSING  NO SEQUENTIAL.
{
	//unsigned int data,dummy;
	ADMUX |= ADC_Input;					//사용자 설정 (ADC값 입력)
  a8:	97 b1       	in	r25, 0x07	; 7
  aa:	98 2b       	or	r25, r24
  ac:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= 0x40;						//ADC START Conversion
  ae:	36 9a       	sbi	0x06, 6	; 6
	
	while( ( ADCSRA & 0x10 ) == 0 ) ;     //ADC interrupt flag check
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <Read_ADC+0x8>
	{
	//	cbi( ADCSRA, ADEN );			//ADC OFF   NOT SURE ? SBI DDER IS BETTER?
	//	data=ADCL;
	//	dummy = ADCH;
		return ADC;							//ADC값 반환  RETURN MAKES DONE?
  b4:	24 b1       	in	r18, 0x04	; 4
  b6:	35 b1       	in	r19, 0x05	; 5
		
	}
}
  b8:	c9 01       	movw	r24, r18
  ba:	08 95       	ret

000000bc <Read_ADC_NOSTOP>:

unsigned int Read_ADC_NOSTOP( unsigned char ADC_Input )		
{
	ADMUX |= ADC_Input;					//사용자 설정 (ADC값 입력)
  bc:	97 b1       	in	r25, 0x07	; 7
  be:	98 2b       	or	r25, r24
  c0:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= 0x40;						//ADC START Conversion
  c2:	36 9a       	sbi	0x06, 6	; 6
	
	while( ( ADCSRA & 0x10 ) == 0 ) ;     //ADC interrupt flag check
  c4:	34 9b       	sbis	0x06, 4	; 6
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <Read_ADC_NOSTOP+0x8>
	{			
		return ADC;							//ADC값 반환  RETURN MAKES DONE?
  c8:	24 b1       	in	r18, 0x04	; 4
  ca:	35 b1       	in	r19, 0x05	; 5
	}
}
  cc:	c9 01       	movw	r24, r18
  ce:	08 95       	ret

000000d0 <Uart_Putch>:

void Uart_Putch(unsigned int PutData)
{

			while(!( UCSRA & (1<<UDRE)) );    // 송신가능시점까지 대기
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <Uart_Putch>
			UDR = PutData;                     // 데이터를 전송한다
  d4:	8c b9       	out	0x0c, r24	; 12
		
}
  d6:	08 95       	ret

000000d8 <Uart_U16Bit_PutNum>:

void Uart_U16Bit_PutNum(unsigned int NumData)
{
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
	//NumData = 1024;
	unsigned int TempData;

	TempData = NumData/10000;
  e6:	60 e1       	ldi	r22, 0x10	; 16
  e8:	77 e2       	ldi	r23, 0x27	; 39
  ea:	7c d2       	rcall	.+1272   	; 0x5e4 <__udivmodhi4>
  ec:	7c 01       	movw	r14, r24
	Uart_Putch(TempData+48);		
  ee:	cb 01       	movw	r24, r22
  f0:	c0 96       	adiw	r24, 0x30	; 48
  f2:	ee df       	rcall	.-36     	; 0xd0 <Uart_Putch>

	TempData = (NumData%10000)/1000;
  f4:	08 ee       	ldi	r16, 0xE8	; 232
  f6:	13 e0       	ldi	r17, 0x03	; 3
  f8:	c7 01       	movw	r24, r14
  fa:	b8 01       	movw	r22, r16
  fc:	73 d2       	rcall	.+1254   	; 0x5e4 <__udivmodhi4>
	Uart_Putch(TempData+48);      // 1000 	자리 무조건 출력
  fe:	cb 01       	movw	r24, r22
 100:	c0 96       	adiw	r24, 0x30	; 48
 102:	e6 df       	rcall	.-52     	; 0xd0 <Uart_Putch>
	
	TempData = (NumData%1000)/100;
 104:	ce 01       	movw	r24, r28
 106:	b8 01       	movw	r22, r16
 108:	6d d2       	rcall	.+1242   	; 0x5e4 <__udivmodhi4>
 10a:	04 e6       	ldi	r16, 0x64	; 100
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	b8 01       	movw	r22, r16
 110:	69 d2       	rcall	.+1234   	; 0x5e4 <__udivmodhi4>
	Uart_Putch(TempData+48);      // 100  	자리 무조건 출력
 112:	cb 01       	movw	r24, r22
 114:	c0 96       	adiw	r24, 0x30	; 48
 116:	dc df       	rcall	.-72     	; 0xd0 <Uart_Putch>
	
	TempData = (NumData%100)/10;
 118:	ce 01       	movw	r24, r28
 11a:	b8 01       	movw	r22, r16
 11c:	63 d2       	rcall	.+1222   	; 0x5e4 <__udivmodhi4>
 11e:	0a e0       	ldi	r16, 0x0A	; 10
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	b8 01       	movw	r22, r16
 124:	5f d2       	rcall	.+1214   	; 0x5e4 <__udivmodhi4>
	Uart_Putch(TempData+48);      // 10   	자리 무조건 출력
 126:	cb 01       	movw	r24, r22
 128:	c0 96       	adiw	r24, 0x30	; 48
 12a:	d2 df       	rcall	.-92     	; 0xd0 <Uart_Putch>
	
	TempData =  NumData%10;
 12c:	ce 01       	movw	r24, r28
 12e:	b8 01       	movw	r22, r16
 130:	59 d2       	rcall	.+1202   	; 0x5e4 <__udivmodhi4>
	Uart_Putch(TempData+48);      // 1   	자리 무조건 출력
 132:	c0 96       	adiw	r24, 0x30	; 48
 134:	cd df       	rcall	.-102    	; 0xd0 <Uart_Putch>


}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	08 95       	ret

00000144 <main>:


}
int main(void)
{
	ADC_Init();
 144:	95 df       	rcall	.-214    	; 0x70 <ADC_Init>
	Uart_Init();
 146:	9e df       	rcall	.-196    	; 0x84 <Uart_Init>


	while(1)
	{		
	Read_ADC(0);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	ae df       	rcall	.-164    	; 0xa8 <Read_ADC>
//	Uart_Putch(Read_ADC(0));
	Dis = (( (11.65/(( ADC/204.8) - 0.147 )) - 0.42 ) * 10)-4;
 14c:	64 b1       	in	r22, 0x04	; 4
 14e:	75 b1       	in	r23, 0x05	; 5
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	56 d1       	rcall	.+684    	; 0x402 <__floatunsisf>
 156:	2d ec       	ldi	r18, 0xCD	; 205
 158:	3c ec       	ldi	r19, 0xCC	; 204
 15a:	4c e4       	ldi	r20, 0x4C	; 76
 15c:	53 e4       	ldi	r21, 0x43	; 67
 15e:	bd d0       	rcall	.+378    	; 0x2da <__divsf3>
 160:	2b e2       	ldi	r18, 0x2B	; 43
 162:	37 e8       	ldi	r19, 0x87	; 135
 164:	46 e1       	ldi	r20, 0x16	; 22
 166:	5e e3       	ldi	r21, 0x3E	; 62
 168:	53 d0       	rcall	.+166    	; 0x210 <__subsf3>
 16a:	9b 01       	movw	r18, r22
 16c:	ac 01       	movw	r20, r24
 16e:	66 e6       	ldi	r22, 0x66	; 102
 170:	76 e6       	ldi	r23, 0x66	; 102
 172:	8a e3       	ldi	r24, 0x3A	; 58
 174:	91 e4       	ldi	r25, 0x41	; 65
 176:	b1 d0       	rcall	.+354    	; 0x2da <__divsf3>
 178:	2d e3       	ldi	r18, 0x3D	; 61
 17a:	3a e0       	ldi	r19, 0x0A	; 10
 17c:	47 ed       	ldi	r20, 0xD7	; 215
 17e:	5e e3       	ldi	r21, 0x3E	; 62
 180:	47 d0       	rcall	.+142    	; 0x210 <__subsf3>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e2       	ldi	r20, 0x20	; 32
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	c9 d1       	rcall	.+914    	; 0x51e <__mulsf3>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	50 e4       	ldi	r21, 0x40	; 64
 194:	3d d0       	rcall	.+122    	; 0x210 <__subsf3>
 196:	09 d1       	rcall	.+530    	; 0x3aa <__fixunssfsi>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	90 93 63 00 	sts	0x0063, r25
 1a0:	80 93 62 00 	sts	0x0062, r24
	Uart_U16Bit_PutNum(Dis);
 1a4:	99 df       	rcall	.-206    	; 0xd8 <Uart_U16Bit_PutNum>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	99 e6       	ldi	r25, 0x69	; 105
 1aa:	a8 e1       	ldi	r26, 0x18	; 24
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	a0 40       	sbci	r26, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x68>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x72>
 1b6:	00 00       	nop
 1b8:	c7 cf       	rjmp	.-114    	; 0x148 <main+0x4>

000001ba <delay_us>:

void delay_us(unsigned char time_us) // time delay(us)
{
	register unsigned int i;
	
	for(i = 0; i < time_us; i++) // 4 cycle +
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <delay_us+0x10>
	{
	asm volatile(" PUSH R0 "); // 2 cycle +		
 1c2:	0f 92       	push	r0
	asm volatile(" POP R0 "); // 2 cycle    = 8cycle 1 us * 8 = 8us
 1c4:	0f 90       	pop	r0

void delay_us(unsigned char time_us) // time delay(us)
{
	register unsigned int i;
	
	for(i = 0; i < time_us; i++) // 4 cycle +
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	28 17       	cp	r18, r24
 1cc:	39 07       	cpc	r19, r25
 1ce:	c8 f3       	brcs	.-14     	; 0x1c2 <delay_us+0x8>
	asm volatile(" PUSH R0 "); // 2 cycle +
	asm volatile(" POP R0 "); // 2 cycle +
	asm volatile(" PUSH R0 "); // 2 cycle +		
	asm volatile(" POP R0 "); // 2 cycle = 16 cycle = 1 us for 16MHz  1cycle = 0.0625 us
	}*/
}
 1d0:	08 95       	ret

000001d2 <delay_ms>:

void delay_ms(unsigned long time_ms)       
{ 
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	7b 01       	movw	r14, r22
 1e0:	8c 01       	movw	r16, r24

    register unsigned int i;

    for(i = 0; i < time_ms; i++)
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <delay_ms+0x1c>

    { 
      delay_us(125); 	//0.001s
 1e8:	8d e7       	ldi	r24, 0x7D	; 125
 1ea:	e7 df       	rcall	.-50     	; 0x1ba <delay_us>
void delay_ms(unsigned long time_ms)       
{ 

    register unsigned int i;

    for(i = 0; i < time_ms; i++)
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	ce 01       	movw	r24, r28
 1f0:	a0 e0       	ldi	r26, 0x00	; 0
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	8e 15       	cp	r24, r14
 1f6:	9f 05       	cpc	r25, r15
 1f8:	a0 07       	cpc	r26, r16
 1fa:	b1 07       	cpc	r27, r17
 1fc:	a8 f3       	brcs	.-22     	; 0x1e8 <delay_ms+0x16>
	//	delay_us(250);
     //	delay_us(250);
	//	delay_us(250); //1ms
    }

}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	08 95       	ret

0000020c <exit>:
 20c:	f8 94       	cli
 20e:	fe c1       	rjmp	.+1020   	; 0x60c <_exit>

00000210 <__subsf3>:
 210:	50 58       	subi	r21, 0x80	; 128

00000212 <__addsf3>:
 212:	bb 27       	eor	r27, r27
 214:	aa 27       	eor	r26, r26
 216:	0e d0       	rcall	.+28     	; 0x234 <__addsf3x>
 218:	48 c1       	rjmp	.+656    	; 0x4aa <__fp_round>
 21a:	39 d1       	rcall	.+626    	; 0x48e <__fp_pscA>
 21c:	30 f0       	brcs	.+12     	; 0x22a <__addsf3+0x18>
 21e:	3e d1       	rcall	.+636    	; 0x49c <__fp_pscB>
 220:	20 f0       	brcs	.+8      	; 0x22a <__addsf3+0x18>
 222:	31 f4       	brne	.+12     	; 0x230 <__addsf3+0x1e>
 224:	9f 3f       	cpi	r25, 0xFF	; 255
 226:	11 f4       	brne	.+4      	; 0x22c <__addsf3+0x1a>
 228:	1e f4       	brtc	.+6      	; 0x230 <__addsf3+0x1e>
 22a:	2e c1       	rjmp	.+604    	; 0x488 <__fp_nan>
 22c:	0e f4       	brtc	.+2      	; 0x230 <__addsf3+0x1e>
 22e:	e0 95       	com	r30
 230:	e7 fb       	bst	r30, 7
 232:	24 c1       	rjmp	.+584    	; 0x47c <__fp_inf>

00000234 <__addsf3x>:
 234:	e9 2f       	mov	r30, r25
 236:	4a d1       	rcall	.+660    	; 0x4cc <__fp_split3>
 238:	80 f3       	brcs	.-32     	; 0x21a <__addsf3+0x8>
 23a:	ba 17       	cp	r27, r26
 23c:	62 07       	cpc	r22, r18
 23e:	73 07       	cpc	r23, r19
 240:	84 07       	cpc	r24, r20
 242:	95 07       	cpc	r25, r21
 244:	18 f0       	brcs	.+6      	; 0x24c <__addsf3x+0x18>
 246:	71 f4       	brne	.+28     	; 0x264 <__addsf3x+0x30>
 248:	9e f5       	brtc	.+102    	; 0x2b0 <__addsf3x+0x7c>
 24a:	62 c1       	rjmp	.+708    	; 0x510 <__fp_zero>
 24c:	0e f4       	brtc	.+2      	; 0x250 <__addsf3x+0x1c>
 24e:	e0 95       	com	r30
 250:	0b 2e       	mov	r0, r27
 252:	ba 2f       	mov	r27, r26
 254:	a0 2d       	mov	r26, r0
 256:	0b 01       	movw	r0, r22
 258:	b9 01       	movw	r22, r18
 25a:	90 01       	movw	r18, r0
 25c:	0c 01       	movw	r0, r24
 25e:	ca 01       	movw	r24, r20
 260:	a0 01       	movw	r20, r0
 262:	11 24       	eor	r1, r1
 264:	ff 27       	eor	r31, r31
 266:	59 1b       	sub	r21, r25
 268:	99 f0       	breq	.+38     	; 0x290 <__addsf3x+0x5c>
 26a:	59 3f       	cpi	r21, 0xF9	; 249
 26c:	50 f4       	brcc	.+20     	; 0x282 <__addsf3x+0x4e>
 26e:	50 3e       	cpi	r21, 0xE0	; 224
 270:	68 f1       	brcs	.+90     	; 0x2cc <__addsf3x+0x98>
 272:	1a 16       	cp	r1, r26
 274:	f0 40       	sbci	r31, 0x00	; 0
 276:	a2 2f       	mov	r26, r18
 278:	23 2f       	mov	r18, r19
 27a:	34 2f       	mov	r19, r20
 27c:	44 27       	eor	r20, r20
 27e:	58 5f       	subi	r21, 0xF8	; 248
 280:	f3 cf       	rjmp	.-26     	; 0x268 <__addsf3x+0x34>
 282:	46 95       	lsr	r20
 284:	37 95       	ror	r19
 286:	27 95       	ror	r18
 288:	a7 95       	ror	r26
 28a:	f0 40       	sbci	r31, 0x00	; 0
 28c:	53 95       	inc	r21
 28e:	c9 f7       	brne	.-14     	; 0x282 <__addsf3x+0x4e>
 290:	7e f4       	brtc	.+30     	; 0x2b0 <__addsf3x+0x7c>
 292:	1f 16       	cp	r1, r31
 294:	ba 0b       	sbc	r27, r26
 296:	62 0b       	sbc	r22, r18
 298:	73 0b       	sbc	r23, r19
 29a:	84 0b       	sbc	r24, r20
 29c:	ba f0       	brmi	.+46     	; 0x2cc <__addsf3x+0x98>
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	a1 f0       	breq	.+40     	; 0x2ca <__addsf3x+0x96>
 2a2:	ff 0f       	add	r31, r31
 2a4:	bb 1f       	adc	r27, r27
 2a6:	66 1f       	adc	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	88 1f       	adc	r24, r24
 2ac:	c2 f7       	brpl	.-16     	; 0x29e <__addsf3x+0x6a>
 2ae:	0e c0       	rjmp	.+28     	; 0x2cc <__addsf3x+0x98>
 2b0:	ba 0f       	add	r27, r26
 2b2:	62 1f       	adc	r22, r18
 2b4:	73 1f       	adc	r23, r19
 2b6:	84 1f       	adc	r24, r20
 2b8:	48 f4       	brcc	.+18     	; 0x2cc <__addsf3x+0x98>
 2ba:	87 95       	ror	r24
 2bc:	77 95       	ror	r23
 2be:	67 95       	ror	r22
 2c0:	b7 95       	ror	r27
 2c2:	f7 95       	ror	r31
 2c4:	9e 3f       	cpi	r25, 0xFE	; 254
 2c6:	08 f0       	brcs	.+2      	; 0x2ca <__addsf3x+0x96>
 2c8:	b3 cf       	rjmp	.-154    	; 0x230 <__addsf3+0x1e>
 2ca:	93 95       	inc	r25
 2cc:	88 0f       	add	r24, r24
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <__addsf3x+0x9e>
 2d0:	99 27       	eor	r25, r25
 2d2:	ee 0f       	add	r30, r30
 2d4:	97 95       	ror	r25
 2d6:	87 95       	ror	r24
 2d8:	08 95       	ret

000002da <__divsf3>:
 2da:	0c d0       	rcall	.+24     	; 0x2f4 <__divsf3x>
 2dc:	e6 c0       	rjmp	.+460    	; 0x4aa <__fp_round>
 2de:	de d0       	rcall	.+444    	; 0x49c <__fp_pscB>
 2e0:	40 f0       	brcs	.+16     	; 0x2f2 <__divsf3+0x18>
 2e2:	d5 d0       	rcall	.+426    	; 0x48e <__fp_pscA>
 2e4:	30 f0       	brcs	.+12     	; 0x2f2 <__divsf3+0x18>
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <__divsf3+0x16>
 2e8:	5f 3f       	cpi	r21, 0xFF	; 255
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <__divsf3+0x18>
 2ec:	c7 c0       	rjmp	.+398    	; 0x47c <__fp_inf>
 2ee:	51 11       	cpse	r21, r1
 2f0:	10 c1       	rjmp	.+544    	; 0x512 <__fp_szero>
 2f2:	ca c0       	rjmp	.+404    	; 0x488 <__fp_nan>

000002f4 <__divsf3x>:
 2f4:	eb d0       	rcall	.+470    	; 0x4cc <__fp_split3>
 2f6:	98 f3       	brcs	.-26     	; 0x2de <__divsf3+0x4>

000002f8 <__divsf3_pse>:
 2f8:	99 23       	and	r25, r25
 2fa:	c9 f3       	breq	.-14     	; 0x2ee <__divsf3+0x14>
 2fc:	55 23       	and	r21, r21
 2fe:	b1 f3       	breq	.-20     	; 0x2ec <__divsf3+0x12>
 300:	95 1b       	sub	r25, r21
 302:	55 0b       	sbc	r21, r21
 304:	bb 27       	eor	r27, r27
 306:	aa 27       	eor	r26, r26
 308:	62 17       	cp	r22, r18
 30a:	73 07       	cpc	r23, r19
 30c:	84 07       	cpc	r24, r20
 30e:	38 f0       	brcs	.+14     	; 0x31e <__divsf3_pse+0x26>
 310:	9f 5f       	subi	r25, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	44 1f       	adc	r20, r20
 31a:	aa 1f       	adc	r26, r26
 31c:	a9 f3       	breq	.-22     	; 0x308 <__divsf3_pse+0x10>
 31e:	33 d0       	rcall	.+102    	; 0x386 <__divsf3_pse+0x8e>
 320:	0e 2e       	mov	r0, r30
 322:	3a f0       	brmi	.+14     	; 0x332 <__divsf3_pse+0x3a>
 324:	e0 e8       	ldi	r30, 0x80	; 128
 326:	30 d0       	rcall	.+96     	; 0x388 <__divsf3_pse+0x90>
 328:	91 50       	subi	r25, 0x01	; 1
 32a:	50 40       	sbci	r21, 0x00	; 0
 32c:	e6 95       	lsr	r30
 32e:	00 1c       	adc	r0, r0
 330:	ca f7       	brpl	.-14     	; 0x324 <__divsf3_pse+0x2c>
 332:	29 d0       	rcall	.+82     	; 0x386 <__divsf3_pse+0x8e>
 334:	fe 2f       	mov	r31, r30
 336:	27 d0       	rcall	.+78     	; 0x386 <__divsf3_pse+0x8e>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	bb 1f       	adc	r27, r27
 340:	26 17       	cp	r18, r22
 342:	37 07       	cpc	r19, r23
 344:	48 07       	cpc	r20, r24
 346:	ab 07       	cpc	r26, r27
 348:	b0 e8       	ldi	r27, 0x80	; 128
 34a:	09 f0       	breq	.+2      	; 0x34e <__divsf3_pse+0x56>
 34c:	bb 0b       	sbc	r27, r27
 34e:	80 2d       	mov	r24, r0
 350:	bf 01       	movw	r22, r30
 352:	ff 27       	eor	r31, r31
 354:	93 58       	subi	r25, 0x83	; 131
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	2a f0       	brmi	.+10     	; 0x364 <__divsf3_pse+0x6c>
 35a:	9e 3f       	cpi	r25, 0xFE	; 254
 35c:	51 05       	cpc	r21, r1
 35e:	68 f0       	brcs	.+26     	; 0x37a <__divsf3_pse+0x82>
 360:	8d c0       	rjmp	.+282    	; 0x47c <__fp_inf>
 362:	d7 c0       	rjmp	.+430    	; 0x512 <__fp_szero>
 364:	5f 3f       	cpi	r21, 0xFF	; 255
 366:	ec f3       	brlt	.-6      	; 0x362 <__divsf3_pse+0x6a>
 368:	98 3e       	cpi	r25, 0xE8	; 232
 36a:	dc f3       	brlt	.-10     	; 0x362 <__divsf3_pse+0x6a>
 36c:	86 95       	lsr	r24
 36e:	77 95       	ror	r23
 370:	67 95       	ror	r22
 372:	b7 95       	ror	r27
 374:	f7 95       	ror	r31
 376:	9f 5f       	subi	r25, 0xFF	; 255
 378:	c9 f7       	brne	.-14     	; 0x36c <__divsf3_pse+0x74>
 37a:	88 0f       	add	r24, r24
 37c:	91 1d       	adc	r25, r1
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	97 f9       	bld	r25, 7
 384:	08 95       	ret
 386:	e1 e0       	ldi	r30, 0x01	; 1
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	88 1f       	adc	r24, r24
 38e:	bb 1f       	adc	r27, r27
 390:	62 17       	cp	r22, r18
 392:	73 07       	cpc	r23, r19
 394:	84 07       	cpc	r24, r20
 396:	ba 07       	cpc	r27, r26
 398:	20 f0       	brcs	.+8      	; 0x3a2 <__divsf3_pse+0xaa>
 39a:	62 1b       	sub	r22, r18
 39c:	73 0b       	sbc	r23, r19
 39e:	84 0b       	sbc	r24, r20
 3a0:	ba 0b       	sbc	r27, r26
 3a2:	ee 1f       	adc	r30, r30
 3a4:	88 f7       	brcc	.-30     	; 0x388 <__divsf3_pse+0x90>
 3a6:	e0 95       	com	r30
 3a8:	08 95       	ret

000003aa <__fixunssfsi>:
 3aa:	98 d0       	rcall	.+304    	; 0x4dc <__fp_splitA>
 3ac:	88 f0       	brcs	.+34     	; 0x3d0 <__fixunssfsi+0x26>
 3ae:	9f 57       	subi	r25, 0x7F	; 127
 3b0:	90 f0       	brcs	.+36     	; 0x3d6 <__fixunssfsi+0x2c>
 3b2:	b9 2f       	mov	r27, r25
 3b4:	99 27       	eor	r25, r25
 3b6:	b7 51       	subi	r27, 0x17	; 23
 3b8:	a0 f0       	brcs	.+40     	; 0x3e2 <__fixunssfsi+0x38>
 3ba:	d1 f0       	breq	.+52     	; 0x3f0 <__fixunssfsi+0x46>
 3bc:	66 0f       	add	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	1a f0       	brmi	.+6      	; 0x3cc <__fixunssfsi+0x22>
 3c6:	ba 95       	dec	r27
 3c8:	c9 f7       	brne	.-14     	; 0x3bc <__fixunssfsi+0x12>
 3ca:	12 c0       	rjmp	.+36     	; 0x3f0 <__fixunssfsi+0x46>
 3cc:	b1 30       	cpi	r27, 0x01	; 1
 3ce:	81 f0       	breq	.+32     	; 0x3f0 <__fixunssfsi+0x46>
 3d0:	9f d0       	rcall	.+318    	; 0x510 <__fp_zero>
 3d2:	b1 e0       	ldi	r27, 0x01	; 1
 3d4:	08 95       	ret
 3d6:	9c c0       	rjmp	.+312    	; 0x510 <__fp_zero>
 3d8:	67 2f       	mov	r22, r23
 3da:	78 2f       	mov	r23, r24
 3dc:	88 27       	eor	r24, r24
 3de:	b8 5f       	subi	r27, 0xF8	; 248
 3e0:	39 f0       	breq	.+14     	; 0x3f0 <__fixunssfsi+0x46>
 3e2:	b9 3f       	cpi	r27, 0xF9	; 249
 3e4:	cc f3       	brlt	.-14     	; 0x3d8 <__fixunssfsi+0x2e>
 3e6:	86 95       	lsr	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b3 95       	inc	r27
 3ee:	d9 f7       	brne	.-10     	; 0x3e6 <__fixunssfsi+0x3c>
 3f0:	3e f4       	brtc	.+14     	; 0x400 <__fixunssfsi+0x56>
 3f2:	90 95       	com	r25
 3f4:	80 95       	com	r24
 3f6:	70 95       	com	r23
 3f8:	61 95       	neg	r22
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	08 95       	ret

00000402 <__floatunsisf>:
 402:	e8 94       	clt
 404:	09 c0       	rjmp	.+18     	; 0x418 <__floatsisf+0x12>

00000406 <__floatsisf>:
 406:	97 fb       	bst	r25, 7
 408:	3e f4       	brtc	.+14     	; 0x418 <__floatsisf+0x12>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	99 23       	and	r25, r25
 41a:	a9 f0       	breq	.+42     	; 0x446 <__floatsisf+0x40>
 41c:	f9 2f       	mov	r31, r25
 41e:	96 e9       	ldi	r25, 0x96	; 150
 420:	bb 27       	eor	r27, r27
 422:	93 95       	inc	r25
 424:	f6 95       	lsr	r31
 426:	87 95       	ror	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b7 95       	ror	r27
 42e:	f1 11       	cpse	r31, r1
 430:	f8 cf       	rjmp	.-16     	; 0x422 <__floatsisf+0x1c>
 432:	fa f4       	brpl	.+62     	; 0x472 <__stack+0x13>
 434:	bb 0f       	add	r27, r27
 436:	11 f4       	brne	.+4      	; 0x43c <__floatsisf+0x36>
 438:	60 ff       	sbrs	r22, 0
 43a:	1b c0       	rjmp	.+54     	; 0x472 <__stack+0x13>
 43c:	6f 5f       	subi	r22, 0xFF	; 255
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	16 c0       	rjmp	.+44     	; 0x472 <__stack+0x13>
 446:	88 23       	and	r24, r24
 448:	11 f0       	breq	.+4      	; 0x44e <__floatsisf+0x48>
 44a:	96 e9       	ldi	r25, 0x96	; 150
 44c:	11 c0       	rjmp	.+34     	; 0x470 <__stack+0x11>
 44e:	77 23       	and	r23, r23
 450:	21 f0       	breq	.+8      	; 0x45a <__floatsisf+0x54>
 452:	9e e8       	ldi	r25, 0x8E	; 142
 454:	87 2f       	mov	r24, r23
 456:	76 2f       	mov	r23, r22
 458:	05 c0       	rjmp	.+10     	; 0x464 <__stack+0x5>
 45a:	66 23       	and	r22, r22
 45c:	71 f0       	breq	.+28     	; 0x47a <__stack+0x1b>
 45e:	96 e8       	ldi	r25, 0x86	; 134
 460:	86 2f       	mov	r24, r22
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	2a f0       	brmi	.+10     	; 0x472 <__stack+0x13>
 468:	9a 95       	dec	r25
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	da f7       	brpl	.-10     	; 0x468 <__stack+0x9>
 472:	88 0f       	add	r24, r24
 474:	96 95       	lsr	r25
 476:	87 95       	ror	r24
 478:	97 f9       	bld	r25, 7
 47a:	08 95       	ret

0000047c <__fp_inf>:
 47c:	97 f9       	bld	r25, 7
 47e:	9f 67       	ori	r25, 0x7F	; 127
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	08 95       	ret

00000488 <__fp_nan>:
 488:	9f ef       	ldi	r25, 0xFF	; 255
 48a:	80 ec       	ldi	r24, 0xC0	; 192
 48c:	08 95       	ret

0000048e <__fp_pscA>:
 48e:	00 24       	eor	r0, r0
 490:	0a 94       	dec	r0
 492:	16 16       	cp	r1, r22
 494:	17 06       	cpc	r1, r23
 496:	18 06       	cpc	r1, r24
 498:	09 06       	cpc	r0, r25
 49a:	08 95       	ret

0000049c <__fp_pscB>:
 49c:	00 24       	eor	r0, r0
 49e:	0a 94       	dec	r0
 4a0:	12 16       	cp	r1, r18
 4a2:	13 06       	cpc	r1, r19
 4a4:	14 06       	cpc	r1, r20
 4a6:	05 06       	cpc	r0, r21
 4a8:	08 95       	ret

000004aa <__fp_round>:
 4aa:	09 2e       	mov	r0, r25
 4ac:	03 94       	inc	r0
 4ae:	00 0c       	add	r0, r0
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <__fp_round+0xc>
 4b2:	88 23       	and	r24, r24
 4b4:	52 f0       	brmi	.+20     	; 0x4ca <__fp_round+0x20>
 4b6:	bb 0f       	add	r27, r27
 4b8:	40 f4       	brcc	.+16     	; 0x4ca <__fp_round+0x20>
 4ba:	bf 2b       	or	r27, r31
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__fp_round+0x18>
 4be:	60 ff       	sbrs	r22, 0
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <__fp_round+0x20>
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	08 95       	ret

000004cc <__fp_split3>:
 4cc:	57 fd       	sbrc	r21, 7
 4ce:	90 58       	subi	r25, 0x80	; 128
 4d0:	44 0f       	add	r20, r20
 4d2:	55 1f       	adc	r21, r21
 4d4:	59 f0       	breq	.+22     	; 0x4ec <__fp_splitA+0x10>
 4d6:	5f 3f       	cpi	r21, 0xFF	; 255
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <__fp_splitA+0x1a>
 4da:	47 95       	ror	r20

000004dc <__fp_splitA>:
 4dc:	88 0f       	add	r24, r24
 4de:	97 fb       	bst	r25, 7
 4e0:	99 1f       	adc	r25, r25
 4e2:	61 f0       	breq	.+24     	; 0x4fc <__fp_splitA+0x20>
 4e4:	9f 3f       	cpi	r25, 0xFF	; 255
 4e6:	79 f0       	breq	.+30     	; 0x506 <__fp_splitA+0x2a>
 4e8:	87 95       	ror	r24
 4ea:	08 95       	ret
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	14 06       	cpc	r1, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	f2 cf       	rjmp	.-28     	; 0x4da <__fp_split3+0xe>
 4f6:	46 95       	lsr	r20
 4f8:	f1 df       	rcall	.-30     	; 0x4dc <__fp_splitA>
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <__fp_splitA+0x30>
 4fc:	16 16       	cp	r1, r22
 4fe:	17 06       	cpc	r1, r23
 500:	18 06       	cpc	r1, r24
 502:	99 1f       	adc	r25, r25
 504:	f1 cf       	rjmp	.-30     	; 0x4e8 <__fp_splitA+0xc>
 506:	86 95       	lsr	r24
 508:	71 05       	cpc	r23, r1
 50a:	61 05       	cpc	r22, r1
 50c:	08 94       	sec
 50e:	08 95       	ret

00000510 <__fp_zero>:
 510:	e8 94       	clt

00000512 <__fp_szero>:
 512:	bb 27       	eor	r27, r27
 514:	66 27       	eor	r22, r22
 516:	77 27       	eor	r23, r23
 518:	cb 01       	movw	r24, r22
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__mulsf3>:
 51e:	0b d0       	rcall	.+22     	; 0x536 <__mulsf3x>
 520:	c4 cf       	rjmp	.-120    	; 0x4aa <__fp_round>
 522:	b5 df       	rcall	.-150    	; 0x48e <__fp_pscA>
 524:	28 f0       	brcs	.+10     	; 0x530 <__mulsf3+0x12>
 526:	ba df       	rcall	.-140    	; 0x49c <__fp_pscB>
 528:	18 f0       	brcs	.+6      	; 0x530 <__mulsf3+0x12>
 52a:	95 23       	and	r25, r21
 52c:	09 f0       	breq	.+2      	; 0x530 <__mulsf3+0x12>
 52e:	a6 cf       	rjmp	.-180    	; 0x47c <__fp_inf>
 530:	ab cf       	rjmp	.-170    	; 0x488 <__fp_nan>
 532:	11 24       	eor	r1, r1
 534:	ee cf       	rjmp	.-36     	; 0x512 <__fp_szero>

00000536 <__mulsf3x>:
 536:	ca df       	rcall	.-108    	; 0x4cc <__fp_split3>
 538:	a0 f3       	brcs	.-24     	; 0x522 <__mulsf3+0x4>

0000053a <__mulsf3_pse>:
 53a:	95 9f       	mul	r25, r21
 53c:	d1 f3       	breq	.-12     	; 0x532 <__mulsf3+0x14>
 53e:	95 0f       	add	r25, r21
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	55 1f       	adc	r21, r21
 544:	62 9f       	mul	r22, r18
 546:	f0 01       	movw	r30, r0
 548:	72 9f       	mul	r23, r18
 54a:	bb 27       	eor	r27, r27
 54c:	f0 0d       	add	r31, r0
 54e:	b1 1d       	adc	r27, r1
 550:	63 9f       	mul	r22, r19
 552:	aa 27       	eor	r26, r26
 554:	f0 0d       	add	r31, r0
 556:	b1 1d       	adc	r27, r1
 558:	aa 1f       	adc	r26, r26
 55a:	64 9f       	mul	r22, r20
 55c:	66 27       	eor	r22, r22
 55e:	b0 0d       	add	r27, r0
 560:	a1 1d       	adc	r26, r1
 562:	66 1f       	adc	r22, r22
 564:	82 9f       	mul	r24, r18
 566:	22 27       	eor	r18, r18
 568:	b0 0d       	add	r27, r0
 56a:	a1 1d       	adc	r26, r1
 56c:	62 1f       	adc	r22, r18
 56e:	73 9f       	mul	r23, r19
 570:	b0 0d       	add	r27, r0
 572:	a1 1d       	adc	r26, r1
 574:	62 1f       	adc	r22, r18
 576:	83 9f       	mul	r24, r19
 578:	a0 0d       	add	r26, r0
 57a:	61 1d       	adc	r22, r1
 57c:	22 1f       	adc	r18, r18
 57e:	74 9f       	mul	r23, r20
 580:	33 27       	eor	r19, r19
 582:	a0 0d       	add	r26, r0
 584:	61 1d       	adc	r22, r1
 586:	23 1f       	adc	r18, r19
 588:	84 9f       	mul	r24, r20
 58a:	60 0d       	add	r22, r0
 58c:	21 1d       	adc	r18, r1
 58e:	82 2f       	mov	r24, r18
 590:	76 2f       	mov	r23, r22
 592:	6a 2f       	mov	r22, r26
 594:	11 24       	eor	r1, r1
 596:	9f 57       	subi	r25, 0x7F	; 127
 598:	50 40       	sbci	r21, 0x00	; 0
 59a:	8a f0       	brmi	.+34     	; 0x5be <__mulsf3_pse+0x84>
 59c:	e1 f0       	breq	.+56     	; 0x5d6 <__mulsf3_pse+0x9c>
 59e:	88 23       	and	r24, r24
 5a0:	4a f0       	brmi	.+18     	; 0x5b4 <__mulsf3_pse+0x7a>
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	bb 1f       	adc	r27, r27
 5a8:	66 1f       	adc	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	50 40       	sbci	r21, 0x00	; 0
 5b2:	a9 f7       	brne	.-22     	; 0x59e <__mulsf3_pse+0x64>
 5b4:	9e 3f       	cpi	r25, 0xFE	; 254
 5b6:	51 05       	cpc	r21, r1
 5b8:	70 f0       	brcs	.+28     	; 0x5d6 <__mulsf3_pse+0x9c>
 5ba:	60 cf       	rjmp	.-320    	; 0x47c <__fp_inf>
 5bc:	aa cf       	rjmp	.-172    	; 0x512 <__fp_szero>
 5be:	5f 3f       	cpi	r21, 0xFF	; 255
 5c0:	ec f3       	brlt	.-6      	; 0x5bc <__mulsf3_pse+0x82>
 5c2:	98 3e       	cpi	r25, 0xE8	; 232
 5c4:	dc f3       	brlt	.-10     	; 0x5bc <__mulsf3_pse+0x82>
 5c6:	86 95       	lsr	r24
 5c8:	77 95       	ror	r23
 5ca:	67 95       	ror	r22
 5cc:	b7 95       	ror	r27
 5ce:	f7 95       	ror	r31
 5d0:	e7 95       	ror	r30
 5d2:	9f 5f       	subi	r25, 0xFF	; 255
 5d4:	c1 f7       	brne	.-16     	; 0x5c6 <__mulsf3_pse+0x8c>
 5d6:	fe 2b       	or	r31, r30
 5d8:	88 0f       	add	r24, r24
 5da:	91 1d       	adc	r25, r1
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	97 f9       	bld	r25, 7
 5e2:	08 95       	ret

000005e4 <__udivmodhi4>:
 5e4:	aa 1b       	sub	r26, r26
 5e6:	bb 1b       	sub	r27, r27
 5e8:	51 e1       	ldi	r21, 0x11	; 17
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <__udivmodhi4_ep>

000005ec <__udivmodhi4_loop>:
 5ec:	aa 1f       	adc	r26, r26
 5ee:	bb 1f       	adc	r27, r27
 5f0:	a6 17       	cp	r26, r22
 5f2:	b7 07       	cpc	r27, r23
 5f4:	10 f0       	brcs	.+4      	; 0x5fa <__udivmodhi4_ep>
 5f6:	a6 1b       	sub	r26, r22
 5f8:	b7 0b       	sbc	r27, r23

000005fa <__udivmodhi4_ep>:
 5fa:	88 1f       	adc	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	5a 95       	dec	r21
 600:	a9 f7       	brne	.-22     	; 0x5ec <__udivmodhi4_loop>
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	bc 01       	movw	r22, r24
 608:	cd 01       	movw	r24, r26
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
