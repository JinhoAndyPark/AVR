
ALRO_sonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000516  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000058a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000f6  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003e0  00000000  00000000  00000df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000190  00000000  00000000  000011d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bc  00000000  00000000  00001363  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001bb  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e2  00000000  00000000  00001aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001b8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_6>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_8>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  ac:	0c 94 89 02 	jmp	0x512	; 0x512 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_16>:
//------------------------------------------------------------------------------
//                   		=== Interrupt Service Routine ===
//------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)	// Sonic Trigger Pulse
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	0b b6       	in	r0, 0x3b	; 59
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	
		
	SET_BIT(PORTG,0),SET_BIT(PORTG,1);   //오른쪽센서 트리거,왼쪽센서 트리거
  c8:	e5 e6       	ldi	r30, 0x65	; 101
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	85 e3       	ldi	r24, 0x35	; 53
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <__vector_16+0x26>
  de:	00 00       	nop
	_delay_us(10);
	CLR_BIT(PORTG,0),CLR_BIT(PORTG,1); 
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	8d 7f       	andi	r24, 0xFD	; 253
  ea:	80 83       	st	Z, r24
	
	TCNT0 = 0; 
  ec:	12 be       	out	0x32, r1	; 50
	
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0b be       	out	0x3b, r0	; 59
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <Init_Timer0>:
}


void Init_Timer0(void)   
{   
	SET_BIT( TIMSK, TOIE0 );     //timer0 overflow interrupt able
 102:	87 b7       	in	r24, 0x37	; 55
 104:	81 60       	ori	r24, 0x01	; 1
 106:	87 bf       	out	0x37, r24	; 55
	TCCR0 = ( 1 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		//분주비 1024 = 64us	
 108:	87 e0       	ldi	r24, 0x07	; 7
 10a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 56;					 // 256-56=200   64us*200=약12.8ms	
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	82 bf       	out	0x32, r24	; 50
}
 110:	08 95       	ret

00000112 <Init_Uart0>:
void Init_Uart0(void)		//ALRO UART0=bluetooth
{
	unsigned   int Temp_UBRR0;
	Temp_UBRR0 = 16000000L/(16L * 9600) - 1;   

	UBRR0H = (Temp_UBRR0 >> 8);        
 112:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (Temp_UBRR0 & 0x00FF);
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	89 b9       	out	0x09, r24	; 9
		
	UCSR0A = (0<<RXC0)  | (1<<UDRE0);	
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	8b b9       	out	0x0b, r24	; 11
    UCSR0B = (1<<RXEN0) | (1<<TXEN0);  		
 11e:	88 e1       	ldi	r24, 0x18	; 24
 120:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (3<<UCSZ00);			
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 93 95 00 	sts	0x0095, r24
		
	CLR_BIT( DDRE, 0 );        
 128:	10 98       	cbi	0x02, 0	; 2
	SET_BIT( DDRE, 1 );          
 12a:	11 9a       	sbi	0x02, 1	; 2
}
 12c:	08 95       	ret

0000012e <Init_Uart1>:
void Init_Uart1(void)		//ALRO UART1=computer
{
	unsigned   int Temp_UBRR1;
	Temp_UBRR1 = 16000000L/(16L * 9600) - 1;  //(UBRR값 구하기공식) UBRR=약103
		
	UBRR1H = (Temp_UBRR1 >> 8);  	//0       
 12e:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = (Temp_UBRR1 & 0x00FF); //103  9600bps
 132:	87 e6       	ldi	r24, 0x67	; 103
 134:	80 93 99 00 	sts	0x0099, r24

	UCSR1A = (0<<RXC1)  | (1<<UDRE1);  //수신버퍼 비워진상태, 송신버퍼 비워진상태
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	80 93 9b 00 	sts	0x009B, r24
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);  //수신부 동작,송신부 동작 활성화
 13e:	88 e1       	ldi	r24, 0x18	; 24
 140:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3<<UCSZ10);  			   //전송데이터 비트수 8비트            
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 9d 00 	sts	0x009D, r24
	
	CLR_BIT( DDRD, 2 );  //수신부 입력으로
 14a:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT( DDRD, 3 );  //송신부 출력으로 
 14c:	8b 9a       	sbi	0x11, 3	; 17
	
}
 14e:	08 95       	ret

00000150 <Uart_Putch>:


void Uart_Putch(unsigned char  Com, unsigned int PutData)
{
	switch(Com)
 150:	88 23       	and	r24, r24
 152:	19 f0       	breq	.+6      	; 0x15a <Uart_Putch+0xa>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	59 f4       	brne	.+22     	; 0x16e <Uart_Putch+0x1e>
 158:	04 c0       	rjmp	.+8      	; 0x162 <Uart_Putch+0x12>
	{
		case 0:
			while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
 15a:	5d 9b       	sbis	0x0b, 5	; 11
 15c:	fe cf       	rjmp	.-4      	; 0x15a <Uart_Putch+0xa>
			UDR0 = PutData;                     // 데이터를 전송한다
 15e:	6c b9       	out	0x0c, r22	; 12
			break;
 160:	08 95       	ret
		
		case 1:
			while(!( UCSR1A & (1<<UDRE1)) );    // 송신가능시점까지 대기
 162:	80 91 9b 00 	lds	r24, 0x009B
 166:	85 ff       	sbrs	r24, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <Uart_Putch+0x12>
			UDR1 = PutData;                     // 데이터를 전송한다
 16a:	60 93 9c 00 	sts	0x009C, r22
 16e:	08 95       	ret

00000170 <Uart_U16Bit_PutNum>:
	}
}


void Uart_U16Bit_PutNum(unsigned int NumData)   // 10진수로 출력
{
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
	unsigned int TempData;
	TempData = NumData/10000;
 17e:	60 e1       	ldi	r22, 0x10	; 16
 180:	77 e2       	ldi	r23, 0x27	; 39
 182:	0e 94 38 02 	call	0x470	; 0x470 <__udivmodhi4>
 186:	7c 01       	movw	r14, r24
	Uart_Putch(1,TempData+48);                  // 10000 자리 출력
 188:	60 5d       	subi	r22, 0xD0	; 208
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 a8 00 	call	0x150	; 0x150 <Uart_Putch>
	TempData = (NumData%10000)/1000;
 192:	08 ee       	ldi	r16, 0xE8	; 232
 194:	13 e0       	ldi	r17, 0x03	; 3
 196:	c7 01       	movw	r24, r14
 198:	b8 01       	movw	r22, r16
 19a:	0e 94 38 02 	call	0x470	; 0x470 <__udivmodhi4>
	Uart_Putch(1,TempData+48);					// 1000 자리 출력
 19e:	60 5d       	subi	r22, 0xD0	; 208
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 a8 00 	call	0x150	; 0x150 <Uart_Putch>
	TempData = (NumData%1000)/100;
 1a8:	ce 01       	movw	r24, r28
 1aa:	b8 01       	movw	r22, r16
 1ac:	0e 94 38 02 	call	0x470	; 0x470 <__udivmodhi4>
 1b0:	04 e6       	ldi	r16, 0x64	; 100
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	b8 01       	movw	r22, r16
 1b6:	0e 94 38 02 	call	0x470	; 0x470 <__udivmodhi4>
	Uart_Putch(1,TempData+48);					// 100 자리 출력
 1ba:	60 5d       	subi	r22, 0xD0	; 208
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 a8 00 	call	0x150	; 0x150 <Uart_Putch>
	TempData = (NumData%100)/10;
 1c4:	ce 01       	movw	r24, r28
 1c6:	b8 01       	movw	r22, r16
 1c8:	0e 94 38 02 	call	0x470	; 0x470 <__udivmodhi4>
 1cc:	0a e0       	ldi	r16, 0x0A	; 10
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	b8 01       	movw	r22, r16
 1d2:	0e 94 38 02 	call	0x470	; 0x470 <__udivmodhi4>
	Uart_Putch(1,TempData+48);					// 10 자리 출력
 1d6:	60 5d       	subi	r22, 0xD0	; 208
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 a8 00 	call	0x150	; 0x150 <Uart_Putch>
	TempData = (NumData%10);			
 1e0:	ce 01       	movw	r24, r28
 1e2:	b8 01       	movw	r22, r16
 1e4:	0e 94 38 02 	call	0x470	; 0x470 <__udivmodhi4>
 1e8:	bc 01       	movw	r22, r24
	Uart_Putch(1,TempData+48);					// 1 자리 출력 
 1ea:	60 5d       	subi	r22, 0xD0	; 208
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 a8 00 	call	0x150	; 0x150 <Uart_Putch>
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	08 95       	ret

00000202 <__vector_8>:
		SET_BIT( EIMSK, INT7  );    // EXT_INT 5 ENABLE
	}
}

ISR(INT7_vect)
{	
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	if(EICRB==0xc0)		    //왼쪽만 RISING EDGE 이면 
 228:	8a b7       	in	r24, 0x3a	; 58
 22a:	80 3c       	cpi	r24, 0xC0	; 192
 22c:	21 f4       	brne	.+8      	; 0x236 <__vector_8+0x34>
	{	
		TCNT0 = 0;		//카운트 초기화
 22e:	12 be       	out	0x32, r1	; 50
		//Uart_Putch(1,7);
		EICRB=0x80;   // 왼쪽 FALLING SET 
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	8a bf       	out	0x3a, r24	; 58
 234:	43 c0       	rjmp	.+134    	; 0x2bc <__vector_8+0xba>
		
	}
	
	else if(EICRB==0x80)    //왼쪽만 FALLING
 236:	8a b7       	in	r24, 0x3a	; 58
 238:	80 38       	cpi	r24, 0x80	; 128
 23a:	09 f0       	breq	.+2      	; 0x23e <__vector_8+0x3c>
 23c:	3f c0       	rjmp	.+126    	; 0x2bc <__vector_8+0xba>
	{
		TCCR0 = 0x00;			//off timer cnt
 23e:	13 be       	out	0x33, r1	; 51
		Sonic_val = TCNT0;		//check cnt
 240:	82 b7       	in	r24, 0x32	; 50
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 01 01 	sts	0x0101, r25
 248:	80 93 00 01 	sts	0x0100, r24

		Sonic_cm = (((Sonic_val * 64) * 34300)/2000000) +1;			//초음파 거리측정
 24c:	60 91 00 01 	lds	r22, 0x0100
 250:	70 91 01 01 	lds	r23, 0x0101
 254:	86 e0       	ldi	r24, 0x06	; 6
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	8a 95       	dec	r24
 25c:	e1 f7       	brne	.-8      	; 0x256 <__vector_8+0x54>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2c ef       	ldi	r18, 0xFC	; 252
 264:	35 e8       	ldi	r19, 0x85	; 133
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	0e 94 19 02 	call	0x432	; 0x432 <__mulsi3>
 26e:	20 e8       	ldi	r18, 0x80	; 128
 270:	34 e8       	ldi	r19, 0x84	; 132
 272:	4e e1       	ldi	r20, 0x1E	; 30
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	0e 94 4c 02 	call	0x498	; 0x498 <__divmodsi4>
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	30 93 03 01 	sts	0x0103, r19
 282:	20 93 02 01 	sts	0x0102, r18
		Uart_U16Bit_PutNum(Sonic_cm);
 286:	80 91 02 01 	lds	r24, 0x0102
 28a:	90 91 03 01 	lds	r25, 0x0103
 28e:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_U16Bit_PutNum>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	93 ed       	ldi	r25, 0xD3	; 211
 296:	a0 e3       	ldi	r26, 0x30	; 48
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	a0 40       	sbci	r26, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <__vector_8+0x96>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <__vector_8+0xa0>
 2a2:	00 00       	nop

		_delay_ms(1000);

		EICRB=0x0c;    // 오른쪽만 FALLING
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	8a bf       	out	0x3a, r24	; 58

		TCCR0 = ( 1 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		//freescale : 1024
 2a8:	87 e0       	ldi	r24, 0x07	; 7
 2aa:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 56;                                                 //256-56=200   64us*200=약12.8ms 
 2ac:	88 e3       	ldi	r24, 0x38	; 56
 2ae:	82 bf       	out	0x32, r24	; 50

		SET_BIT( EIMSK, INT5  );    // EXT_INT 4 ENABLE 
 2b0:	89 b7       	in	r24, 0x39	; 57
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	89 bf       	out	0x39, r24	; 57
		CLR_BIT( EIMSK, INT7  );    // EXT_INT 5 DISABLE
 2b6:	89 b7       	in	r24, 0x39	; 57
 2b8:	8f 77       	andi	r24, 0x7F	; 127
 2ba:	89 bf       	out	0x39, r24	; 57
	}
}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	bf 91       	pop	r27
 2c2:	af 91       	pop	r26
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	7f 91       	pop	r23
 2ca:	6f 91       	pop	r22
 2cc:	5f 91       	pop	r21
 2ce:	4f 91       	pop	r20
 2d0:	3f 91       	pop	r19
 2d2:	2f 91       	pop	r18
 2d4:	0f 90       	pop	r0
 2d6:	0b be       	out	0x3b, r0	; 59
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_6>:
	TCNT0 = 0; 
	
}

ISR(INT5_vect)           //오른쪽 센서 에코 
{	
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	0b b6       	in	r0, 0x3b	; 59
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31

	if(EICRB == 0x0c)		    //오른쪽만 RISING  이면 (왼쪽도 RISING이면 DISABLE 이라두 영향을미침)
 308:	8a b7       	in	r24, 0x3a	; 58
 30a:	8c 30       	cpi	r24, 0x0C	; 12
 30c:	21 f4       	brne	.+8      	; 0x316 <__vector_6+0x34>
	{
		
		TCNT0 = 0;			//카운트 초기화
 30e:	12 be       	out	0x32, r1	; 50
		EICRB=0x08; 		//오른쪽만 FALLING 세팅
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	8a bf       	out	0x3a, r24	; 58
 314:	43 c0       	rjmp	.+134    	; 0x39c <__vector_6+0xba>
		
	}
	else if(EICRB == 0x08)    //오른쪽 FALLING  ,왼쪽 RISING  이면 
 316:	8a b7       	in	r24, 0x3a	; 58
 318:	88 30       	cpi	r24, 0x08	; 8
 31a:	09 f0       	breq	.+2      	; 0x31e <__vector_6+0x3c>
 31c:	3f c0       	rjmp	.+126    	; 0x39c <__vector_6+0xba>
	{
		
		TCCR0 = 0x00;			//off timer cnt
 31e:	13 be       	out	0x33, r1	; 51
		Sonic_val = TCNT0;		//check cnt		
 320:	82 b7       	in	r24, 0x32	; 50
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 01 01 	sts	0x0101, r25
 328:	80 93 00 01 	sts	0x0100, r24
		Sonic_cm = (((Sonic_val * 64) * 34300)/2000000) +1;			//초음파 거리측정
 32c:	60 91 00 01 	lds	r22, 0x0100
 330:	70 91 01 01 	lds	r23, 0x0101
 334:	96 e0       	ldi	r25, 0x06	; 6
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	9a 95       	dec	r25
 33c:	e1 f7       	brne	.-8      	; 0x336 <__vector_6+0x54>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	2c ef       	ldi	r18, 0xFC	; 252
 344:	35 e8       	ldi	r19, 0x85	; 133
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	0e 94 19 02 	call	0x432	; 0x432 <__mulsi3>
 34e:	20 e8       	ldi	r18, 0x80	; 128
 350:	34 e8       	ldi	r19, 0x84	; 132
 352:	4e e1       	ldi	r20, 0x1E	; 30
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	0e 94 4c 02 	call	0x498	; 0x498 <__divmodsi4>
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	30 93 03 01 	sts	0x0103, r19
 362:	20 93 02 01 	sts	0x0102, r18
		Uart_U16Bit_PutNum(Sonic_cm);
 366:	80 91 02 01 	lds	r24, 0x0102
 36a:	90 91 03 01 	lds	r25, 0x0103
 36e:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_U16Bit_PutNum>
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	93 ed       	ldi	r25, 0xD3	; 211
 376:	a0 e3       	ldi	r26, 0x30	; 48
 378:	81 50       	subi	r24, 0x01	; 1
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	a0 40       	sbci	r26, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <__vector_6+0x96>
 380:	00 c0       	rjmp	.+0      	; 0x382 <__vector_6+0xa0>
 382:	00 00       	nop

		_delay_ms(1000);
		
		EICRB=0xc0;    // 왼쪽만RISING, 오른쪽은이용x 
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	8a bf       	out	0x3a, r24	; 58

		TCCR0 = ( 1 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		//freescale : 1024 타이머 시작 
 388:	87 e0       	ldi	r24, 0x07	; 7
 38a:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 56;                                                 //256-56=200   64us*200=약12.8ms
 38c:	88 e3       	ldi	r24, 0x38	; 56
 38e:	82 bf       	out	0x32, r24	; 50
		
		CLR_BIT( EIMSK, INT5  );    // EXT_INT 4 DISABLE 
 390:	89 b7       	in	r24, 0x39	; 57
 392:	8f 7d       	andi	r24, 0xDF	; 223
 394:	89 bf       	out	0x39, r24	; 57
		SET_BIT( EIMSK, INT7  );    // EXT_INT 5 ENABLE
 396:	89 b7       	in	r24, 0x39	; 57
 398:	80 68       	ori	r24, 0x80	; 128
 39a:	89 bf       	out	0x39, r24	; 57
	}
}
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	bf 91       	pop	r27
 3a2:	af 91       	pop	r26
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	7f 91       	pop	r23
 3aa:	6f 91       	pop	r22
 3ac:	5f 91       	pop	r21
 3ae:	4f 91       	pop	r20
 3b0:	3f 91       	pop	r19
 3b2:	2f 91       	pop	r18
 3b4:	0f 90       	pop	r0
 3b6:	0b be       	out	0x3b, r0	; 59
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <Init_Ext_Interrupt5>:
}


void Init_Ext_Interrupt5(void)  				//오른쪽 센서 인터럽트 
{
	SET_BIT( EICRB, ISC51 );    // INT4 RISING EDGE ENABLE
 3c2:	8a b7       	in	r24, 0x3a	; 58
 3c4:	88 60       	ori	r24, 0x08	; 8
 3c6:	8a bf       	out	0x3a, r24	; 58
	SET_BIT( EICRB, ISC50 );    // INT4 RISING EDGE ENABLE
 3c8:	8a b7       	in	r24, 0x3a	; 58
 3ca:	84 60       	ori	r24, 0x04	; 4
 3cc:	8a bf       	out	0x3a, r24	; 58
	
	SET_BIT( EIMSK, INT5  );    // EXT_INT 4 ENABLE
 3ce:	89 b7       	in	r24, 0x39	; 57
 3d0:	80 62       	ori	r24, 0x20	; 32
 3d2:	89 bf       	out	0x39, r24	; 57
	CLR_BIT( EIFR, INTF5 );     // INTERRUPT FLAG CLEAR	
 3d4:	88 b7       	in	r24, 0x38	; 56
 3d6:	8f 7d       	andi	r24, 0xDF	; 223
 3d8:	88 bf       	out	0x38, r24	; 56
	CLR_BIT( DDRE, 5 );  	    // 신호 받아들임
 3da:	15 98       	cbi	0x02, 5	; 2
	//SET_BIT( PORTE, 4 );		// Input Set, Pull-Up Setting?????????
}
 3dc:	08 95       	ret

000003de <Init_Ext_Interrupt7>:

void Init_Ext_Interrupt7(void)
{
	CLR_BIT( EICRB, ISC71 );    // 
 3de:	8a b7       	in	r24, 0x3a	; 58
 3e0:	8f 77       	andi	r24, 0x7F	; 127
 3e2:	8a bf       	out	0x3a, r24	; 58
	CLR_BIT( EICRB, ISC70 );    //레지스터 00  
 3e4:	8a b7       	in	r24, 0x3a	; 58
 3e6:	8f 7b       	andi	r24, 0xBF	; 191
 3e8:	8a bf       	out	0x3a, r24	; 58
	
	CLR_BIT( EIMSK, INT7  );    // EXT_INT 5 DISABLE
 3ea:	89 b7       	in	r24, 0x39	; 57
 3ec:	8f 77       	andi	r24, 0x7F	; 127
 3ee:	89 bf       	out	0x39, r24	; 57
	CLR_BIT( EIFR , INTF7 );    // INTERRUPT FLAG CLEAR
 3f0:	88 b7       	in	r24, 0x38	; 56
 3f2:	8f 77       	andi	r24, 0x7F	; 127
 3f4:	88 bf       	out	0x38, r24	; 56
	CLR_BIT( DDRE, 7);			// 신호 받아들임   
 3f6:	17 98       	cbi	0x02, 7	; 2
	//SET_BIT( PORTE, 5);			// Input Set, Pull-Up Setting?????????
}
 3f8:	08 95       	ret

000003fa <Init_Main>:
//------------------------------------------------------------------------------
//                       	=== Initialize Function ===
//------------------------------------------------------------------------------
void Init_Main(void)
{
	CLR_BIT(SREG, 7);           	// 전체인터럽트 사용금지
 3fa:	8f b7       	in	r24, 0x3f	; 63
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	8f bf       	out	0x3f, r24	; 63

	Init_Timer0();				// 초기화_타이머2
 400:	0e 94 81 00 	call	0x102	; 0x102 <Init_Timer0>
    Init_Uart0();  				// 초기화_시리얼통신0
 404:	0e 94 89 00 	call	0x112	; 0x112 <Init_Uart0>
    Init_Uart1();				// 초기화_시리얼통신1 
 408:	0e 94 97 00 	call	0x12e	; 0x12e <Init_Uart1>
    Init_Ext_Interrupt5();		// INT4 신호 인터럽트(오른쪽센서)
 40c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Init_Ext_Interrupt5>
	Init_Ext_Interrupt7();		// INT5 신호 인터럽트(왼쪽센서)
 410:	0e 94 ef 01 	call	0x3de	; 0x3de <Init_Ext_Interrupt7>

	SET_BIT(DDRG, 0);			// 오른쪽센서 트리거출력설정
 414:	e4 e6       	ldi	r30, 0x64	; 100
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	80 83       	st	Z, r24
	SET_BIT(DDRG, 1);			// 왼쪽센서 트리거 출력설정
 41e:	80 81       	ld	r24, Z
 420:	82 60       	ori	r24, 0x02	; 2
 422:	80 83       	st	Z, r24
	
	SET_BIT(SREG, 7);            //  전체 인터럽트 활성화 
 424:	8f b7       	in	r24, 0x3f	; 63
 426:	80 68       	ori	r24, 0x80	; 128
 428:	8f bf       	out	0x3f, r24	; 63
}
 42a:	08 95       	ret

0000042c <main>:
	}
}

void main(void)
{ 
	Init_Main();		// init_device
 42c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Init_Main>
 430:	ff cf       	rjmp	.-2      	; 0x430 <main+0x4>

00000432 <__mulsi3>:
 432:	62 9f       	mul	r22, r18
 434:	d0 01       	movw	r26, r0
 436:	73 9f       	mul	r23, r19
 438:	f0 01       	movw	r30, r0
 43a:	82 9f       	mul	r24, r18
 43c:	e0 0d       	add	r30, r0
 43e:	f1 1d       	adc	r31, r1
 440:	64 9f       	mul	r22, r20
 442:	e0 0d       	add	r30, r0
 444:	f1 1d       	adc	r31, r1
 446:	92 9f       	mul	r25, r18
 448:	f0 0d       	add	r31, r0
 44a:	83 9f       	mul	r24, r19
 44c:	f0 0d       	add	r31, r0
 44e:	74 9f       	mul	r23, r20
 450:	f0 0d       	add	r31, r0
 452:	65 9f       	mul	r22, r21
 454:	f0 0d       	add	r31, r0
 456:	99 27       	eor	r25, r25
 458:	72 9f       	mul	r23, r18
 45a:	b0 0d       	add	r27, r0
 45c:	e1 1d       	adc	r30, r1
 45e:	f9 1f       	adc	r31, r25
 460:	63 9f       	mul	r22, r19
 462:	b0 0d       	add	r27, r0
 464:	e1 1d       	adc	r30, r1
 466:	f9 1f       	adc	r31, r25
 468:	bd 01       	movw	r22, r26
 46a:	cf 01       	movw	r24, r30
 46c:	11 24       	eor	r1, r1
 46e:	08 95       	ret

00000470 <__udivmodhi4>:
 470:	aa 1b       	sub	r26, r26
 472:	bb 1b       	sub	r27, r27
 474:	51 e1       	ldi	r21, 0x11	; 17
 476:	07 c0       	rjmp	.+14     	; 0x486 <__udivmodhi4_ep>

00000478 <__udivmodhi4_loop>:
 478:	aa 1f       	adc	r26, r26
 47a:	bb 1f       	adc	r27, r27
 47c:	a6 17       	cp	r26, r22
 47e:	b7 07       	cpc	r27, r23
 480:	10 f0       	brcs	.+4      	; 0x486 <__udivmodhi4_ep>
 482:	a6 1b       	sub	r26, r22
 484:	b7 0b       	sbc	r27, r23

00000486 <__udivmodhi4_ep>:
 486:	88 1f       	adc	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	5a 95       	dec	r21
 48c:	a9 f7       	brne	.-22     	; 0x478 <__udivmodhi4_loop>
 48e:	80 95       	com	r24
 490:	90 95       	com	r25
 492:	bc 01       	movw	r22, r24
 494:	cd 01       	movw	r24, r26
 496:	08 95       	ret

00000498 <__divmodsi4>:
 498:	97 fb       	bst	r25, 7
 49a:	09 2e       	mov	r0, r25
 49c:	05 26       	eor	r0, r21
 49e:	0e d0       	rcall	.+28     	; 0x4bc <__divmodsi4_neg1>
 4a0:	57 fd       	sbrc	r21, 7
 4a2:	04 d0       	rcall	.+8      	; 0x4ac <__divmodsi4_neg2>
 4a4:	14 d0       	rcall	.+40     	; 0x4ce <__udivmodsi4>
 4a6:	0a d0       	rcall	.+20     	; 0x4bc <__divmodsi4_neg1>
 4a8:	00 1c       	adc	r0, r0
 4aa:	38 f4       	brcc	.+14     	; 0x4ba <__divmodsi4_exit>

000004ac <__divmodsi4_neg2>:
 4ac:	50 95       	com	r21
 4ae:	40 95       	com	r20
 4b0:	30 95       	com	r19
 4b2:	21 95       	neg	r18
 4b4:	3f 4f       	sbci	r19, 0xFF	; 255
 4b6:	4f 4f       	sbci	r20, 0xFF	; 255
 4b8:	5f 4f       	sbci	r21, 0xFF	; 255

000004ba <__divmodsi4_exit>:
 4ba:	08 95       	ret

000004bc <__divmodsi4_neg1>:
 4bc:	f6 f7       	brtc	.-4      	; 0x4ba <__divmodsi4_exit>
 4be:	90 95       	com	r25
 4c0:	80 95       	com	r24
 4c2:	70 95       	com	r23
 4c4:	61 95       	neg	r22
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255
 4c8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	08 95       	ret

000004ce <__udivmodsi4>:
 4ce:	a1 e2       	ldi	r26, 0x21	; 33
 4d0:	1a 2e       	mov	r1, r26
 4d2:	aa 1b       	sub	r26, r26
 4d4:	bb 1b       	sub	r27, r27
 4d6:	fd 01       	movw	r30, r26
 4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <__udivmodsi4_ep>

000004da <__udivmodsi4_loop>:
 4da:	aa 1f       	adc	r26, r26
 4dc:	bb 1f       	adc	r27, r27
 4de:	ee 1f       	adc	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	a2 17       	cp	r26, r18
 4e4:	b3 07       	cpc	r27, r19
 4e6:	e4 07       	cpc	r30, r20
 4e8:	f5 07       	cpc	r31, r21
 4ea:	20 f0       	brcs	.+8      	; 0x4f4 <__udivmodsi4_ep>
 4ec:	a2 1b       	sub	r26, r18
 4ee:	b3 0b       	sbc	r27, r19
 4f0:	e4 0b       	sbc	r30, r20
 4f2:	f5 0b       	sbc	r31, r21

000004f4 <__udivmodsi4_ep>:
 4f4:	66 1f       	adc	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	1a 94       	dec	r1
 4fe:	69 f7       	brne	.-38     	; 0x4da <__udivmodsi4_loop>
 500:	60 95       	com	r22
 502:	70 95       	com	r23
 504:	80 95       	com	r24
 506:	90 95       	com	r25
 508:	9b 01       	movw	r18, r22
 50a:	ac 01       	movw	r20, r24
 50c:	bd 01       	movw	r22, r26
 50e:	cf 01       	movw	r24, r30
 510:	08 95       	ret

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>
