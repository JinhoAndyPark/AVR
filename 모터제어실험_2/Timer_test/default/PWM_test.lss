
PWM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  0000019a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000057  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000012a  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d0  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000165  00000000  00000000  0000040b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000086  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__vector_9>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a7 36       	cpi	r26, 0x67	; 103
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	4a d0       	rcall	.+148    	; 0xdc <main>
  48:	6a c0       	rjmp	.+212    	; 0x11e <exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <__vector_9>:
unsigned char state=0;		//now state
unsigned int temp=0;		//Rx data
unsigned long OCR_val=0;	//for setting Fulse

SIGNAL(TIMER0_OVF_vect)		//TINT vector
{
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	8f 93       	push	r24
	TCNT0 =55; //200=255-55
  58:	87 e3       	ldi	r24, 0x37	; 55
  5a:	82 bf       	out	0x32, r24	; 50
}
  5c:	8f 91       	pop	r24
  5e:	0f 90       	pop	r0
  60:	0f be       	out	0x3f, r0	; 63
  62:	0f 90       	pop	r0
  64:	1f 90       	pop	r1
  66:	18 95       	reti

00000068 <RX>:


unsigned char RX(void)
{
	if(temp =='1')	OCR_val=235;		//55~255 10% 
  68:	80 91 61 00 	lds	r24, 0x0061
  6c:	90 91 62 00 	lds	r25, 0x0062
  70:	81 33       	cpi	r24, 0x31	; 49
  72:	91 05       	cpc	r25, r1
  74:	29 f4       	brne	.+10     	; 0x80 <RX+0x18>
  76:	8b ee       	ldi	r24, 0xEB	; 235
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	07 c0       	rjmp	.+14     	; 0x8e <RX+0x26>
	else if(temp=='2') OCR_val=155;	//50%
  80:	82 33       	cpi	r24, 0x32	; 50
  82:	91 05       	cpc	r25, r1
  84:	69 f4       	brne	.+26     	; 0xa0 <RX+0x38>
  86:	8b e9       	ldi	r24, 0x9B	; 155
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	80 93 63 00 	sts	0x0063, r24
  92:	90 93 64 00 	sts	0x0064, r25
  96:	a0 93 65 00 	sts	0x0065, r26
  9a:	b0 93 66 00 	sts	0x0066, r27
  9e:	0f c0       	rjmp	.+30     	; 0xbe <RX+0x56>
	else if(temp=='3') OCR_val=75;	//90%
  a0:	c3 97       	sbiw	r24, 0x33	; 51
  a2:	29 f4       	brne	.+10     	; 0xae <RX+0x46>
  a4:	8b e4       	ldi	r24, 0x4B	; 75
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	f0 cf       	rjmp	.-32     	; 0x8e <RX+0x26>
	else OCR_val=0;				//none input
  ae:	10 92 63 00 	sts	0x0063, r1
  b2:	10 92 64 00 	sts	0x0064, r1
  b6:	10 92 65 00 	sts	0x0065, r1
  ba:	10 92 66 00 	sts	0x0066, r1

	OCR0=OCR_val;///2)*-4;
  be:	80 91 63 00 	lds	r24, 0x0063
  c2:	8c bf       	out	0x3c, r24	; 60

	while((UCSRA & 0x80) ==0);			//waiting recieve data
  c4:	5f 9b       	sbis	0x0b, 7	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <RX+0x5c>

	temp=UDR;
  c8:	8c b1       	in	r24, 0x0c	; 12
  ca:	80 93 61 00 	sts	0x0061, r24
  ce:	10 92 62 00 	sts	0x0062, r1
	
}
  d2:	08 95       	ret

000000d4 <TX>:

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
  d4:	5d 9b       	sbis	0x0b, 5	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <TX>

	UDR = i;
  d8:	8c b9       	out	0x0c, r24	; 12
}
  da:	08 95       	ret

000000dc <main>:

int main(void)
{
	DDRB=0xFF;//0b00001011;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 bb       	out	0x17, r24	; 23
	//DDRC=0b00000000;
	DDRD=0xFE;//0b10000000;
  e0:	8e ef       	ldi	r24, 0xFE	; 254
  e2:	81 bb       	out	0x11, r24	; 17

	PORTB=0x02;//0b00000000;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	88 bb       	out	0x18, r24	; 24
	PORTD=0x00;
  e8:	12 ba       	out	0x12, r1	; 18

	TCCR0 = 0x7d;//0b01101101;
  ea:	8d e7       	ldi	r24, 0x7D	; 125
  ec:	83 bf       	out	0x33, r24	; 51
	//TCCR2 = 0b00000000;
	OCR0=OCR_val;///2)*-5)-1;
  ee:	80 91 63 00 	lds	r24, 0x0063
  f2:	8c bf       	out	0x3c, r24	; 60
	TCNT0=55;
  f4:	87 e3       	ldi	r24, 0x37	; 55
  f6:	82 bf       	out	0x32, r24	; 50
	/*
	TCCR1B = 0x04;	//256
	TCNT1 = 65535;	//
	*/ 
	TIMSK = 0x01;	//using Time1 16bit timer
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	89 bf       	out	0x39, r24	; 57

	UCSRA = 0x00;	
  fc:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18;	
  fe:	88 e1       	ldi	r24, 0x18	; 24
 100:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x06;
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	80 bd       	out	0x20, r24	; 32

	UBRRH = 0x00;
 106:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;	//9600 baud rate
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	89 b9       	out	0x09, r24	; 9

	//DDRD=0x02;		//Rx:Input, Tx:Output

	SREG = 0x80;
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	8f bf       	out	0x3f, r24	; 63

	while(1)
	{

		RX();		//recieve data from computer
 110:	ab df       	rcall	.-170    	; 0x68 <RX>

		TX(temp);	//return data to computer
 112:	80 91 61 00 	lds	r24, 0x0061
}

//This Function for monitoring
unsigned char TX(unsigned int i)
{
	while((UCSRA & 0x20) ==0);
 116:	5d 9b       	sbis	0x0b, 5	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x3a>

	UDR = i;
 11a:	8c b9       	out	0x0c, r24	; 12
 11c:	f9 cf       	rjmp	.-14     	; 0x110 <main+0x34>

0000011e <exit>:
 11e:	f8 94       	cli
 120:	00 c0       	rjmp	.+0      	; 0x122 <_exit>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
