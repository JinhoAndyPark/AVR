
pwm_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a4  00000000  00000000  0000017f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000070  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a5  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000074  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
	}
return 0;
}
void Main_Init(void)
{
    cbi(SREG,7);        // 모든 인터럽트 비활성화
  be:	8f b7       	in	r24, 0x3f	; 63
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	8f bf       	out	0x3f, r24	; 63

    DDRB    = 0xff;     // 포트B 출력으로 설정
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	87 bb       	out	0x17, r24	; 23
{      
    Main_Init();
		
    while(1)
    {
	PORTB=0x40;
  c8:	90 e4       	ldi	r25, 0x40	; 64
	PORTB=0x20;
  ca:	80 e2       	ldi	r24, 0x20	; 32
{      
    Main_Init();
		
    while(1)
    {
	PORTB=0x40;
  cc:	98 bb       	out	0x18, r25	; 24
	PORTB=0x20;
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0xe>

000000d2 <Main_Init>:
	}
return 0;
}
void Main_Init(void)
{
    cbi(SREG,7);        // 모든 인터럽트 비활성화
  d2:	8f b7       	in	r24, 0x3f	; 63
  d4:	8f 77       	andi	r24, 0x7F	; 127
  d6:	8f bf       	out	0x3f, r24	; 63

    DDRB    = 0xff;     // 포트B 출력으로 설정
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	87 bb       	out	0x17, r24	; 23
//	sbi(SREG,7);         
			          
    
       /* TIMSK   = 0x03;     // COMP 인터럽트 인에이블
    sbi(SREG,7);      */  // 모든 인터럽트 인에이블
}
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
