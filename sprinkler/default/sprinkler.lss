
sprinkler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000e64  00000ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800140  00800140  00000f38  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000303  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae9  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000244  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a8c  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00002be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000305  00000000  00000000  00002f16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_6>
  1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_7>
  20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_8>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 35       	cpi	r26, 0x5E	; 94
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <main>
  c6:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_10>:
		}
	}
}

ISR(TIMER2_OVF_vect)	// Sonic Trigger Pulse
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
	TCNT2 = 0;
  da:	14 bc       	out	0x24, r1	; 36
	sbi(PORTE,4);
  dc:	1c 9a       	sbi	0x03, 4	; 3
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  de:	85 e3       	ldi	r24, 0x35	; 53
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <__vector_10+0x12>
	_delay_us(10);
	cbi(PORTE,4);
  e4:	1c 98       	cbi	0x03, 4	; 3
}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_6>:

ISR(INT5_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	0b b6       	in	r0, 0x3b	; 59
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	TCCR2 = 0x00;
 118:	15 bc       	out	0x25, r1	; 37
	CNTsonic = TCNT2;
 11a:	84 b5       	in	r24, 0x24	; 36
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 50 01 	sts	0x0150, r25
 122:	80 93 4f 01 	sts	0x014F, r24
	VALsonic = (((CNTsonic * 64) * 34300)/2000000);		//초음파 거리연산
 126:	60 91 4f 01 	lds	r22, 0x014F
 12a:	70 91 50 01 	lds	r23, 0x0150
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e1 f7       	brne	.-8      	; 0x130 <__vector_6+0x3e>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2c ef       	ldi	r18, 0xFC	; 252
 13e:	35 e8       	ldi	r19, 0x85	; 133
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsi3>
 148:	20 e8       	ldi	r18, 0x80	; 128
 14a:	34 e8       	ldi	r19, 0x84	; 132
 14c:	4e e1       	ldi	r20, 0x1E	; 30
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divmodsi4>
 154:	20 93 55 01 	sts	0x0155, r18

	TCCR2 = ( 1 << CS20 ) | ( 0 << CS21 ) | ( 1 << CS22 );
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	85 bd       	out	0x25, r24	; 37
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0b be       	out	0x3b, r0	; 59
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_7>:

ISR(INT6_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
	TCNT2 = 0;
 18c:	14 bc       	out	0x24, r1	; 36
}
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_8>:

ISR(INT7_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	8f 93       	push	r24
	if(mAUTO == 1)			mAUTO = 0;
 1a4:	80 91 5c 01 	lds	r24, 0x015C
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <__vector_8+0x1a>
 1ac:	10 92 5c 01 	sts	0x015C, r1
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <__vector_8+0x28>
	else if(mAUTO == 0)	mAUTO = 1;
 1b2:	80 91 5c 01 	lds	r24, 0x015C
 1b6:	88 23       	and	r24, r24
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_8+0x28>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 5c 01 	sts	0x015C, r24
	else {}
}
 1c0:	8f 91       	pop	r24
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__vector_18>:

ISR(USART0_RX_vect)
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
	Disable_ISR();
 1d8:	8f b7       	in	r24, 0x3f	; 63
 1da:	8f 77       	andi	r24, 0x7F	; 127
 1dc:	8f bf       	out	0x3f, r24	; 63
	
	Get_data = UDR0;
 1de:	8c b1       	in	r24, 0x0c	; 12
 1e0:	80 93 57 01 	sts	0x0157, r24
	if(1)	//not use
	{
		if(Get_data == 'A')
 1e4:	81 34       	cpi	r24, 0x41	; 65
 1e6:	81 f4       	brne	.+32     	; 0x208 <__vector_18+0x3c>
		{
			if(mAUTO == 1)			mAUTO = 0;
 1e8:	80 91 5c 01 	lds	r24, 0x015C
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <__vector_18+0x2a>
 1f0:	10 92 5c 01 	sts	0x015C, r1
 1f4:	4f c0       	rjmp	.+158    	; 0x294 <__vector_18+0xc8>
			else if(mAUTO == 0)	mAUTO = 1;
 1f6:	80 91 5c 01 	lds	r24, 0x015C
 1fa:	88 23       	and	r24, r24
 1fc:	09 f0       	breq	.+2      	; 0x200 <__vector_18+0x34>
 1fe:	4a c0       	rjmp	.+148    	; 0x294 <__vector_18+0xc8>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 5c 01 	sts	0x015C, r24
 206:	46 c0       	rjmp	.+140    	; 0x294 <__vector_18+0xc8>
			else {}
			Get_data = 0;
		}

		else if(Get_data == 'B')
 208:	82 34       	cpi	r24, 0x42	; 66
 20a:	69 f4       	brne	.+26     	; 0x226 <__vector_18+0x5a>
		{
			if(state_sensor == 1)			state_sensor = 0;
 20c:	80 91 5d 01 	lds	r24, 0x015D
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	19 f4       	brne	.+6      	; 0x21a <__vector_18+0x4e>
 214:	10 92 5d 01 	sts	0x015D, r1
 218:	3d c0       	rjmp	.+122    	; 0x294 <__vector_18+0xc8>
			else if(state_sensor == 0)	state_sensor = 1;
 21a:	88 23       	and	r24, r24
 21c:	d9 f5       	brne	.+118    	; 0x294 <__vector_18+0xc8>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 5d 01 	sts	0x015D, r24
 224:	37 c0       	rjmp	.+110    	; 0x294 <__vector_18+0xc8>
			Get_data = 0;
		}
		else if(Get_data == 'D')
 226:	84 34       	cpi	r24, 0x44	; 68
 228:	21 f4       	brne	.+8      	; 0x232 <__vector_18+0x66>
		{
			target_temp+=5;
 22a:	80 91 51 01 	lds	r24, 0x0151
 22e:	8b 5f       	subi	r24, 0xFB	; 251
 230:	05 c0       	rjmp	.+10     	; 0x23c <__vector_18+0x70>
			Get_data = 0;
		}
		else if(Get_data == 'E')
 232:	85 34       	cpi	r24, 0x45	; 69
 234:	31 f4       	brne	.+12     	; 0x242 <__vector_18+0x76>
		{
			target_temp-=5;
 236:	80 91 51 01 	lds	r24, 0x0151
 23a:	85 50       	subi	r24, 0x05	; 5
 23c:	80 93 51 01 	sts	0x0151, r24
 240:	29 c0       	rjmp	.+82     	; 0x294 <__vector_18+0xc8>
			Get_data = 0;
		}
		else if(Get_data == 'F')
 242:	86 34       	cpi	r24, 0x46	; 70
 244:	21 f4       	brne	.+8      	; 0x24e <__vector_18+0x82>
		{
			target_humi+=5;
 246:	80 91 4b 01 	lds	r24, 0x014B
 24a:	8b 5f       	subi	r24, 0xFB	; 251
 24c:	05 c0       	rjmp	.+10     	; 0x258 <__vector_18+0x8c>
			Get_data = 0;
		}
		else if(Get_data == 'G')
 24e:	87 34       	cpi	r24, 0x47	; 71
 250:	31 f4       	brne	.+12     	; 0x25e <__vector_18+0x92>
		{
			target_humi-=5;
 252:	80 91 4b 01 	lds	r24, 0x014B
 256:	85 50       	subi	r24, 0x05	; 5
 258:	80 93 4b 01 	sts	0x014B, r24
 25c:	1b c0       	rjmp	.+54     	; 0x294 <__vector_18+0xc8>
			Get_data = 0;
		}
		else if(Get_data == 'H')
 25e:	88 34       	cpi	r24, 0x48	; 72
 260:	41 f4       	brne	.+16     	; 0x272 <__vector_18+0xa6>
		{
			if(mAUTO ==0)	TargetTime++;
 262:	80 91 5c 01 	lds	r24, 0x015C
 266:	88 23       	and	r24, r24
 268:	a9 f4       	brne	.+42     	; 0x294 <__vector_18+0xc8>
 26a:	80 91 35 01 	lds	r24, 0x0135
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	09 c0       	rjmp	.+18     	; 0x284 <__vector_18+0xb8>
			Get_data = 0;
		}
		else if(Get_data == 'I')
 272:	89 34       	cpi	r24, 0x49	; 73
 274:	51 f4       	brne	.+20     	; 0x28a <__vector_18+0xbe>
		{
			if(mAUTO ==0)	TargetTime--;
 276:	80 91 5c 01 	lds	r24, 0x015C
 27a:	88 23       	and	r24, r24
 27c:	59 f4       	brne	.+22     	; 0x294 <__vector_18+0xc8>
 27e:	80 91 35 01 	lds	r24, 0x0135
 282:	81 50       	subi	r24, 0x01	; 1
 284:	80 93 35 01 	sts	0x0135, r24
 288:	05 c0       	rjmp	.+10     	; 0x294 <__vector_18+0xc8>
			Get_data = 0;
		}
		else if(Get_data == 'C')
 28a:	83 34       	cpi	r24, 0x43	; 67
 28c:	29 f4       	brne	.+10     	; 0x298 <__vector_18+0xcc>
		{
			Timerflag = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 40 01 	sts	0x0140, r24
			Get_data = 0;
 294:	10 92 57 01 	sts	0x0157, r1
		}
	}
	Enable_ISR();
 298:	8f b7       	in	r24, 0x3f	; 63
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	8f bf       	out	0x3f, r24	; 63
}
 29e:	8f 91       	pop	r24
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <Command>:
	_delay_ms(2);
	Command(0x06);
}

void Command(unsigned char byte)
{
 2aa:	48 2f       	mov	r20, r24
 2ac:	8c e2       	ldi	r24, 0x2C	; 44
 2ae:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2b0:	20 e9       	ldi	r18, 0x90	; 144
 2b2:	31 e0       	ldi	r19, 0x01	; 1
 2b4:	f9 01       	movw	r30, r18
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Command+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2bc:	d9 f7       	brne	.-10     	; 0x2b4 <Command+0xa>
	_delay_ms(30);
	PORTA = 0x00;
 2be:	1b ba       	out	0x1b, r1	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2c0:	85 e0       	ldi	r24, 0x05	; 5
 2c2:	98 2f       	mov	r25, r24
 2c4:	9a 95       	dec	r25
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <Command+0x1a>
	_delay_us(1);
	PORTA = 0x04;
 2c8:	94 e0       	ldi	r25, 0x04	; 4
 2ca:	9b bb       	out	0x1b, r25	; 27
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <Command+0x22>
	_delay_us(1);
	PORTC = byte;
 2d0:	45 bb       	out	0x15, r20	; 21
	PORTA = 0x03;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	8b bb       	out	0x1b, r24	; 27
 2d6:	8c e2       	ldi	r24, 0x2C	; 44
 2d8:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2da:	20 e9       	ldi	r18, 0x90	; 144
 2dc:	31 e0       	ldi	r19, 0x01	; 1
 2de:	f9 01       	movw	r30, r18
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Command+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e6:	d9 f7       	brne	.-10     	; 0x2de <Command+0x34>
	_delay_ms(30);
	PORTA = 0x00;
 2e8:	1b ba       	out	0x1b, r1	; 27
}
 2ea:	08 95       	ret

000002ec <Lcd_Init>:
	
	Enable_ISR();
}

void Lcd_Init(void)
{
 2ec:	1f 93       	push	r17
	
	DDRC = 0xff; 
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x07;
 2f2:	87 e0       	ldi	r24, 0x07	; 7
 2f4:	8a bb       	out	0x1a, r24	; 26
 2f6:	84 ef       	ldi	r24, 0xF4	; 244
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	20 e9       	ldi	r18, 0x90	; 144
 2fc:	31 e0       	ldi	r19, 0x01	; 1
 2fe:	f9 01       	movw	r30, r18
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <Lcd_Init+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 304:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 306:	d9 f7       	brne	.-10     	; 0x2fe <Lcd_Init+0x12>
	
	_delay_ms(50);

	Command(0x3C);
 308:	8c e3       	ldi	r24, 0x3C	; 60
 30a:	0e 94 55 01 	call	0x2aa	; 0x2aa <Command>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 30e:	15 ed       	ldi	r17, 0xD5	; 213
 310:	81 2f       	mov	r24, r17
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <Lcd_Init+0x26>
	_delay_us(40);
	Command(0x0F);
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	0e 94 55 01 	call	0x2aa	; 0x2aa <Command>
 31c:	1a 95       	dec	r17
 31e:	f1 f7       	brne	.-4      	; 0x31c <Lcd_Init+0x30>
	_delay_us(40);
	Command(0x01);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 55 01 	call	0x2aa	; 0x2aa <Command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 326:	80 e4       	ldi	r24, 0x40	; 64
 328:	9f e1       	ldi	r25, 0x1F	; 31
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <Lcd_Init+0x3e>
	_delay_ms(2);
	Command(0x06);
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	0e 94 55 01 	call	0x2aa	; 0x2aa <Command>
}
 334:	1f 91       	pop	r17
 336:	08 95       	ret

00000338 <Data>:
	PORTA = 0x00;
}

void Data(unsigned char byte)
{
	PORTA = 0x01;
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	2b bb       	out	0x1b, r18	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 33c:	95 e0       	ldi	r25, 0x05	; 5
 33e:	39 2f       	mov	r19, r25
 340:	3a 95       	dec	r19
 342:	f1 f7       	brne	.-4      	; 0x340 <Data+0x8>
	_delay_us(1);
	PORTA = 0x05;
 344:	9b bb       	out	0x1b, r25	; 27
 346:	9a 95       	dec	r25
 348:	f1 f7       	brne	.-4      	; 0x346 <Data+0xe>
	_delay_us(1);
	PORTC = byte;
 34a:	85 bb       	out	0x15, r24	; 21
	PORTA = 0x01;
 34c:	2b bb       	out	0x1b, r18	; 27
 34e:	8c e2       	ldi	r24, 0x2C	; 44
 350:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 352:	20 e9       	ldi	r18, 0x90	; 144
 354:	31 e0       	ldi	r19, 0x01	; 1
 356:	f9 01       	movw	r30, r18
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <Data+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 35e:	d9 f7       	brne	.-10     	; 0x356 <Data+0x1e>
	_delay_ms(30);
	PORTA = 0x00;
 360:	1b ba       	out	0x1b, r1	; 27
}
 362:	08 95       	ret

00000364 <Put_Lcd_Char>:

void Put_Lcd_Char(char Lcd_Data)
{ 
     Data(Lcd_Data); 
 364:	0e 94 9c 01 	call	0x338	; 0x338 <Data>
 368:	88 ec       	ldi	r24, 0xC8	; 200
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	20 e9       	ldi	r18, 0x90	; 144
 36e:	31 e0       	ldi	r19, 0x01	; 1
 370:	f9 01       	movw	r30, r18
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <Put_Lcd_Char+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 376:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 378:	d9 f7       	brne	.-10     	; 0x370 <Put_Lcd_Char+0xc>
     _delay_ms(20);
}
 37a:	08 95       	ret

0000037c <Put_Lcd_String>:

void Put_Lcd_String( char *Lcd_Data) 
{ 
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
 382:	03 c0       	rjmp	.+6      	; 0x38a <Put_Lcd_String+0xe>
	while(*Lcd_Data != 0x00) 
    { 
    	Put_Lcd_Char(*Lcd_Data); 
 384:	0e 94 b2 01 	call	0x364	; 0x364 <Put_Lcd_Char>
        ++Lcd_Data;
 388:	21 96       	adiw	r28, 0x01	; 1
     _delay_ms(20);
}

void Put_Lcd_String( char *Lcd_Data) 
{ 
	while(*Lcd_Data != 0x00) 
 38a:	88 81       	ld	r24, Y
 38c:	88 23       	and	r24, r24
 38e:	d1 f7       	brne	.-12     	; 0x384 <Put_Lcd_String+0x8>
    { 
    	Put_Lcd_Char(*Lcd_Data); 
        ++Lcd_Data;
    } 
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <Display_Position>:

void Display_Position(unsigned char line, unsigned char col) 
{ 
     if( line == 0 ) 
 396:	88 23       	and	r24, r24
 398:	19 f4       	brne	.+6      	; 0x3a0 <Display_Position+0xa>
     	Command( 0x80 + col );
 39a:	86 2f       	mov	r24, r22
 39c:	80 58       	subi	r24, 0x80	; 128
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Display_Position+0xe>
     else 
        Command( 0xc0 + col ); 
 3a0:	86 2f       	mov	r24, r22
 3a2:	80 54       	subi	r24, 0x40	; 64
 3a4:	0e 94 55 01 	call	0x2aa	; 0x2aa <Command>
 3a8:	08 95       	ret

000003aa <Lcd_Put_Char_Xy>:
}

void Lcd_Put_Char_Xy(unsigned char line, unsigned char col, unsigned char Lcd_Data)
{
 3aa:	1f 93       	push	r17
 3ac:	14 2f       	mov	r17, r20
	Display_Position( line, col );
 3ae:	0e 94 cb 01 	call	0x396	; 0x396 <Display_Position>
	Put_Lcd_Char( Lcd_Data );
 3b2:	81 2f       	mov	r24, r17
 3b4:	0e 94 b2 01 	call	0x364	; 0x364 <Put_Lcd_Char>
}
 3b8:	1f 91       	pop	r17
 3ba:	08 95       	ret

000003bc <Lcd_Print_Xy>:

void Lcd_Print_Xy(unsigned char line, unsigned char col, char *Lcd_Data)
{
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	8a 01       	movw	r16, r20
	Display_Position( line, col );
 3c2:	0e 94 cb 01 	call	0x396	; 0x396 <Display_Position>
	Put_Lcd_String( Lcd_Data );
 3c6:	c8 01       	movw	r24, r16
 3c8:	0e 94 be 01 	call	0x37c	; 0x37c <Put_Lcd_String>
}
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <Lcd_Print_Num>:

void Lcd_Print_Num(unsigned char line, unsigned char col, unsigned char data)
{
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	f8 2e       	mov	r15, r24
 3da:	16 2f       	mov	r17, r22
 3dc:	04 2f       	mov	r16, r20
	unsigned char Temp;
	
	Temp = data / 10;
	Lcd_Put_Char_Xy(line, col, Temp+48);
 3de:	84 2f       	mov	r24, r20
 3e0:	6a e0       	ldi	r22, 0x0A	; 10
 3e2:	0e 94 c0 06 	call	0xd80	; 0xd80 <__udivmodqi4>
 3e6:	48 2f       	mov	r20, r24
 3e8:	40 5d       	subi	r20, 0xD0	; 208
 3ea:	8f 2d       	mov	r24, r15
 3ec:	61 2f       	mov	r22, r17
 3ee:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Lcd_Put_Char_Xy>
	Temp = data % 10;
	Lcd_Put_Char_Xy(line, col+1, Temp+48);
 3f2:	1f 5f       	subi	r17, 0xFF	; 255
 3f4:	80 2f       	mov	r24, r16
 3f6:	6a e0       	ldi	r22, 0x0A	; 10
 3f8:	0e 94 c0 06 	call	0xd80	; 0xd80 <__udivmodqi4>
 3fc:	90 5d       	subi	r25, 0xD0	; 208
 3fe:	8f 2d       	mov	r24, r15
 400:	61 2f       	mov	r22, r17
 402:	49 2f       	mov	r20, r25
 404:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Lcd_Put_Char_Xy>
}
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	08 95       	ret

00000410 <Lcd_Print_U16digit>:

void Lcd_Print_U16digit(unsigned char line, unsigned char col, unsigned int data)	//0~65535
{
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	08 2f       	mov	r16, r24
 41a:	16 2f       	mov	r17, r22
 41c:	7a 01       	movw	r14, r20
	unsigned char Temp;
	
	Temp = data / 10000;
	Lcd_Put_Char_Xy(line, col, Temp+48);
 41e:	ca 01       	movw	r24, r20
 420:	60 e1       	ldi	r22, 0x10	; 16
 422:	77 e2       	ldi	r23, 0x27	; 39
 424:	0e 94 cc 06 	call	0xd98	; 0xd98 <__udivmodhi4>
 428:	46 2f       	mov	r20, r22
 42a:	40 5d       	subi	r20, 0xD0	; 208
 42c:	80 2f       	mov	r24, r16
 42e:	61 2f       	mov	r22, r17
 430:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Lcd_Put_Char_Xy>
	Temp = (data % 10000) / 1000;
	Lcd_Put_Char_Xy(line, col+1, Temp+48);
 434:	1f 5f       	subi	r17, 0xFF	; 255
 436:	c7 01       	movw	r24, r14
 438:	60 e1       	ldi	r22, 0x10	; 16
 43a:	77 e2       	ldi	r23, 0x27	; 39
 43c:	0e 94 cc 06 	call	0xd98	; 0xd98 <__udivmodhi4>
 440:	68 ee       	ldi	r22, 0xE8	; 232
 442:	73 e0       	ldi	r23, 0x03	; 3
 444:	0e 94 cc 06 	call	0xd98	; 0xd98 <__udivmodhi4>
 448:	46 2f       	mov	r20, r22
 44a:	40 5d       	subi	r20, 0xD0	; 208
 44c:	80 2f       	mov	r24, r16
 44e:	61 2f       	mov	r22, r17
 450:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Lcd_Put_Char_Xy>
	Temp = (data % 1000) / 100;
	Lcd_Put_Char_Xy(line, col+2, Temp+48);
 454:	1f 5f       	subi	r17, 0xFF	; 255
 456:	c7 01       	movw	r24, r14
 458:	68 ee       	ldi	r22, 0xE8	; 232
 45a:	73 e0       	ldi	r23, 0x03	; 3
 45c:	0e 94 cc 06 	call	0xd98	; 0xd98 <__udivmodhi4>
 460:	64 e6       	ldi	r22, 0x64	; 100
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	0e 94 cc 06 	call	0xd98	; 0xd98 <__udivmodhi4>
 468:	46 2f       	mov	r20, r22
 46a:	40 5d       	subi	r20, 0xD0	; 208
 46c:	80 2f       	mov	r24, r16
 46e:	61 2f       	mov	r22, r17
 470:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Lcd_Put_Char_Xy>
	Temp = (data % 100) / 10;
	Lcd_Put_Char_Xy(line, col+3, Temp+48);
 474:	1f 5f       	subi	r17, 0xFF	; 255
 476:	c7 01       	movw	r24, r14
 478:	64 e6       	ldi	r22, 0x64	; 100
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	0e 94 cc 06 	call	0xd98	; 0xd98 <__udivmodhi4>
 480:	6a e0       	ldi	r22, 0x0A	; 10
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	0e 94 cc 06 	call	0xd98	; 0xd98 <__udivmodhi4>
 488:	46 2f       	mov	r20, r22
 48a:	40 5d       	subi	r20, 0xD0	; 208
 48c:	80 2f       	mov	r24, r16
 48e:	61 2f       	mov	r22, r17
 490:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Lcd_Put_Char_Xy>
	Temp = data % 10;
	Lcd_Put_Char_Xy(line, col+4, Temp+48);
 494:	1f 5f       	subi	r17, 0xFF	; 255
 496:	c7 01       	movw	r24, r14
 498:	6a e0       	ldi	r22, 0x0A	; 10
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	0e 94 cc 06 	call	0xd98	; 0xd98 <__udivmodhi4>
 4a0:	48 2f       	mov	r20, r24
 4a2:	40 5d       	subi	r20, 0xD0	; 208
 4a4:	80 2f       	mov	r24, r16
 4a6:	61 2f       	mov	r22, r17
 4a8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Lcd_Put_Char_Xy>
}
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	08 95       	ret

000004b6 <Timer0_Init>:

void Timer0_Init(void)

{                
	sbi( TIMSK, TOIE0 ); 
 4b6:	87 b7       	in	r24, 0x37	; 55
 4b8:	81 60       	ori	r24, 0x01	; 1
 4ba:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0;	
 4bc:	12 be       	out	0x32, r1	; 50
		
	TCCR0 = ( 0 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );	
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	83 bf       	out	0x33, r24	; 51
}
 4c2:	08 95       	ret

000004c4 <Timer2_Init>:

void Timer2_Init(void)        
{   
	sbi( TIMSK, TOIE2 );    
 4c4:	87 b7       	in	r24, 0x37	; 55
 4c6:	80 64       	ori	r24, 0x40	; 64
 4c8:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 55;
 4ca:	87 e3       	ldi	r24, 0x37	; 55
 4cc:	84 bd       	out	0x24, r24	; 36
		
	TCCR2 = ( 1 << CS20 ) | ( 0 << CS21 ) | ( 1 << CS22 );	
 4ce:	85 e0       	ldi	r24, 0x05	; 5
 4d0:	85 bd       	out	0x25, r24	; 37
}
 4d2:	08 95       	ret

000004d4 <Ext_Interrupt5_Init>:

void Ext_Interrupt5_Init(void)
{
	sbi( EICRB, ISC51 );    // FALLING EDGE ENABLE
 4d4:	8a b7       	in	r24, 0x3a	; 58
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	8a bf       	out	0x3a, r24	; 58
	cbi( EICRB, ISC50 );  
 4da:	8a b7       	in	r24, 0x3a	; 58
 4dc:	8b 7f       	andi	r24, 0xFB	; 251
 4de:	8a bf       	out	0x3a, r24	; 58
	sbi( EIMSK, INT5  ); 
 4e0:	89 b7       	in	r24, 0x39	; 57
 4e2:	80 62       	ori	r24, 0x20	; 32
 4e4:	89 bf       	out	0x39, r24	; 57
	cbi( EIFR , INTF5 ); 
 4e6:	88 b7       	in	r24, 0x38	; 56
 4e8:	8f 7d       	andi	r24, 0xDF	; 223
 4ea:	88 bf       	out	0x38, r24	; 56
	cbi(DDRE, 5);  
 4ec:	15 98       	cbi	0x02, 5	; 2
	sbi(PORTE, 5);	
 4ee:	1d 9a       	sbi	0x03, 5	; 3
}
 4f0:	08 95       	ret

000004f2 <Ext_Interrupt6_Init>:

void Ext_Interrupt6_Init(void)
{
	sbi( EICRB, ISC61 );    // RISING EDGE ENABLE
 4f2:	8a b7       	in	r24, 0x3a	; 58
 4f4:	80 62       	ori	r24, 0x20	; 32
 4f6:	8a bf       	out	0x3a, r24	; 58
	sbi( EICRB, ISC60 );  
 4f8:	8a b7       	in	r24, 0x3a	; 58
 4fa:	80 61       	ori	r24, 0x10	; 16
 4fc:	8a bf       	out	0x3a, r24	; 58
	sbi( EIMSK, INT6  ); 
 4fe:	89 b7       	in	r24, 0x39	; 57
 500:	80 64       	ori	r24, 0x40	; 64
 502:	89 bf       	out	0x39, r24	; 57
	cbi( EIFR , INTF6 );  
 504:	88 b7       	in	r24, 0x38	; 56
 506:	8f 7b       	andi	r24, 0xBF	; 191
 508:	88 bf       	out	0x38, r24	; 56
	cbi(DDRE, 6);  
 50a:	16 98       	cbi	0x02, 6	; 2
	sbi(PORTE, 6);
 50c:	1e 9a       	sbi	0x03, 6	; 3
}
 50e:	08 95       	ret

00000510 <Ext_Interrupt7_Init>:

void Ext_Interrupt7_Init(void)
{
	sbi( EICRB, ISC71 );    // FALLING EDGE ENABLE
 510:	8a b7       	in	r24, 0x3a	; 58
 512:	80 68       	ori	r24, 0x80	; 128
 514:	8a bf       	out	0x3a, r24	; 58
	cbi( EICRB, ISC70 );  
 516:	8a b7       	in	r24, 0x3a	; 58
 518:	8f 7b       	andi	r24, 0xBF	; 191
 51a:	8a bf       	out	0x3a, r24	; 58
	sbi( EIMSK, INT7  ); 
 51c:	89 b7       	in	r24, 0x39	; 57
 51e:	80 68       	ori	r24, 0x80	; 128
 520:	89 bf       	out	0x39, r24	; 57
	cbi( EIFR , INTF7 );  
 522:	88 b7       	in	r24, 0x38	; 56
 524:	8f 77       	andi	r24, 0x7F	; 127
 526:	88 bf       	out	0x38, r24	; 56
	cbi(DDRE, 7);  
 528:	17 98       	cbi	0x02, 7	; 2
	sbi(PORTE, 7);
 52a:	1f 9a       	sbi	0x03, 7	; 3
}
 52c:	08 95       	ret

0000052e <ADC_Init>:


void ADC_Init(void)
{
	DDRF = 0x00;
 52e:	10 92 61 00 	sts	0x0061, r1

	ADMUX = 0x00;
 532:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
 534:	16 b8       	out	0x06, r1	; 6

	sbi( ADCSRA, ADPS0 );
 536:	30 9a       	sbi	0x06, 0	; 6
	sbi( ADCSRA, ADPS1 );
 538:	31 9a       	sbi	0x06, 1	; 6
	sbi( ADCSRA, ADPS2 );		//프리스케일러 128분주
 53a:	32 9a       	sbi	0x06, 2	; 6

	sbi( ADCSRA, ADEN );		   	// ADC EN
 53c:	37 9a       	sbi	0x06, 7	; 6

	ADMUX = 1;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	87 b9       	out	0x07, r24	; 7
}
 542:	08 95       	ret

00000544 <ADC_Read>:

unsigned int ADC_Read(unsigned char Channel)
{
	unsigned int value = 0;

	ADMUX = Channel;
 544:	87 b9       	out	0x07, r24	; 7
	
	sbi( ADCSRA, ADSC );		// ADC Conversion Start
 546:	36 9a       	sbi	0x06, 6	; 6
	
	while( ADCSRA & ( 1 << ADSC ) ); 	// wait ADC conversion complete
 548:	36 99       	sbic	0x06, 6	; 6
 54a:	fe cf       	rjmp	.-4      	; 0x548 <ADC_Read+0x4>

	value = ADCL;
 54c:	24 b1       	in	r18, 0x04	; 4
 54e:	30 e0       	ldi	r19, 0x00	; 0
	value |= (unsigned int)ADCH << 8;
 550:	45 b1       	in	r20, 0x05	; 5
 552:	94 2f       	mov	r25, r20
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	28 2b       	or	r18, r24
 558:	39 2b       	or	r19, r25
	
	return value;
}
 55a:	c9 01       	movw	r24, r18
 55c:	08 95       	ret

0000055e <Init_Uart>:

void Init_Uart(unsigned int want_Baud)
{
	unsigned int Temp_UBRR;

	Temp_UBRR = 16000000L/(16L * want_Baud) - 1;   	
 55e:	9c 01       	movw	r18, r24
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	50 e0       	ldi	r21, 0x00	; 0
 564:	94 e0       	ldi	r25, 0x04	; 4
 566:	22 0f       	add	r18, r18
 568:	33 1f       	adc	r19, r19
 56a:	44 1f       	adc	r20, r20
 56c:	55 1f       	adc	r21, r21
 56e:	9a 95       	dec	r25
 570:	d1 f7       	brne	.-12     	; 0x566 <Init_Uart+0x8>
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	74 e2       	ldi	r23, 0x24	; 36
 576:	84 ef       	ldi	r24, 0xF4	; 244
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divmodsi4>
 57e:	21 50       	subi	r18, 0x01	; 1
 580:	30 40       	sbci	r19, 0x00	; 0
													
	UBRR0H = (Temp_UBRR >> 8);            
 582:	30 93 90 00 	sts	0x0090, r19
	UBRR0L = (Temp_UBRR & 0x00FF);
 586:	29 b9       	out	0x09, r18	; 9
		
	UCSR0A = (0<<RXC0)  | (1<<UDRE0);		
 588:	80 e2       	ldi	r24, 0x20	; 32
 58a:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);  		
 58c:	88 e1       	ldi	r24, 0x18	; 24
 58e:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (3<<UCSZ00);				
 590:	86 e0       	ldi	r24, 0x06	; 6
 592:	80 93 95 00 	sts	0x0095, r24
		
	cbi( DDRE, 0 );                     
 596:	10 98       	cbi	0x02, 0	; 2
	sbi( DDRE, 1 );                
 598:	11 9a       	sbi	0x02, 1	; 2
	
	UCSR0B |=  (1<<RXCIE0);	       
 59a:	57 9a       	sbi	0x0a, 7	; 10
}
 59c:	08 95       	ret

0000059e <Init_main>:
	return 0;
}

void Init_main(void)
{
	Disable_ISR();
 59e:	8f b7       	in	r24, 0x3f	; 63
 5a0:	8f 77       	andi	r24, 0x7F	; 127
 5a2:	8f bf       	out	0x3f, r24	; 63
	
	Lcd_Init();
 5a4:	0e 94 76 01 	call	0x2ec	; 0x2ec <Lcd_Init>
}

void Timer0_Init(void)

{                
	sbi( TIMSK, TOIE0 ); 
 5a8:	87 b7       	in	r24, 0x37	; 55
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0;	
 5ae:	12 be       	out	0x32, r1	; 50
		
	TCCR0 = ( 0 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );	
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	83 bf       	out	0x33, r24	; 51
}

void Timer2_Init(void)        
{   
	sbi( TIMSK, TOIE2 );    
 5b4:	87 b7       	in	r24, 0x37	; 55
 5b6:	80 64       	ori	r24, 0x40	; 64
 5b8:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 55;
 5ba:	87 e3       	ldi	r24, 0x37	; 55
 5bc:	84 bd       	out	0x24, r24	; 36
		
	TCCR2 = ( 1 << CS20 ) | ( 0 << CS21 ) | ( 1 << CS22 );	
 5be:	85 e0       	ldi	r24, 0x05	; 5
 5c0:	85 bd       	out	0x25, r24	; 37
	Disable_ISR();
	
	Lcd_Init();
	Timer0_Init();
	Timer2_Init();
	Ext_Interrupt5_Init();
 5c2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Ext_Interrupt5_Init>
	Ext_Interrupt6_Init();
 5c6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Ext_Interrupt6_Init>
	Ext_Interrupt7_Init();
 5ca:	0e 94 88 02 	call	0x510	; 0x510 <Ext_Interrupt7_Init>
	ADC_Init();
 5ce:	0e 94 97 02 	call	0x52e	; 0x52e <ADC_Init>
	Init_Uart(9600);
 5d2:	80 e8       	ldi	r24, 0x80	; 128
 5d4:	95 e2       	ldi	r25, 0x25	; 37
 5d6:	0e 94 af 02 	call	0x55e	; 0x55e <Init_Uart>
	
	//sbi(DDRE,3);
	sbi(DDRE,4);
 5da:	14 9a       	sbi	0x02, 4	; 2
	
	sbi(DDRG, 0);
 5dc:	e4 e6       	ldi	r30, 0x64	; 100
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	80 83       	st	Z, r24
	
	DDRB = 0xFF;
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 5ea:	81 bb       	out	0x11, r24	; 17
	
	Enable_ISR();
 5ec:	8f b7       	in	r24, 0x3f	; 63
 5ee:	80 68       	ori	r24, 0x80	; 128
 5f0:	8f bf       	out	0x3f, r24	; 63
}
 5f2:	08 95       	ret

000005f4 <main>:
	Enable_ISR();
}

int main(void)
{
	Init_main();
 5f4:	0e 94 cf 02 	call	0x59e	; 0x59e <Init_main>

	while(1)
	{
		PORTB = DISFND[nFND[1]]; 
 5f8:	e0 91 42 01 	lds	r30, 0x0142
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	ea 5c       	subi	r30, 0xCA	; 202
 600:	fe 4f       	sbci	r31, 0xFE	; 254
 602:	80 81       	ld	r24, Z
 604:	88 bb       	out	0x18, r24	; 24
		PORTD = DISFND[nFND[0]];
 606:	e0 91 41 01 	lds	r30, 0x0141
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	ea 5c       	subi	r30, 0xCA	; 202
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	80 81       	ld	r24, Z
 612:	82 bb       	out	0x12, r24	; 18
		
		sens_humi = (float)ADC_Read(1);
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 a2 02 	call	0x544	; 0x544 <ADC_Read>
 61a:	a0 e0       	ldi	r26, 0x00	; 0
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	bc 01       	movw	r22, r24
 620:	cd 01       	movw	r24, r26
 622:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatunsisf>
 626:	60 93 47 01 	sts	0x0147, r22
 62a:	70 93 48 01 	sts	0x0148, r23
 62e:	80 93 49 01 	sts	0x0149, r24
 632:	90 93 4a 01 	sts	0x014A, r25
		sens_temp = (float)ADC_Read(0);
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 a2 02 	call	0x544	; 0x544 <ADC_Read>
 63c:	a0 e0       	ldi	r26, 0x00	; 0
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	bc 01       	movw	r22, r24
 642:	cd 01       	movw	r24, r26
 644:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatunsisf>
 648:	60 93 58 01 	sts	0x0158, r22
 64c:	70 93 59 01 	sts	0x0159, r23
 650:	80 93 5a 01 	sts	0x015A, r24
 654:	90 93 5b 01 	sts	0x015B, r25

		//if(PING & (1 << 0))		mAUTO = 1;		//auto mode on
		//else					mAUTO = 0;		//auto mode off


		if(mAUTO == 1)
 658:	80 91 5c 01 	lds	r24, 0x015C
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	09 f0       	breq	.+2      	; 0x662 <main+0x6e>
 660:	79 c0       	rjmp	.+242    	; 0x754 <main+0x160>
		{			
			Lcd_Print_Num(0, 0, temp);
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	40 91 4e 01 	lds	r20, 0x014E
 66a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd_Print_Num>
			Lcd_Print_Xy(0, 2, "C/");
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	62 e0       	ldi	r22, 0x02	; 2
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	51 e0       	ldi	r21, 0x01	; 1
 676:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>
			Lcd_Print_Num(0, 4, target_temp);
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	64 e0       	ldi	r22, 0x04	; 4
 67e:	40 91 51 01 	lds	r20, 0x0151
 682:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd_Print_Num>
			Lcd_Print_Xy(0, 6, "C ");
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	66 e0       	ldi	r22, 0x06	; 6
 68a:	43 e0       	ldi	r20, 0x03	; 3
 68c:	51 e0       	ldi	r21, 0x01	; 1
 68e:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>
			
			Lcd_Print_Num(0, 8, humi);
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	68 e0       	ldi	r22, 0x08	; 8
 696:	40 91 43 01 	lds	r20, 0x0143
 69a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd_Print_Num>
			Lcd_Print_Xy(0, 10, "%/");
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	6a e0       	ldi	r22, 0x0A	; 10
 6a2:	46 e0       	ldi	r20, 0x06	; 6
 6a4:	51 e0       	ldi	r21, 0x01	; 1
 6a6:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>
			Lcd_Print_Num(0, 12, target_humi);
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	6c e0       	ldi	r22, 0x0C	; 12
 6ae:	40 91 4b 01 	lds	r20, 0x014B
 6b2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd_Print_Num>
			Lcd_Print_Xy(0, 14, "%");
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	6e e0       	ldi	r22, 0x0E	; 14
 6ba:	49 e0       	ldi	r20, 0x09	; 9
 6bc:	51 e0       	ldi	r21, 0x01	; 1
 6be:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>

			if(sMOTOR == 1)		Lcd_Print_Xy(1, 0, "M_ON  ");
 6c2:	80 91 45 01 	lds	r24, 0x0145
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	21 f4       	brne	.+8      	; 0x6d2 <main+0xde>
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	4b e0       	ldi	r20, 0x0B	; 11
 6ce:	51 e0       	ldi	r21, 0x01	; 1
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <main+0xe6>
			else				Lcd_Print_Xy(1, 0, "M_OFF ");
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	42 e1       	ldi	r20, 0x12	; 18
 6d8:	51 e0       	ldi	r21, 0x01	; 1
 6da:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>

			if(sSENSOR == 1)	Lcd_Print_Xy(1, 6, " S_ON ");
 6de:	80 91 54 01 	lds	r24, 0x0154
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	21 f4       	brne	.+8      	; 0x6ee <main+0xfa>
 6e6:	66 e0       	ldi	r22, 0x06	; 6
 6e8:	49 e1       	ldi	r20, 0x19	; 25
 6ea:	51 e0       	ldi	r21, 0x01	; 1
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <main+0x102>
			else				Lcd_Print_Xy(1, 6, " S_OFF");
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	66 e0       	ldi	r22, 0x06	; 6
 6f2:	40 e2       	ldi	r20, 0x20	; 32
 6f4:	51 e0       	ldi	r21, 0x01	; 1
 6f6:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>

			if(state_sensor == 1)
 6fa:	80 91 5d 01 	lds	r24, 0x015D
 6fe:	20 91 4e 01 	lds	r18, 0x014E
 702:	90 91 51 01 	lds	r25, 0x0151
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	89 f4       	brne	.+34     	; 0x72c <main+0x138>
			{
				sSENSOR = 1;
 70a:	80 93 54 01 	sts	0x0154, r24
				if(((temp > target_temp)||(humi < target_humi))&&(VALsonic > 50))
 70e:	92 17       	cp	r25, r18
 710:	38 f0       	brcs	.+14     	; 0x720 <main+0x12c>
 712:	90 91 43 01 	lds	r25, 0x0143
 716:	80 91 4b 01 	lds	r24, 0x014B
 71a:	98 17       	cp	r25, r24
 71c:	08 f0       	brcs	.+2      	; 0x720 <main+0x12c>
 71e:	84 c0       	rjmp	.+264    	; 0x828 <main+0x234>
 720:	80 91 55 01 	lds	r24, 0x0155
 724:	83 33       	cpi	r24, 0x33	; 51
 726:	08 f4       	brcc	.+2      	; 0x72a <main+0x136>
 728:	7f c0       	rjmp	.+254    	; 0x828 <main+0x234>
 72a:	0b c0       	rjmp	.+22     	; 0x742 <main+0x14e>
					sMOTOR = 0;
				}
			}
			else
			{
				sSENSOR = 0;
 72c:	10 92 54 01 	sts	0x0154, r1
				if((temp > target_temp)||(humi < target_humi))
 730:	92 17       	cp	r25, r18
 732:	38 f0       	brcs	.+14     	; 0x742 <main+0x14e>
 734:	90 91 43 01 	lds	r25, 0x0143
 738:	80 91 4b 01 	lds	r24, 0x014B
 73c:	98 17       	cp	r25, r24
 73e:	08 f0       	brcs	.+2      	; 0x742 <main+0x14e>
 740:	73 c0       	rjmp	.+230    	; 0x828 <main+0x234>
				{
					MOTORON;
 742:	80 91 65 00 	lds	r24, 0x0065
 746:	81 60       	ori	r24, 0x01	; 1
 748:	80 93 65 00 	sts	0x0065, r24
					sMOTOR = 1;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	80 93 45 01 	sts	0x0145, r24
 752:	52 cf       	rjmp	.-348    	; 0x5f8 <main+0x4>
			}
		}

		else
		{
			Lcd_Print_Xy(0, 0, "MODE:Manual  ");
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	47 e2       	ldi	r20, 0x27	; 39
 75a:	51 e0       	ldi	r21, 0x01	; 1
 75c:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>
			Lcd_Print_Num(0,13,TargetTime);
 760:	40 91 35 01 	lds	r20, 0x0135
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	6d e0       	ldi	r22, 0x0D	; 13
 768:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd_Print_Num>

			if(state_sensor == 1)	sSENSOR = 1;
 76c:	80 91 5d 01 	lds	r24, 0x015D
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	19 f4       	brne	.+6      	; 0x77a <main+0x186>
 774:	80 93 54 01 	sts	0x0154, r24
 778:	02 c0       	rjmp	.+4      	; 0x77e <main+0x18a>
			else					sSENSOR = 0;
 77a:	10 92 54 01 	sts	0x0154, r1

			if(sMOTOR == 1)		Lcd_Print_Xy(1, 0, "M_ON  ");
 77e:	80 91 45 01 	lds	r24, 0x0145
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	21 f4       	brne	.+8      	; 0x78e <main+0x19a>
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	4b e0       	ldi	r20, 0x0B	; 11
 78a:	51 e0       	ldi	r21, 0x01	; 1
 78c:	04 c0       	rjmp	.+8      	; 0x796 <main+0x1a2>
			else				Lcd_Print_Xy(1, 0, "M_OFF ");
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	42 e1       	ldi	r20, 0x12	; 18
 794:	51 e0       	ldi	r21, 0x01	; 1
 796:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>

			if(sSENSOR == 1)	Lcd_Print_Xy(1, 6, " S_ON ");
 79a:	80 91 54 01 	lds	r24, 0x0154
 79e:	81 30       	cpi	r24, 0x01	; 1
 7a0:	21 f4       	brne	.+8      	; 0x7aa <main+0x1b6>
 7a2:	66 e0       	ldi	r22, 0x06	; 6
 7a4:	49 e1       	ldi	r20, 0x19	; 25
 7a6:	51 e0       	ldi	r21, 0x01	; 1
 7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <main+0x1be>
			else				Lcd_Print_Xy(1, 6, " S_OFF");
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	66 e0       	ldi	r22, 0x06	; 6
 7ae:	40 e2       	ldi	r20, 0x20	; 32
 7b0:	51 e0       	ldi	r21, 0x01	; 1
 7b2:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Print_Xy>

			if(Timerflag == 1)
 7b6:	20 91 40 01 	lds	r18, 0x0140
 7ba:	21 30       	cpi	r18, 0x01	; 1
 7bc:	a9 f5       	brne	.+106    	; 0x828 <main+0x234>
			{
				if(nTime >= TargetTime)	
 7be:	90 91 56 01 	lds	r25, 0x0156
 7c2:	80 91 35 01 	lds	r24, 0x0135
 7c6:	98 17       	cp	r25, r24
 7c8:	80 f0       	brcs	.+32     	; 0x7ea <main+0x1f6>
				{
					Timerflag = 0;
 7ca:	10 92 40 01 	sts	0x0140, r1
					nTime = 0;
 7ce:	10 92 56 01 	sts	0x0156, r1
					MOTOROFF;
 7d2:	80 91 65 00 	lds	r24, 0x0065
 7d6:	8e 7f       	andi	r24, 0xFE	; 254
 7d8:	80 93 65 00 	sts	0x0065, r24
					sMOTOR = 0;
 7dc:	10 92 45 01 	sts	0x0145, r1
					nFND[0] = 0;//TargetTime / 10;
 7e0:	10 92 41 01 	sts	0x0141, r1
					nFND[1] = 0;//TargetTime % 10;
 7e4:	10 92 42 01 	sts	0x0142, r1
 7e8:	07 cf       	rjmp	.-498    	; 0x5f8 <main+0x4>
				else
				{
					//nFND[0] = (TargetTime - nTime) / 10;
					//nFND[1] = (TargetTime - nTime) % 10;

					if(state_sensor == 1)
 7ea:	90 91 5d 01 	lds	r25, 0x015D
 7ee:	91 30       	cpi	r25, 0x01	; 1
 7f0:	89 f4       	brne	.+34     	; 0x814 <main+0x220>
					{
						if(VALsonic > 50)
 7f2:	80 91 55 01 	lds	r24, 0x0155
 7f6:	83 33       	cpi	r24, 0x33	; 51
 7f8:	50 f0       	brcs	.+20     	; 0x80e <main+0x21a>
						{
							sSENSOR = 1;
 7fa:	90 93 54 01 	sts	0x0154, r25
							MOTORON;
 7fe:	80 91 65 00 	lds	r24, 0x0065
 802:	81 60       	ori	r24, 0x01	; 1
 804:	80 93 65 00 	sts	0x0065, r24
							sMOTOR = 1;
 808:	90 93 45 01 	sts	0x0145, r25
 80c:	f5 ce       	rjmp	.-534    	; 0x5f8 <main+0x4>
						}
						else
						{
							sSENSOR = 1;
 80e:	90 93 54 01 	sts	0x0154, r25
 812:	0a c0       	rjmp	.+20     	; 0x828 <main+0x234>
						}
					}

					else
					{
						sSENSOR = 0;
 814:	10 92 54 01 	sts	0x0154, r1
						MOTORON;
 818:	80 91 65 00 	lds	r24, 0x0065
 81c:	81 60       	ori	r24, 0x01	; 1
 81e:	80 93 65 00 	sts	0x0065, r24
						sMOTOR = 1;
 822:	20 93 45 01 	sts	0x0145, r18
 826:	e8 ce       	rjmp	.-560    	; 0x5f8 <main+0x4>
					
				
			}
			else
			{
				MOTOROFF;
 828:	80 91 65 00 	lds	r24, 0x0065
 82c:	8e 7f       	andi	r24, 0xFE	; 254
 82e:	80 93 65 00 	sts	0x0065, r24
				sMOTOR = 0;
 832:	10 92 45 01 	sts	0x0145, r1
 836:	e0 ce       	rjmp	.-576    	; 0x5f8 <main+0x4>

00000838 <Uart_Putch>:
	UCSR0B |=  (1<<RXCIE0);	       
}

void Uart_Putch(unsigned char PutData)
{
	while(!( UCSR0A & (1<<UDRE0)) ); 
 838:	5d 9b       	sbis	0x0b, 5	; 11
 83a:	fe cf       	rjmp	.-4      	; 0x838 <Uart_Putch>
	UDR0 = PutData;            
 83c:	8c b9       	out	0x0c, r24	; 12
}
 83e:	08 95       	ret

00000840 <SendRemote>:

void SendRemote(void)
{
 840:	df 93       	push	r29
 842:	cf 93       	push	r28
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	28 97       	sbiw	r28, 0x08	; 8
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	f8 94       	cli
 84e:	de bf       	out	0x3e, r29	; 62
 850:	0f be       	out	0x3f, r0	; 63
 852:	cd bf       	out	0x3d, r28	; 61
	unsigned char parameter[8];

	parameter[0] = 0xFF;
 854:	8f ef       	ldi	r24, 0xFF	; 255
 856:	89 83       	std	Y+1, r24	; 0x01
	parameter[1] = mAUTO;
 858:	80 91 5c 01 	lds	r24, 0x015C
 85c:	8a 83       	std	Y+2, r24	; 0x02
	parameter[2] = temp;
 85e:	80 91 4e 01 	lds	r24, 0x014E
 862:	8b 83       	std	Y+3, r24	; 0x03
	parameter[3] = humi;
 864:	80 91 43 01 	lds	r24, 0x0143
 868:	8c 83       	std	Y+4, r24	; 0x04
	parameter[4] = target_temp;
 86a:	80 91 51 01 	lds	r24, 0x0151
 86e:	8d 83       	std	Y+5, r24	; 0x05
	parameter[5] = target_humi;
 870:	80 91 4b 01 	lds	r24, 0x014B
 874:	8e 83       	std	Y+6, r24	; 0x06
	parameter[6] = TargetTime;
 876:	80 91 35 01 	lds	r24, 0x0135
 87a:	8f 83       	std	Y+7, r24	; 0x07
	parameter[7] = 0xEE;
 87c:	8e ee       	ldi	r24, 0xEE	; 238
 87e:	88 87       	std	Y+8, r24	; 0x08
 880:	fe 01       	movw	r30, r28
 882:	31 96       	adiw	r30, 0x01	; 1

	for(unsigned char cnt=0; cnt<=7; cnt++)
 884:	9e 01       	movw	r18, r28
 886:	27 5f       	subi	r18, 0xF7	; 247
 888:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		Uart_Putch(parameter[cnt]);
 88a:	80 81       	ld	r24, Z
	UCSR0B |=  (1<<RXCIE0);	       
}

void Uart_Putch(unsigned char PutData)
{
	while(!( UCSR0A & (1<<UDRE0)) ); 
 88c:	5d 9b       	sbis	0x0b, 5	; 11
 88e:	fe cf       	rjmp	.-4      	; 0x88c <SendRemote+0x4c>
	UDR0 = PutData;            
 890:	8c b9       	out	0x0c, r24	; 12
 892:	31 96       	adiw	r30, 0x01	; 1
	parameter[4] = target_temp;
	parameter[5] = target_humi;
	parameter[6] = TargetTime;
	parameter[7] = 0xEE;

	for(unsigned char cnt=0; cnt<=7; cnt++)
 894:	e2 17       	cp	r30, r18
 896:	f3 07       	cpc	r31, r19
 898:	c1 f7       	brne	.-16     	; 0x88a <SendRemote+0x4a>
	{
		Uart_Putch(parameter[cnt]);
	}	
}
 89a:	28 96       	adiw	r28, 0x08	; 8
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	f8 94       	cli
 8a0:	de bf       	out	0x3e, r29	; 62
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	cd bf       	out	0x3d, r28	; 61
 8a6:	cf 91       	pop	r28
 8a8:	df 91       	pop	r29
 8aa:	08 95       	ret

000008ac <__vector_16>:

unsigned int cnt1s;
unsigned char cnt2s;

ISR(TIMER0_OVF_vect)
{
 8ac:	1f 92       	push	r1
 8ae:	0f 92       	push	r0
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	0f 92       	push	r0
 8b4:	0b b6       	in	r0, 0x3b	; 59
 8b6:	0f 92       	push	r0
 8b8:	11 24       	eor	r1, r1
 8ba:	2f 93       	push	r18
 8bc:	3f 93       	push	r19
 8be:	4f 93       	push	r20
 8c0:	5f 93       	push	r21
 8c2:	6f 93       	push	r22
 8c4:	7f 93       	push	r23
 8c6:	8f 93       	push	r24
 8c8:	9f 93       	push	r25
 8ca:	af 93       	push	r26
 8cc:	bf 93       	push	r27
 8ce:	ef 93       	push	r30
 8d0:	ff 93       	push	r31
	TCNT0 = 131;
 8d2:	83 e8       	ldi	r24, 0x83	; 131
 8d4:	82 bf       	out	0x32, r24	; 50

	cnt1s++;
 8d6:	80 91 52 01 	lds	r24, 0x0152
 8da:	90 91 53 01 	lds	r25, 0x0153
 8de:	01 96       	adiw	r24, 0x01	; 1
 8e0:	90 93 53 01 	sts	0x0153, r25
 8e4:	80 93 52 01 	sts	0x0152, r24
	if(cnt1s >= 500)
 8e8:	84 5f       	subi	r24, 0xF4	; 244
 8ea:	91 40       	sbci	r25, 0x01	; 1
 8ec:	08 f4       	brcc	.+2      	; 0x8f0 <__vector_16+0x44>
 8ee:	91 c0       	rjmp	.+290    	; 0xa12 <__vector_16+0x166>
	{
		cnt1s = 0;
 8f0:	10 92 53 01 	sts	0x0153, r1
 8f4:	10 92 52 01 	sts	0x0152, r1
		cnt2s++;
 8f8:	80 91 44 01 	lds	r24, 0x0144
 8fc:	8f 5f       	subi	r24, 0xFF	; 255
 8fe:	80 93 44 01 	sts	0x0144, r24
		SendRemote();
 902:	0e 94 20 04 	call	0x840	; 0x840 <SendRemote>
		if(cnt2s >= 2)
 906:	80 91 44 01 	lds	r24, 0x0144
 90a:	82 30       	cpi	r24, 0x02	; 2
 90c:	08 f4       	brcc	.+2      	; 0x910 <__vector_16+0x64>
 90e:	50 c0       	rjmp	.+160    	; 0x9b0 <__vector_16+0x104>
		{
			temp = (char)(((sens_temp/1024)*5 - 0.5)*50 - 50);		//calc temp
 910:	60 91 58 01 	lds	r22, 0x0158
 914:	70 91 59 01 	lds	r23, 0x0159
 918:	80 91 5a 01 	lds	r24, 0x015A
 91c:	90 91 5b 01 	lds	r25, 0x015B
 920:	20 e0       	ldi	r18, 0x00	; 0
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	40 e8       	ldi	r20, 0x80	; 128
 926:	5a e3       	ldi	r21, 0x3A	; 58
 928:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 92c:	20 e0       	ldi	r18, 0x00	; 0
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	40 ea       	ldi	r20, 0xA0	; 160
 932:	50 e4       	ldi	r21, 0x40	; 64
 934:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	40 e0       	ldi	r20, 0x00	; 0
 93e:	5f e3       	ldi	r21, 0x3F	; 63
 940:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__subsf3>
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	48 e4       	ldi	r20, 0x48	; 72
 94a:	52 e4       	ldi	r21, 0x42	; 66
 94c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 950:	20 e0       	ldi	r18, 0x00	; 0
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	48 e4       	ldi	r20, 0x48	; 72
 956:	52 e4       	ldi	r21, 0x42	; 66
 958:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__subsf3>
 95c:	0e 94 84 05 	call	0xb08	; 0xb08 <__fixunssfsi>
 960:	60 93 4e 01 	sts	0x014E, r22
			humi = (char)(((sens_humi/1024)*5 - 0.5)*25);			//calc humi
 964:	60 91 47 01 	lds	r22, 0x0147
 968:	70 91 48 01 	lds	r23, 0x0148
 96c:	80 91 49 01 	lds	r24, 0x0149
 970:	90 91 4a 01 	lds	r25, 0x014A
 974:	20 e0       	ldi	r18, 0x00	; 0
 976:	30 e0       	ldi	r19, 0x00	; 0
 978:	40 e8       	ldi	r20, 0x80	; 128
 97a:	5a e3       	ldi	r21, 0x3A	; 58
 97c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 980:	20 e0       	ldi	r18, 0x00	; 0
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	40 ea       	ldi	r20, 0xA0	; 160
 986:	50 e4       	ldi	r21, 0x40	; 64
 988:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	5f e3       	ldi	r21, 0x3F	; 63
 994:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__subsf3>
 998:	20 e0       	ldi	r18, 0x00	; 0
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	48 ec       	ldi	r20, 0xC8	; 200
 99e:	51 e4       	ldi	r21, 0x41	; 65
 9a0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 9a4:	0e 94 84 05 	call	0xb08	; 0xb08 <__fixunssfsi>
 9a8:	60 93 43 01 	sts	0x0143, r22
			cnt2s = 0;
 9ac:	10 92 44 01 	sts	0x0144, r1
		}

		if(Timerflag == 1)
 9b0:	80 91 40 01 	lds	r24, 0x0140
 9b4:	81 30       	cpi	r24, 0x01	; 1
 9b6:	69 f5       	brne	.+90     	; 0xa12 <__vector_16+0x166>
		{
			nTime++;
 9b8:	80 91 56 01 	lds	r24, 0x0156
 9bc:	8f 5f       	subi	r24, 0xFF	; 255
 9be:	80 93 56 01 	sts	0x0156, r24
			nFND[0] = (TargetTime - nTime) / 10;
 9c2:	80 91 35 01 	lds	r24, 0x0135
 9c6:	20 91 56 01 	lds	r18, 0x0156
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	82 1b       	sub	r24, r18
 9ce:	91 09       	sbc	r25, r1
 9d0:	6a e0       	ldi	r22, 0x0A	; 10
 9d2:	70 e0       	ldi	r23, 0x00	; 0
 9d4:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divmodhi4>
 9d8:	60 93 41 01 	sts	0x0141, r22
			nFND[1] = (TargetTime - nTime) % 10;
 9dc:	80 91 35 01 	lds	r24, 0x0135
 9e0:	20 91 56 01 	lds	r18, 0x0156
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	82 1b       	sub	r24, r18
 9e8:	91 09       	sbc	r25, r1
 9ea:	6a e0       	ldi	r22, 0x0A	; 10
 9ec:	70 e0       	ldi	r23, 0x00	; 0
 9ee:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divmodhi4>
 9f2:	80 93 42 01 	sts	0x0142, r24
			PORTB = DISFND[nFND[1]]; 
 9f6:	e0 91 42 01 	lds	r30, 0x0142
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	ea 5c       	subi	r30, 0xCA	; 202
 9fe:	fe 4f       	sbci	r31, 0xFE	; 254
 a00:	80 81       	ld	r24, Z
 a02:	88 bb       	out	0x18, r24	; 24
			PORTD = DISFND[nFND[0]];
 a04:	e0 91 41 01 	lds	r30, 0x0141
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	ea 5c       	subi	r30, 0xCA	; 202
 a0c:	fe 4f       	sbci	r31, 0xFE	; 254
 a0e:	80 81       	ld	r24, Z
 a10:	82 bb       	out	0x12, r24	; 18
		}
	}
}
 a12:	ff 91       	pop	r31
 a14:	ef 91       	pop	r30
 a16:	bf 91       	pop	r27
 a18:	af 91       	pop	r26
 a1a:	9f 91       	pop	r25
 a1c:	8f 91       	pop	r24
 a1e:	7f 91       	pop	r23
 a20:	6f 91       	pop	r22
 a22:	5f 91       	pop	r21
 a24:	4f 91       	pop	r20
 a26:	3f 91       	pop	r19
 a28:	2f 91       	pop	r18
 a2a:	0f 90       	pop	r0
 a2c:	0b be       	out	0x3b, r0	; 59
 a2e:	0f 90       	pop	r0
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	0f 90       	pop	r0
 a34:	1f 90       	pop	r1
 a36:	18 95       	reti

00000a38 <exit>:
 a38:	f8 94       	cli
 a3a:	0c 94 30 07 	jmp	0xe60	; 0xe60 <_exit>

00000a3e <__subsf3>:
 a3e:	50 58       	subi	r21, 0x80	; 128

00000a40 <__addsf3>:
 a40:	bb 27       	eor	r27, r27
 a42:	aa 27       	eor	r26, r26
 a44:	0e d0       	rcall	.+28     	; 0xa62 <__addsf3x>
 a46:	e0 c0       	rjmp	.+448    	; 0xc08 <__fp_round>
 a48:	d1 d0       	rcall	.+418    	; 0xbec <__fp_pscA>
 a4a:	30 f0       	brcs	.+12     	; 0xa58 <__addsf3+0x18>
 a4c:	d6 d0       	rcall	.+428    	; 0xbfa <__fp_pscB>
 a4e:	20 f0       	brcs	.+8      	; 0xa58 <__addsf3+0x18>
 a50:	31 f4       	brne	.+12     	; 0xa5e <__addsf3+0x1e>
 a52:	9f 3f       	cpi	r25, 0xFF	; 255
 a54:	11 f4       	brne	.+4      	; 0xa5a <__addsf3+0x1a>
 a56:	1e f4       	brtc	.+6      	; 0xa5e <__addsf3+0x1e>
 a58:	c6 c0       	rjmp	.+396    	; 0xbe6 <__fp_nan>
 a5a:	0e f4       	brtc	.+2      	; 0xa5e <__addsf3+0x1e>
 a5c:	e0 95       	com	r30
 a5e:	e7 fb       	bst	r30, 7
 a60:	bc c0       	rjmp	.+376    	; 0xbda <__fp_inf>

00000a62 <__addsf3x>:
 a62:	e9 2f       	mov	r30, r25
 a64:	e2 d0       	rcall	.+452    	; 0xc2a <__fp_split3>
 a66:	80 f3       	brcs	.-32     	; 0xa48 <__addsf3+0x8>
 a68:	ba 17       	cp	r27, r26
 a6a:	62 07       	cpc	r22, r18
 a6c:	73 07       	cpc	r23, r19
 a6e:	84 07       	cpc	r24, r20
 a70:	95 07       	cpc	r25, r21
 a72:	18 f0       	brcs	.+6      	; 0xa7a <__addsf3x+0x18>
 a74:	71 f4       	brne	.+28     	; 0xa92 <__addsf3x+0x30>
 a76:	9e f5       	brtc	.+102    	; 0xade <__addsf3x+0x7c>
 a78:	fa c0       	rjmp	.+500    	; 0xc6e <__fp_zero>
 a7a:	0e f4       	brtc	.+2      	; 0xa7e <__addsf3x+0x1c>
 a7c:	e0 95       	com	r30
 a7e:	0b 2e       	mov	r0, r27
 a80:	ba 2f       	mov	r27, r26
 a82:	a0 2d       	mov	r26, r0
 a84:	0b 01       	movw	r0, r22
 a86:	b9 01       	movw	r22, r18
 a88:	90 01       	movw	r18, r0
 a8a:	0c 01       	movw	r0, r24
 a8c:	ca 01       	movw	r24, r20
 a8e:	a0 01       	movw	r20, r0
 a90:	11 24       	eor	r1, r1
 a92:	ff 27       	eor	r31, r31
 a94:	59 1b       	sub	r21, r25
 a96:	99 f0       	breq	.+38     	; 0xabe <__addsf3x+0x5c>
 a98:	59 3f       	cpi	r21, 0xF9	; 249
 a9a:	50 f4       	brcc	.+20     	; 0xab0 <__addsf3x+0x4e>
 a9c:	50 3e       	cpi	r21, 0xE0	; 224
 a9e:	68 f1       	brcs	.+90     	; 0xafa <__addsf3x+0x98>
 aa0:	1a 16       	cp	r1, r26
 aa2:	f0 40       	sbci	r31, 0x00	; 0
 aa4:	a2 2f       	mov	r26, r18
 aa6:	23 2f       	mov	r18, r19
 aa8:	34 2f       	mov	r19, r20
 aaa:	44 27       	eor	r20, r20
 aac:	58 5f       	subi	r21, 0xF8	; 248
 aae:	f3 cf       	rjmp	.-26     	; 0xa96 <__addsf3x+0x34>
 ab0:	46 95       	lsr	r20
 ab2:	37 95       	ror	r19
 ab4:	27 95       	ror	r18
 ab6:	a7 95       	ror	r26
 ab8:	f0 40       	sbci	r31, 0x00	; 0
 aba:	53 95       	inc	r21
 abc:	c9 f7       	brne	.-14     	; 0xab0 <__addsf3x+0x4e>
 abe:	7e f4       	brtc	.+30     	; 0xade <__addsf3x+0x7c>
 ac0:	1f 16       	cp	r1, r31
 ac2:	ba 0b       	sbc	r27, r26
 ac4:	62 0b       	sbc	r22, r18
 ac6:	73 0b       	sbc	r23, r19
 ac8:	84 0b       	sbc	r24, r20
 aca:	ba f0       	brmi	.+46     	; 0xafa <__addsf3x+0x98>
 acc:	91 50       	subi	r25, 0x01	; 1
 ace:	a1 f0       	breq	.+40     	; 0xaf8 <__addsf3x+0x96>
 ad0:	ff 0f       	add	r31, r31
 ad2:	bb 1f       	adc	r27, r27
 ad4:	66 1f       	adc	r22, r22
 ad6:	77 1f       	adc	r23, r23
 ad8:	88 1f       	adc	r24, r24
 ada:	c2 f7       	brpl	.-16     	; 0xacc <__addsf3x+0x6a>
 adc:	0e c0       	rjmp	.+28     	; 0xafa <__addsf3x+0x98>
 ade:	ba 0f       	add	r27, r26
 ae0:	62 1f       	adc	r22, r18
 ae2:	73 1f       	adc	r23, r19
 ae4:	84 1f       	adc	r24, r20
 ae6:	48 f4       	brcc	.+18     	; 0xafa <__addsf3x+0x98>
 ae8:	87 95       	ror	r24
 aea:	77 95       	ror	r23
 aec:	67 95       	ror	r22
 aee:	b7 95       	ror	r27
 af0:	f7 95       	ror	r31
 af2:	9e 3f       	cpi	r25, 0xFE	; 254
 af4:	08 f0       	brcs	.+2      	; 0xaf8 <__addsf3x+0x96>
 af6:	b3 cf       	rjmp	.-154    	; 0xa5e <__addsf3+0x1e>
 af8:	93 95       	inc	r25
 afa:	88 0f       	add	r24, r24
 afc:	08 f0       	brcs	.+2      	; 0xb00 <__addsf3x+0x9e>
 afe:	99 27       	eor	r25, r25
 b00:	ee 0f       	add	r30, r30
 b02:	97 95       	ror	r25
 b04:	87 95       	ror	r24
 b06:	08 95       	ret

00000b08 <__fixunssfsi>:
 b08:	98 d0       	rcall	.+304    	; 0xc3a <__fp_splitA>
 b0a:	88 f0       	brcs	.+34     	; 0xb2e <__fixunssfsi+0x26>
 b0c:	9f 57       	subi	r25, 0x7F	; 127
 b0e:	90 f0       	brcs	.+36     	; 0xb34 <__fixunssfsi+0x2c>
 b10:	b9 2f       	mov	r27, r25
 b12:	99 27       	eor	r25, r25
 b14:	b7 51       	subi	r27, 0x17	; 23
 b16:	a0 f0       	brcs	.+40     	; 0xb40 <__fixunssfsi+0x38>
 b18:	d1 f0       	breq	.+52     	; 0xb4e <__fixunssfsi+0x46>
 b1a:	66 0f       	add	r22, r22
 b1c:	77 1f       	adc	r23, r23
 b1e:	88 1f       	adc	r24, r24
 b20:	99 1f       	adc	r25, r25
 b22:	1a f0       	brmi	.+6      	; 0xb2a <__fixunssfsi+0x22>
 b24:	ba 95       	dec	r27
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__fixunssfsi+0x12>
 b28:	12 c0       	rjmp	.+36     	; 0xb4e <__fixunssfsi+0x46>
 b2a:	b1 30       	cpi	r27, 0x01	; 1
 b2c:	81 f0       	breq	.+32     	; 0xb4e <__fixunssfsi+0x46>
 b2e:	9f d0       	rcall	.+318    	; 0xc6e <__fp_zero>
 b30:	b1 e0       	ldi	r27, 0x01	; 1
 b32:	08 95       	ret
 b34:	9c c0       	rjmp	.+312    	; 0xc6e <__fp_zero>
 b36:	67 2f       	mov	r22, r23
 b38:	78 2f       	mov	r23, r24
 b3a:	88 27       	eor	r24, r24
 b3c:	b8 5f       	subi	r27, 0xF8	; 248
 b3e:	39 f0       	breq	.+14     	; 0xb4e <__fixunssfsi+0x46>
 b40:	b9 3f       	cpi	r27, 0xF9	; 249
 b42:	cc f3       	brlt	.-14     	; 0xb36 <__fixunssfsi+0x2e>
 b44:	86 95       	lsr	r24
 b46:	77 95       	ror	r23
 b48:	67 95       	ror	r22
 b4a:	b3 95       	inc	r27
 b4c:	d9 f7       	brne	.-10     	; 0xb44 <__fixunssfsi+0x3c>
 b4e:	3e f4       	brtc	.+14     	; 0xb5e <__fixunssfsi+0x56>
 b50:	90 95       	com	r25
 b52:	80 95       	com	r24
 b54:	70 95       	com	r23
 b56:	61 95       	neg	r22
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	08 95       	ret

00000b60 <__floatunsisf>:
 b60:	e8 94       	clt
 b62:	09 c0       	rjmp	.+18     	; 0xb76 <__floatsisf+0x12>

00000b64 <__floatsisf>:
 b64:	97 fb       	bst	r25, 7
 b66:	3e f4       	brtc	.+14     	; 0xb76 <__floatsisf+0x12>
 b68:	90 95       	com	r25
 b6a:	80 95       	com	r24
 b6c:	70 95       	com	r23
 b6e:	61 95       	neg	r22
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	99 23       	and	r25, r25
 b78:	a9 f0       	breq	.+42     	; 0xba4 <__floatsisf+0x40>
 b7a:	f9 2f       	mov	r31, r25
 b7c:	96 e9       	ldi	r25, 0x96	; 150
 b7e:	bb 27       	eor	r27, r27
 b80:	93 95       	inc	r25
 b82:	f6 95       	lsr	r31
 b84:	87 95       	ror	r24
 b86:	77 95       	ror	r23
 b88:	67 95       	ror	r22
 b8a:	b7 95       	ror	r27
 b8c:	f1 11       	cpse	r31, r1
 b8e:	f8 cf       	rjmp	.-16     	; 0xb80 <__floatsisf+0x1c>
 b90:	fa f4       	brpl	.+62     	; 0xbd0 <__floatsisf+0x6c>
 b92:	bb 0f       	add	r27, r27
 b94:	11 f4       	brne	.+4      	; 0xb9a <__floatsisf+0x36>
 b96:	60 ff       	sbrs	r22, 0
 b98:	1b c0       	rjmp	.+54     	; 0xbd0 <__floatsisf+0x6c>
 b9a:	6f 5f       	subi	r22, 0xFF	; 255
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <__floatsisf+0x6c>
 ba4:	88 23       	and	r24, r24
 ba6:	11 f0       	breq	.+4      	; 0xbac <__floatsisf+0x48>
 ba8:	96 e9       	ldi	r25, 0x96	; 150
 baa:	11 c0       	rjmp	.+34     	; 0xbce <__floatsisf+0x6a>
 bac:	77 23       	and	r23, r23
 bae:	21 f0       	breq	.+8      	; 0xbb8 <__floatsisf+0x54>
 bb0:	9e e8       	ldi	r25, 0x8E	; 142
 bb2:	87 2f       	mov	r24, r23
 bb4:	76 2f       	mov	r23, r22
 bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__floatsisf+0x5e>
 bb8:	66 23       	and	r22, r22
 bba:	71 f0       	breq	.+28     	; 0xbd8 <__floatsisf+0x74>
 bbc:	96 e8       	ldi	r25, 0x86	; 134
 bbe:	86 2f       	mov	r24, r22
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	60 e0       	ldi	r22, 0x00	; 0
 bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__floatsisf+0x6c>
 bc6:	9a 95       	dec	r25
 bc8:	66 0f       	add	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	da f7       	brpl	.-10     	; 0xbc6 <__floatsisf+0x62>
 bd0:	88 0f       	add	r24, r24
 bd2:	96 95       	lsr	r25
 bd4:	87 95       	ror	r24
 bd6:	97 f9       	bld	r25, 7
 bd8:	08 95       	ret

00000bda <__fp_inf>:
 bda:	97 f9       	bld	r25, 7
 bdc:	9f 67       	ori	r25, 0x7F	; 127
 bde:	80 e8       	ldi	r24, 0x80	; 128
 be0:	70 e0       	ldi	r23, 0x00	; 0
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	08 95       	ret

00000be6 <__fp_nan>:
 be6:	9f ef       	ldi	r25, 0xFF	; 255
 be8:	80 ec       	ldi	r24, 0xC0	; 192
 bea:	08 95       	ret

00000bec <__fp_pscA>:
 bec:	00 24       	eor	r0, r0
 bee:	0a 94       	dec	r0
 bf0:	16 16       	cp	r1, r22
 bf2:	17 06       	cpc	r1, r23
 bf4:	18 06       	cpc	r1, r24
 bf6:	09 06       	cpc	r0, r25
 bf8:	08 95       	ret

00000bfa <__fp_pscB>:
 bfa:	00 24       	eor	r0, r0
 bfc:	0a 94       	dec	r0
 bfe:	12 16       	cp	r1, r18
 c00:	13 06       	cpc	r1, r19
 c02:	14 06       	cpc	r1, r20
 c04:	05 06       	cpc	r0, r21
 c06:	08 95       	ret

00000c08 <__fp_round>:
 c08:	09 2e       	mov	r0, r25
 c0a:	03 94       	inc	r0
 c0c:	00 0c       	add	r0, r0
 c0e:	11 f4       	brne	.+4      	; 0xc14 <__fp_round+0xc>
 c10:	88 23       	and	r24, r24
 c12:	52 f0       	brmi	.+20     	; 0xc28 <__fp_round+0x20>
 c14:	bb 0f       	add	r27, r27
 c16:	40 f4       	brcc	.+16     	; 0xc28 <__fp_round+0x20>
 c18:	bf 2b       	or	r27, r31
 c1a:	11 f4       	brne	.+4      	; 0xc20 <__fp_round+0x18>
 c1c:	60 ff       	sbrs	r22, 0
 c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__fp_round+0x20>
 c20:	6f 5f       	subi	r22, 0xFF	; 255
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	08 95       	ret

00000c2a <__fp_split3>:
 c2a:	57 fd       	sbrc	r21, 7
 c2c:	90 58       	subi	r25, 0x80	; 128
 c2e:	44 0f       	add	r20, r20
 c30:	55 1f       	adc	r21, r21
 c32:	59 f0       	breq	.+22     	; 0xc4a <__fp_splitA+0x10>
 c34:	5f 3f       	cpi	r21, 0xFF	; 255
 c36:	71 f0       	breq	.+28     	; 0xc54 <__fp_splitA+0x1a>
 c38:	47 95       	ror	r20

00000c3a <__fp_splitA>:
 c3a:	88 0f       	add	r24, r24
 c3c:	97 fb       	bst	r25, 7
 c3e:	99 1f       	adc	r25, r25
 c40:	61 f0       	breq	.+24     	; 0xc5a <__fp_splitA+0x20>
 c42:	9f 3f       	cpi	r25, 0xFF	; 255
 c44:	79 f0       	breq	.+30     	; 0xc64 <__fp_splitA+0x2a>
 c46:	87 95       	ror	r24
 c48:	08 95       	ret
 c4a:	12 16       	cp	r1, r18
 c4c:	13 06       	cpc	r1, r19
 c4e:	14 06       	cpc	r1, r20
 c50:	55 1f       	adc	r21, r21
 c52:	f2 cf       	rjmp	.-28     	; 0xc38 <__fp_split3+0xe>
 c54:	46 95       	lsr	r20
 c56:	f1 df       	rcall	.-30     	; 0xc3a <__fp_splitA>
 c58:	08 c0       	rjmp	.+16     	; 0xc6a <__fp_splitA+0x30>
 c5a:	16 16       	cp	r1, r22
 c5c:	17 06       	cpc	r1, r23
 c5e:	18 06       	cpc	r1, r24
 c60:	99 1f       	adc	r25, r25
 c62:	f1 cf       	rjmp	.-30     	; 0xc46 <__fp_splitA+0xc>
 c64:	86 95       	lsr	r24
 c66:	71 05       	cpc	r23, r1
 c68:	61 05       	cpc	r22, r1
 c6a:	08 94       	sec
 c6c:	08 95       	ret

00000c6e <__fp_zero>:
 c6e:	e8 94       	clt

00000c70 <__fp_szero>:
 c70:	bb 27       	eor	r27, r27
 c72:	66 27       	eor	r22, r22
 c74:	77 27       	eor	r23, r23
 c76:	cb 01       	movw	r24, r22
 c78:	97 f9       	bld	r25, 7
 c7a:	08 95       	ret

00000c7c <__mulsf3>:
 c7c:	0b d0       	rcall	.+22     	; 0xc94 <__mulsf3x>
 c7e:	c4 cf       	rjmp	.-120    	; 0xc08 <__fp_round>
 c80:	b5 df       	rcall	.-150    	; 0xbec <__fp_pscA>
 c82:	28 f0       	brcs	.+10     	; 0xc8e <__mulsf3+0x12>
 c84:	ba df       	rcall	.-140    	; 0xbfa <__fp_pscB>
 c86:	18 f0       	brcs	.+6      	; 0xc8e <__mulsf3+0x12>
 c88:	95 23       	and	r25, r21
 c8a:	09 f0       	breq	.+2      	; 0xc8e <__mulsf3+0x12>
 c8c:	a6 cf       	rjmp	.-180    	; 0xbda <__fp_inf>
 c8e:	ab cf       	rjmp	.-170    	; 0xbe6 <__fp_nan>
 c90:	11 24       	eor	r1, r1
 c92:	ee cf       	rjmp	.-36     	; 0xc70 <__fp_szero>

00000c94 <__mulsf3x>:
 c94:	ca df       	rcall	.-108    	; 0xc2a <__fp_split3>
 c96:	a0 f3       	brcs	.-24     	; 0xc80 <__mulsf3+0x4>

00000c98 <__mulsf3_pse>:
 c98:	95 9f       	mul	r25, r21
 c9a:	d1 f3       	breq	.-12     	; 0xc90 <__mulsf3+0x14>
 c9c:	95 0f       	add	r25, r21
 c9e:	50 e0       	ldi	r21, 0x00	; 0
 ca0:	55 1f       	adc	r21, r21
 ca2:	62 9f       	mul	r22, r18
 ca4:	f0 01       	movw	r30, r0
 ca6:	72 9f       	mul	r23, r18
 ca8:	bb 27       	eor	r27, r27
 caa:	f0 0d       	add	r31, r0
 cac:	b1 1d       	adc	r27, r1
 cae:	63 9f       	mul	r22, r19
 cb0:	aa 27       	eor	r26, r26
 cb2:	f0 0d       	add	r31, r0
 cb4:	b1 1d       	adc	r27, r1
 cb6:	aa 1f       	adc	r26, r26
 cb8:	64 9f       	mul	r22, r20
 cba:	66 27       	eor	r22, r22
 cbc:	b0 0d       	add	r27, r0
 cbe:	a1 1d       	adc	r26, r1
 cc0:	66 1f       	adc	r22, r22
 cc2:	82 9f       	mul	r24, r18
 cc4:	22 27       	eor	r18, r18
 cc6:	b0 0d       	add	r27, r0
 cc8:	a1 1d       	adc	r26, r1
 cca:	62 1f       	adc	r22, r18
 ccc:	73 9f       	mul	r23, r19
 cce:	b0 0d       	add	r27, r0
 cd0:	a1 1d       	adc	r26, r1
 cd2:	62 1f       	adc	r22, r18
 cd4:	83 9f       	mul	r24, r19
 cd6:	a0 0d       	add	r26, r0
 cd8:	61 1d       	adc	r22, r1
 cda:	22 1f       	adc	r18, r18
 cdc:	74 9f       	mul	r23, r20
 cde:	33 27       	eor	r19, r19
 ce0:	a0 0d       	add	r26, r0
 ce2:	61 1d       	adc	r22, r1
 ce4:	23 1f       	adc	r18, r19
 ce6:	84 9f       	mul	r24, r20
 ce8:	60 0d       	add	r22, r0
 cea:	21 1d       	adc	r18, r1
 cec:	82 2f       	mov	r24, r18
 cee:	76 2f       	mov	r23, r22
 cf0:	6a 2f       	mov	r22, r26
 cf2:	11 24       	eor	r1, r1
 cf4:	9f 57       	subi	r25, 0x7F	; 127
 cf6:	50 40       	sbci	r21, 0x00	; 0
 cf8:	8a f0       	brmi	.+34     	; 0xd1c <__mulsf3_pse+0x84>
 cfa:	e1 f0       	breq	.+56     	; 0xd34 <__mulsf3_pse+0x9c>
 cfc:	88 23       	and	r24, r24
 cfe:	4a f0       	brmi	.+18     	; 0xd12 <__mulsf3_pse+0x7a>
 d00:	ee 0f       	add	r30, r30
 d02:	ff 1f       	adc	r31, r31
 d04:	bb 1f       	adc	r27, r27
 d06:	66 1f       	adc	r22, r22
 d08:	77 1f       	adc	r23, r23
 d0a:	88 1f       	adc	r24, r24
 d0c:	91 50       	subi	r25, 0x01	; 1
 d0e:	50 40       	sbci	r21, 0x00	; 0
 d10:	a9 f7       	brne	.-22     	; 0xcfc <__mulsf3_pse+0x64>
 d12:	9e 3f       	cpi	r25, 0xFE	; 254
 d14:	51 05       	cpc	r21, r1
 d16:	70 f0       	brcs	.+28     	; 0xd34 <__mulsf3_pse+0x9c>
 d18:	60 cf       	rjmp	.-320    	; 0xbda <__fp_inf>
 d1a:	aa cf       	rjmp	.-172    	; 0xc70 <__fp_szero>
 d1c:	5f 3f       	cpi	r21, 0xFF	; 255
 d1e:	ec f3       	brlt	.-6      	; 0xd1a <__mulsf3_pse+0x82>
 d20:	98 3e       	cpi	r25, 0xE8	; 232
 d22:	dc f3       	brlt	.-10     	; 0xd1a <__mulsf3_pse+0x82>
 d24:	86 95       	lsr	r24
 d26:	77 95       	ror	r23
 d28:	67 95       	ror	r22
 d2a:	b7 95       	ror	r27
 d2c:	f7 95       	ror	r31
 d2e:	e7 95       	ror	r30
 d30:	9f 5f       	subi	r25, 0xFF	; 255
 d32:	c1 f7       	brne	.-16     	; 0xd24 <__mulsf3_pse+0x8c>
 d34:	fe 2b       	or	r31, r30
 d36:	88 0f       	add	r24, r24
 d38:	91 1d       	adc	r25, r1
 d3a:	96 95       	lsr	r25
 d3c:	87 95       	ror	r24
 d3e:	97 f9       	bld	r25, 7
 d40:	08 95       	ret

00000d42 <__mulsi3>:
 d42:	62 9f       	mul	r22, r18
 d44:	d0 01       	movw	r26, r0
 d46:	73 9f       	mul	r23, r19
 d48:	f0 01       	movw	r30, r0
 d4a:	82 9f       	mul	r24, r18
 d4c:	e0 0d       	add	r30, r0
 d4e:	f1 1d       	adc	r31, r1
 d50:	64 9f       	mul	r22, r20
 d52:	e0 0d       	add	r30, r0
 d54:	f1 1d       	adc	r31, r1
 d56:	92 9f       	mul	r25, r18
 d58:	f0 0d       	add	r31, r0
 d5a:	83 9f       	mul	r24, r19
 d5c:	f0 0d       	add	r31, r0
 d5e:	74 9f       	mul	r23, r20
 d60:	f0 0d       	add	r31, r0
 d62:	65 9f       	mul	r22, r21
 d64:	f0 0d       	add	r31, r0
 d66:	99 27       	eor	r25, r25
 d68:	72 9f       	mul	r23, r18
 d6a:	b0 0d       	add	r27, r0
 d6c:	e1 1d       	adc	r30, r1
 d6e:	f9 1f       	adc	r31, r25
 d70:	63 9f       	mul	r22, r19
 d72:	b0 0d       	add	r27, r0
 d74:	e1 1d       	adc	r30, r1
 d76:	f9 1f       	adc	r31, r25
 d78:	bd 01       	movw	r22, r26
 d7a:	cf 01       	movw	r24, r30
 d7c:	11 24       	eor	r1, r1
 d7e:	08 95       	ret

00000d80 <__udivmodqi4>:
 d80:	99 1b       	sub	r25, r25
 d82:	79 e0       	ldi	r23, 0x09	; 9
 d84:	04 c0       	rjmp	.+8      	; 0xd8e <__udivmodqi4_ep>

00000d86 <__udivmodqi4_loop>:
 d86:	99 1f       	adc	r25, r25
 d88:	96 17       	cp	r25, r22
 d8a:	08 f0       	brcs	.+2      	; 0xd8e <__udivmodqi4_ep>
 d8c:	96 1b       	sub	r25, r22

00000d8e <__udivmodqi4_ep>:
 d8e:	88 1f       	adc	r24, r24
 d90:	7a 95       	dec	r23
 d92:	c9 f7       	brne	.-14     	; 0xd86 <__udivmodqi4_loop>
 d94:	80 95       	com	r24
 d96:	08 95       	ret

00000d98 <__udivmodhi4>:
 d98:	aa 1b       	sub	r26, r26
 d9a:	bb 1b       	sub	r27, r27
 d9c:	51 e1       	ldi	r21, 0x11	; 17
 d9e:	07 c0       	rjmp	.+14     	; 0xdae <__udivmodhi4_ep>

00000da0 <__udivmodhi4_loop>:
 da0:	aa 1f       	adc	r26, r26
 da2:	bb 1f       	adc	r27, r27
 da4:	a6 17       	cp	r26, r22
 da6:	b7 07       	cpc	r27, r23
 da8:	10 f0       	brcs	.+4      	; 0xdae <__udivmodhi4_ep>
 daa:	a6 1b       	sub	r26, r22
 dac:	b7 0b       	sbc	r27, r23

00000dae <__udivmodhi4_ep>:
 dae:	88 1f       	adc	r24, r24
 db0:	99 1f       	adc	r25, r25
 db2:	5a 95       	dec	r21
 db4:	a9 f7       	brne	.-22     	; 0xda0 <__udivmodhi4_loop>
 db6:	80 95       	com	r24
 db8:	90 95       	com	r25
 dba:	bc 01       	movw	r22, r24
 dbc:	cd 01       	movw	r24, r26
 dbe:	08 95       	ret

00000dc0 <__divmodhi4>:
 dc0:	97 fb       	bst	r25, 7
 dc2:	09 2e       	mov	r0, r25
 dc4:	07 26       	eor	r0, r23
 dc6:	0a d0       	rcall	.+20     	; 0xddc <__divmodhi4_neg1>
 dc8:	77 fd       	sbrc	r23, 7
 dca:	04 d0       	rcall	.+8      	; 0xdd4 <__divmodhi4_neg2>
 dcc:	e5 df       	rcall	.-54     	; 0xd98 <__udivmodhi4>
 dce:	06 d0       	rcall	.+12     	; 0xddc <__divmodhi4_neg1>
 dd0:	00 20       	and	r0, r0
 dd2:	1a f4       	brpl	.+6      	; 0xdda <__divmodhi4_exit>

00000dd4 <__divmodhi4_neg2>:
 dd4:	70 95       	com	r23
 dd6:	61 95       	neg	r22
 dd8:	7f 4f       	sbci	r23, 0xFF	; 255

00000dda <__divmodhi4_exit>:
 dda:	08 95       	ret

00000ddc <__divmodhi4_neg1>:
 ddc:	f6 f7       	brtc	.-4      	; 0xdda <__divmodhi4_exit>
 dde:	90 95       	com	r25
 de0:	81 95       	neg	r24
 de2:	9f 4f       	sbci	r25, 0xFF	; 255
 de4:	08 95       	ret

00000de6 <__divmodsi4>:
 de6:	97 fb       	bst	r25, 7
 de8:	09 2e       	mov	r0, r25
 dea:	05 26       	eor	r0, r21
 dec:	0e d0       	rcall	.+28     	; 0xe0a <__divmodsi4_neg1>
 dee:	57 fd       	sbrc	r21, 7
 df0:	04 d0       	rcall	.+8      	; 0xdfa <__divmodsi4_neg2>
 df2:	14 d0       	rcall	.+40     	; 0xe1c <__udivmodsi4>
 df4:	0a d0       	rcall	.+20     	; 0xe0a <__divmodsi4_neg1>
 df6:	00 1c       	adc	r0, r0
 df8:	38 f4       	brcc	.+14     	; 0xe08 <__divmodsi4_exit>

00000dfa <__divmodsi4_neg2>:
 dfa:	50 95       	com	r21
 dfc:	40 95       	com	r20
 dfe:	30 95       	com	r19
 e00:	21 95       	neg	r18
 e02:	3f 4f       	sbci	r19, 0xFF	; 255
 e04:	4f 4f       	sbci	r20, 0xFF	; 255
 e06:	5f 4f       	sbci	r21, 0xFF	; 255

00000e08 <__divmodsi4_exit>:
 e08:	08 95       	ret

00000e0a <__divmodsi4_neg1>:
 e0a:	f6 f7       	brtc	.-4      	; 0xe08 <__divmodsi4_exit>
 e0c:	90 95       	com	r25
 e0e:	80 95       	com	r24
 e10:	70 95       	com	r23
 e12:	61 95       	neg	r22
 e14:	7f 4f       	sbci	r23, 0xFF	; 255
 e16:	8f 4f       	sbci	r24, 0xFF	; 255
 e18:	9f 4f       	sbci	r25, 0xFF	; 255
 e1a:	08 95       	ret

00000e1c <__udivmodsi4>:
 e1c:	a1 e2       	ldi	r26, 0x21	; 33
 e1e:	1a 2e       	mov	r1, r26
 e20:	aa 1b       	sub	r26, r26
 e22:	bb 1b       	sub	r27, r27
 e24:	fd 01       	movw	r30, r26
 e26:	0d c0       	rjmp	.+26     	; 0xe42 <__udivmodsi4_ep>

00000e28 <__udivmodsi4_loop>:
 e28:	aa 1f       	adc	r26, r26
 e2a:	bb 1f       	adc	r27, r27
 e2c:	ee 1f       	adc	r30, r30
 e2e:	ff 1f       	adc	r31, r31
 e30:	a2 17       	cp	r26, r18
 e32:	b3 07       	cpc	r27, r19
 e34:	e4 07       	cpc	r30, r20
 e36:	f5 07       	cpc	r31, r21
 e38:	20 f0       	brcs	.+8      	; 0xe42 <__udivmodsi4_ep>
 e3a:	a2 1b       	sub	r26, r18
 e3c:	b3 0b       	sbc	r27, r19
 e3e:	e4 0b       	sbc	r30, r20
 e40:	f5 0b       	sbc	r31, r21

00000e42 <__udivmodsi4_ep>:
 e42:	66 1f       	adc	r22, r22
 e44:	77 1f       	adc	r23, r23
 e46:	88 1f       	adc	r24, r24
 e48:	99 1f       	adc	r25, r25
 e4a:	1a 94       	dec	r1
 e4c:	69 f7       	brne	.-38     	; 0xe28 <__udivmodsi4_loop>
 e4e:	60 95       	com	r22
 e50:	70 95       	com	r23
 e52:	80 95       	com	r24
 e54:	90 95       	com	r25
 e56:	9b 01       	movw	r18, r22
 e58:	ac 01       	movw	r20, r24
 e5a:	bd 01       	movw	r22, r26
 e5c:	cf 01       	movw	r24, r30
 e5e:	08 95       	ret

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
