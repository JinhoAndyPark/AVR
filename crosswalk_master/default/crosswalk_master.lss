
crosswalk_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001e  00800100  00800100  00000466  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001ee  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000052e  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001f6  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004d9  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000262  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000172  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  c6:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_16>:

unsigned char test;


ISR(TIMER0_OVF_vect)	// 2ms
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	TCNT0 = 131;
  de:	83 e8       	ldi	r24, 0x83	; 131
  e0:	82 bf       	out	0x32, r24	; 50

	count1sec++;
  e2:	80 91 03 01 	lds	r24, 0x0103
  e6:	90 91 04 01 	lds	r25, 0x0104
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 04 01 	sts	0x0104, r25
  f0:	80 93 03 01 	sts	0x0103, r24

	if(count1sec >= 500)
  f4:	84 5f       	subi	r24, 0xF4	; 244
  f6:	91 40       	sbci	r25, 0x01	; 1
  f8:	20 f0       	brcs	.+8      	; 0x102 <__vector_16+0x34>
	{
		count1sec = 0;
  fa:	10 92 04 01 	sts	0x0104, r1
  fe:	10 92 03 01 	sts	0x0103, r1
		{
			count4S++;
			if(count4S > 2)	StateSide4 = 0;
		} */
	}
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <Init_Timer0>:
}

void Init_Timer0(void)			// 타이머0 초기화
{
		                       
	SETBIT( TIMSK, TOIE0 );     	// 타이머0 오버플로어 ON
 112:	87 b7       	in	r24, 0x37	; 55
 114:	81 60       	ori	r24, 0x01	; 1
 116:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 131;					// 타이머0 상수 
 118:	83 e8       	ldi	r24, 0x83	; 131
 11a:	82 bf       	out	0x32, r24	; 50

	TCCR0 = ( 0 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		//분주비
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	83 bf       	out	0x33, r24	; 51
}
 120:	08 95       	ret

00000122 <Init_Uart0>:
void Init_Uart0(void)		//for xbee
{
	unsigned int Temp_UBRR0;
	Temp_UBRR0 = 16000000L/(16L * 9600) - 1;   	// 통신 보레이트 계산식

	UBRR0H = (Temp_UBRR0 >> 8);              // 통신속도 설정 9600
 122:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (Temp_UBRR0 & 0x00FF);
 126:	87 e6       	ldi	r24, 0x67	; 103
 128:	89 b9       	out	0x09, r24	; 9
		
	UCSR0A = (0<<RXC0)  | (1<<UDRE0);		// 수신,송신 상태비트 초기화
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	8b b9       	out	0x0b, r24	; 11
    UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);  	// 수신,송신,인터럽트 기능 활성화
 12e:	88 e9       	ldi	r24, 0x98	; 152
 130:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (3<<UCSZ00);				// START 1비트/DATA 8비트/STOP 1비트
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	80 93 95 00 	sts	0x0095, r24
		
	CLRBIT( DDRE, 0 );                         // RXD0 핀 입력으로 설정
 138:	10 98       	cbi	0x02, 0	; 2
	SETBIT( DDRE, 1 );                         // TXD0 핀 출력으로 설정		
 13a:	11 9a       	sbi	0x02, 1	; 2
}
 13c:	08 95       	ret

0000013e <Init_Uart1>:
void Init_Uart1(void)		//for bluetooth
{
	unsigned int Temp_UBRR1;
	Temp_UBRR1 = 16000000L/(16L * 9600) - 1;
	
	UBRR1H = (Temp_UBRR1 >> 8);              // 통신속도 설정
 13e:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = (Temp_UBRR1 & 0x00FF);
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	80 93 99 00 	sts	0x0099, r24

	UCSR1A = (0<<RXC1)  | (1<<UDRE1); 	// 수신,송신 상태비트 초기화
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	80 93 9b 00 	sts	0x009B, r24
	UCSR1B = (1<<RXEN1) | (1<<TXEN1)| (1<<RXCIE1);    	// 수신,송신 기능 활성화
 14e:	88 e9       	ldi	r24, 0x98	; 152
 150:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3<<UCSZ10);                   // START 1비트/DATA 8비트/STOP 1비트
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 9d 00 	sts	0x009D, r24
	
	CLRBIT( DDRD, 2 );                         // RXD1 핀 입력으로 설정
 15a:	8a 98       	cbi	0x11, 2	; 17
	SETBIT( DDRD, 3 );                         // TXD1 핀 출력으로 설정	
 15c:	8b 9a       	sbi	0x11, 3	; 17
}
 15e:	08 95       	ret

00000160 <Uart_Putch>:

void Uart_Putch(unsigned char Com, unsigned char PutData)
{
	switch(Com)
 160:	88 23       	and	r24, r24
 162:	19 f0       	breq	.+6      	; 0x16a <Uart_Putch+0xa>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	59 f4       	brne	.+22     	; 0x17e <Uart_Putch+0x1e>
 168:	04 c0       	rjmp	.+8      	; 0x172 <Uart_Putch+0x12>
	{
		case 0:
			while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
 16a:	5d 9b       	sbis	0x0b, 5	; 11
 16c:	fe cf       	rjmp	.-4      	; 0x16a <Uart_Putch+0xa>
			UDR0 = PutData;                     // 데이터를 전송한다
 16e:	6c b9       	out	0x0c, r22	; 12
 170:	08 95       	ret
			break;
		
		case 1:
			while(!( UCSR1A & (1<<UDRE1)) );    // 송신가능시점까지 대기
 172:	80 91 9b 00 	lds	r24, 0x009B
 176:	85 ff       	sbrs	r24, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <Uart_Putch+0x12>
			UDR1 = PutData;                     // 데이터를 전송한다
 17a:	60 93 9c 00 	sts	0x009C, r22
 17e:	08 95       	ret

00000180 <__vector_18>:
	
	SETBIT(SREG, 7); 
}
*/
ISR(USART0_RX_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	0b b6       	in	r0, 0x3b	; 59
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	1f 93       	push	r17
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	unsigned char data;
	
	CLRBIT(SREG, 7);
 1a8:	8f b7       	in	r24, 0x3f	; 63
 1aa:	8f 77       	andi	r24, 0x7F	; 127
 1ac:	8f bf       	out	0x3f, r24	; 63

	data = UDR0;
 1ae:	1c b1       	in	r17, 0x0c	; 12

	if(CheckFlag == 1)
 1b0:	80 91 00 01 	lds	r24, 0x0100
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	c1 f4       	brne	.+48     	; 0x1e8 <__vector_18+0x68>
	{
		CheckFlag = 0;
 1b8:	10 92 00 01 	sts	0x0100, r1
		NowSide = data;
 1bc:	10 93 01 01 	sts	0x0101, r17

		if(NowSide == '1')
 1c0:	80 91 01 01 	lds	r24, 0x0101
 1c4:	81 33       	cpi	r24, 0x31	; 49
 1c6:	61 f0       	breq	.+24     	; 0x1e0 <__vector_18+0x60>
		{
			Uart_Putch(1, 0xFF);
		}
		else if(NowSide == '2')
 1c8:	80 91 01 01 	lds	r24, 0x0101
 1cc:	82 33       	cpi	r24, 0x32	; 50
 1ce:	41 f0       	breq	.+16     	; 0x1e0 <__vector_18+0x60>
		{
			Uart_Putch(1, 0xFF);
		}
		else if(NowSide == '3')
 1d0:	80 91 01 01 	lds	r24, 0x0101
 1d4:	83 33       	cpi	r24, 0x33	; 51
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <__vector_18+0x60>
		{
			Uart_Putch(1, 0xFF);
		}
		else if(NowSide == '4')
 1d8:	80 91 01 01 	lds	r24, 0x0101
 1dc:	84 33       	cpi	r24, 0x34	; 52
 1de:	21 f4       	brne	.+8      	; 0x1e8 <__vector_18+0x68>
		{
			Uart_Putch(1, 0xFF);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	6f ef       	ldi	r22, 0xFF	; 255
 1e4:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch>
		}
	}

	if((data=='@') && (CheckFlag==0))	CheckFlag = 1;
 1e8:	10 34       	cpi	r17, 0x40	; 64
 1ea:	39 f4       	brne	.+14     	; 0x1fa <__vector_18+0x7a>
 1ec:	80 91 00 01 	lds	r24, 0x0100
 1f0:	88 23       	and	r24, r24
 1f2:	19 f4       	brne	.+6      	; 0x1fa <__vector_18+0x7a>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 00 01 	sts	0x0100, r24
	
	SETBIT(SREG, 7);
 1fa:	8f b7       	in	r24, 0x3f	; 63
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	8f bf       	out	0x3f, r24	; 63
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	1f 91       	pop	r17
 21a:	0f 90       	pop	r0
 21c:	0b be       	out	0x3b, r0	; 59
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <Uart_U16Bit_PutNum>:
			break;
	}
}

void Uart_U16Bit_PutNum(unsigned char Com, unsigned int NumData)
{
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	f8 2e       	mov	r15, r24
 230:	8b 01       	movw	r16, r22
	unsigned int TempData;

	TempData = NumData/10000;
	Uart_Putch(Com, TempData+48);	   // 10000 	자리 무조건 출력
 232:	cb 01       	movw	r24, r22
 234:	60 e1       	ldi	r22, 0x10	; 16
 236:	77 e2       	ldi	r23, 0x27	; 39
 238:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 23c:	60 5d       	subi	r22, 0xD0	; 208
 23e:	8f 2d       	mov	r24, r15
 240:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch>
	
	TempData = (NumData%10000)/1000;
	Uart_Putch(Com, TempData+48);	   // 1000	자리 무조건 출력
 244:	c8 01       	movw	r24, r16
 246:	60 e1       	ldi	r22, 0x10	; 16
 248:	77 e2       	ldi	r23, 0x27	; 39
 24a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 24e:	68 ee       	ldi	r22, 0xE8	; 232
 250:	73 e0       	ldi	r23, 0x03	; 3
 252:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 256:	60 5d       	subi	r22, 0xD0	; 208
 258:	8f 2d       	mov	r24, r15
 25a:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch>
	
	TempData = (NumData%1000)/100;
	Uart_Putch(Com, TempData+48);	   // 100	자리 무조건 출력
 25e:	c8 01       	movw	r24, r16
 260:	68 ee       	ldi	r22, 0xE8	; 232
 262:	73 e0       	ldi	r23, 0x03	; 3
 264:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 268:	64 e6       	ldi	r22, 0x64	; 100
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 270:	60 5d       	subi	r22, 0xD0	; 208
 272:	8f 2d       	mov	r24, r15
 274:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch>
	
	TempData = (NumData%100)/10;
	Uart_Putch(Com, TempData+48);	   // 10	자리 무조건 출력
 278:	c8 01       	movw	r24, r16
 27a:	64 e6       	ldi	r22, 0x64	; 100
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 282:	6a e0       	ldi	r22, 0x0A	; 10
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 28a:	60 5d       	subi	r22, 0xD0	; 208
 28c:	8f 2d       	mov	r24, r15
 28e:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch>
	
	TempData =	NumData%10;
	Uart_Putch(Com, TempData+48);	   // 1 	자리 무조건 출력
 292:	c8 01       	movw	r24, r16
 294:	6a e0       	ldi	r22, 0x0A	; 10
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 29c:	68 2f       	mov	r22, r24
 29e:	60 5d       	subi	r22, 0xD0	; 208
 2a0:	8f 2d       	mov	r24, r15
 2a2:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch>
}
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	08 95       	ret

000002ae <Init_ADC>:

void Init_ADC(void)
{
	DDRF = 0x00; 			   //ADC포트 입력 설정
 2ae:	10 92 61 00 	sts	0x0061, r1

	ADMUX = 0x00;
 2b2:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;			   //레지스터 초기화 및 AREF단자로 입력전압 사용
 2b4:	16 b8       	out	0x06, r1	; 6

	SETBIT( ADCSRA, ADPS0 );
 2b6:	30 9a       	sbi	0x06, 0	; 6
	SETBIT( ADCSRA, ADPS1 );
 2b8:	31 9a       	sbi	0x06, 1	; 6
	SETBIT( ADCSRA, ADPS2 );		//프리스케일러 128분주
 2ba:	32 9a       	sbi	0x06, 2	; 6


	SETBIT( ADCSRA, ADEN );		   	// ADC 인에이블
 2bc:	37 9a       	sbi	0x06, 7	; 6
	CLRBIT(ADCSR, ADFR);            // AD 컨버터 단일변환 모드
 2be:	35 98       	cbi	0x06, 5	; 6
    SETBIT(ADCSR, ADSC);            // AD 컨버터 변환 시작
 2c0:	36 9a       	sbi	0x06, 6	; 6
}
 2c2:	08 95       	ret

000002c4 <Init_Main>:
}


void Init_Main(void)
{
	CLRBIT(SREG, 7);           	// 전체인터럽트 사용금지
 2c4:	8f b7       	in	r24, 0x3f	; 63
 2c6:	8f 77       	andi	r24, 0x7F	; 127
 2c8:	8f bf       	out	0x3f, r24	; 63
}

void Init_Timer0(void)			// 타이머0 초기화
{
		                       
	SETBIT( TIMSK, TOIE0 );     	// 타이머0 오버플로어 ON
 2ca:	87 b7       	in	r24, 0x37	; 55
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 131;					// 타이머0 상수 
 2d0:	83 e8       	ldi	r24, 0x83	; 131
 2d2:	82 bf       	out	0x32, r24	; 50

	TCCR0 = ( 0 << CS00 ) | ( 1 << CS01 ) | ( 1 << CS02 );		//분주비
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	83 bf       	out	0x33, r24	; 51
void Init_Main(void)
{
	CLRBIT(SREG, 7);           	// 전체인터럽트 사용금지

	Init_Timer0();				// 초기화_타이머0
    Init_Uart0();  				// 초기화_시리얼통신0 : for xbee
 2d8:	0e 94 91 00 	call	0x122	; 0x122 <Init_Uart0>
    Init_Uart1();				// 초기화_시리얼통신1 : for BT
 2dc:	0e 94 9f 00 	call	0x13e	; 0x13e <Init_Uart1>
	Init_ADC();					//  for PSD sensor
 2e0:	0e 94 57 01 	call	0x2ae	; 0x2ae <Init_ADC>

	SETBIT(DDRA, 0);				// light signal CAR_RED
 2e4:	d0 9a       	sbi	0x1a, 0	; 26
	SETBIT(DDRA, 1);				// light signal CAR_YELLO
 2e6:	d1 9a       	sbi	0x1a, 1	; 26
	SETBIT(DDRA, 2);				// light signal CAR_GREEN
 2e8:	d2 9a       	sbi	0x1a, 2	; 26

	SETBIT(DDRA, 3);				// light signal HUM_GREEN
 2ea:	d3 9a       	sbi	0x1a, 3	; 26
	SETBIT(DDRA, 4);
 2ec:	d4 9a       	sbi	0x1a, 4	; 26

	SETBIT(PORTA, 0);				//init light : OFF
 2ee:	d8 9a       	sbi	0x1b, 0	; 27
	SETBIT(PORTA, 1);				//init light : OFF
 2f0:	d9 9a       	sbi	0x1b, 1	; 27
	SETBIT(PORTA, 2);				//init light : OFF
 2f2:	da 9a       	sbi	0x1b, 2	; 27
	SETBIT(PORTA, 3);				//init light : OFF
 2f4:	db 9a       	sbi	0x1b, 3	; 27
	SETBIT(PORTA, 4);				//init light : OFF
 2f6:	dc 9a       	sbi	0x1b, 4	; 27
	

    
	SETBIT(SREG, 7);            	// 전체인터럽트 사용허가
 2f8:	8f b7       	in	r24, 0x3f	; 63
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	8f bf       	out	0x3f, r24	; 63
}
 2fe:	08 95       	ret

00000300 <ADC_Read>:

unsigned int ADC_Read(unsigned char Channel)
{
	unsigned int value = 0;

	ADMUX = Channel;
 300:	87 b9       	out	0x07, r24	; 7
	
	SETBIT( ADCSRA, ADSC );		// ADC Conversion Start
 302:	36 9a       	sbi	0x06, 6	; 6
	
	while( ADCSRA & ( 1 << ADSC ) ); 	// wait ADC conversion complete
 304:	36 99       	sbic	0x06, 6	; 6
 306:	fe cf       	rjmp	.-4      	; 0x304 <ADC_Read+0x4>

	value = ADCL;
 308:	24 b1       	in	r18, 0x04	; 4
 30a:	30 e0       	ldi	r19, 0x00	; 0
	value |= (unsigned int)ADCH << 8;
 30c:	45 b1       	in	r20, 0x05	; 5
 30e:	94 2f       	mov	r25, r20
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	28 2b       	or	r18, r24
 314:	39 2b       	or	r19, r25
	
	return value;

}
 316:	c9 01       	movw	r24, r18
 318:	08 95       	ret

0000031a <main>:
	SETBIT(SREG, 7);
}


void main(void)
{ 
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
	Init_Main();		// 초기화_MCU
 31e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Init_Main>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 322:	c0 e9       	ldi	r28, 0x90	; 144
 324:	d1 e0       	ldi	r29, 0x01	; 1

	while(1)
	{
		PSD_val_L = ADC_Read(0);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 80 01 	call	0x300	; 0x300 <ADC_Read>
 32c:	90 93 0e 01 	sts	0x010E, r25
 330:	80 93 0d 01 	sts	0x010D, r24
		PSD_val_R = ADC_Read(1);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 80 01 	call	0x300	; 0x300 <ADC_Read>
 33a:	90 93 19 01 	sts	0x0119, r25
 33e:	80 93 18 01 	sts	0x0118, r24

		SETBIT(PORTA,0);
 342:	d8 9a       	sbi	0x1b, 0	; 27
		SETBIT(PORTA,3);
 344:	db 9a       	sbi	0x1b, 3	; 27
				
		CLRBIT(PORTA,1);
 346:	d9 98       	cbi	0x1b, 1	; 27
 348:	88 e8       	ldi	r24, 0x88	; 136
 34a:	93 e1       	ldi	r25, 0x13	; 19
 34c:	fe 01       	movw	r30, r28
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 352:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 354:	d9 f7       	brne	.-10     	; 0x34c <main+0x32>
		_delay_ms(500);
		SETBIT(PORTA,1);
 356:	d9 9a       	sbi	0x1b, 1	; 27
 358:	88 e8       	ldi	r24, 0x88	; 136
 35a:	93 e1       	ldi	r25, 0x13	; 19
 35c:	fe 01       	movw	r30, r28
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 362:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 364:	d9 f7       	brne	.-10     	; 0x35c <main+0x42>
		_delay_ms(500);

	
		if((PSD_val_L >= 150) || (PSD_val_R >= 150))
 366:	80 91 0d 01 	lds	r24, 0x010D
 36a:	90 91 0e 01 	lds	r25, 0x010E
 36e:	86 39       	cpi	r24, 0x96	; 150
 370:	91 05       	cpc	r25, r1
 372:	38 f4       	brcc	.+14     	; 0x382 <main+0x68>
 374:	80 91 18 01 	lds	r24, 0x0118
 378:	90 91 19 01 	lds	r25, 0x0119
 37c:	86 39       	cpi	r24, 0x96	; 150
 37e:	91 05       	cpc	r25, r1
 380:	18 f0       	brcs	.+6      	; 0x388 <main+0x6e>
		{
			light_signal_flag = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 05 01 	sts	0x0105, r24
		}

		if(light_signal_flag == 1)
 388:	80 91 05 01 	lds	r24, 0x0105
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	59 f6       	brne	.-106    	; 0x326 <main+0xc>
		{
			CLRBIT(PORTA,0);
 390:	d8 98       	cbi	0x1b, 0	; 27
			SETBIT(PORTA,1);
 392:	d9 9a       	sbi	0x1b, 1	; 27
			CLRBIT(PORTA,3);
 394:	db 98       	cbi	0x1b, 3	; 27
 396:	80 e5       	ldi	r24, 0x50	; 80
 398:	93 ec       	ldi	r25, 0xC3	; 195
 39a:	fe 01       	movw	r30, r28
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a2:	d9 f7       	brne	.-10     	; 0x39a <main+0x80>
			_delay_ms(5000);
			light_signal_flag = 0;
 3a4:	10 92 05 01 	sts	0x0105, r1
 3a8:	be cf       	rjmp	.-132    	; 0x326 <main+0xc>

000003aa <AsciiToChar>:
		Uart_Putch(1, PacketData[_count]);
	}
}
*/
unsigned char AsciiToChar(unsigned char *AsciiArray)
{
 3aa:	fc 01       	movw	r30, r24
 3ac:	81 81       	ldd	r24, Z+1	; 0x01
 3ae:	80 53       	subi	r24, 0x30	; 48
 3b0:	20 81       	ld	r18, Z
 3b2:	20 53       	subi	r18, 0x30	; 48
 3b4:	9a e0       	ldi	r25, 0x0A	; 10
 3b6:	29 9f       	mul	r18, r25
 3b8:	90 01       	movw	r18, r0
 3ba:	11 24       	eor	r1, r1
	BufArray[1] -= 48;

	Convert_val = BufArray[0]*10 + BufArray[1];

	return Convert_val;
}
 3bc:	82 0f       	add	r24, r18
 3be:	08 95       	ret

000003c0 <exit>:
 3c0:	f8 94       	cli
 3c2:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_exit>

000003c6 <__udivmodhi4>:
 3c6:	aa 1b       	sub	r26, r26
 3c8:	bb 1b       	sub	r27, r27
 3ca:	51 e1       	ldi	r21, 0x11	; 17
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <__udivmodhi4_ep>

000003ce <__udivmodhi4_loop>:
 3ce:	aa 1f       	adc	r26, r26
 3d0:	bb 1f       	adc	r27, r27
 3d2:	a6 17       	cp	r26, r22
 3d4:	b7 07       	cpc	r27, r23
 3d6:	10 f0       	brcs	.+4      	; 0x3dc <__udivmodhi4_ep>
 3d8:	a6 1b       	sub	r26, r22
 3da:	b7 0b       	sbc	r27, r23

000003dc <__udivmodhi4_ep>:
 3dc:	88 1f       	adc	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	5a 95       	dec	r21
 3e2:	a9 f7       	brne	.-22     	; 0x3ce <__udivmodhi4_loop>
 3e4:	80 95       	com	r24
 3e6:	90 95       	com	r25
 3e8:	bc 01       	movw	r22, r24
 3ea:	cd 01       	movw	r24, r26
 3ec:	08 95       	ret

000003ee <_exit>:
 3ee:	f8 94       	cli

000003f0 <__stop_program>:
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__stop_program>
