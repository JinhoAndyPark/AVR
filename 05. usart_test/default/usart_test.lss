
usart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000047  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000f6  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000009a  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000019f  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000009c  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000031  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 88 00 	call	0x110	; 0x110 <main>
  9c:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main_init>:
	}
}

void main_init(void)
{
	cbi(SREG,7);				//모든 인터럽트 비활성화
  a4:	8f b7       	in	r24, 0x3f	; 63
  a6:	8f 77       	andi	r24, 0x7F	; 127
  a8:	8f bf       	out	0x3f, r24	; 63
	UBRR0H = 0; UBRR0L = 16;   //57600bps(16MHZ)
  aa:	10 92 90 00 	sts	0x0090, r1
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	89 b9       	out	0x09, r24	; 9
	UCSR0A = (0<<RXC0) | (1<<UDRE0);
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (3<<UCSZ00);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 95 00 	sts	0x0095, r24
	cbi(DDRE,0); 
  c0:	10 98       	cbi	0x02, 0	; 2
	sbi(DDRE,1);
  c2:	11 9a       	sbi	0x02, 1	; 2
	sbi(SREG,7);
  c4:	8f b7       	in	r24, 0x3f	; 63
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	8f bf       	out	0x3f, r24	; 63

	
	

}
  ca:	08 95       	ret

000000cc <Uart_Putch>:

void Uart_Putch(unsigned char Com, unsigned char PutData)
{
	switch(Com)
  cc:	88 23       	and	r24, r24
  ce:	19 f0       	breq	.+6      	; 0xd6 <Uart_Putch+0xa>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	59 f4       	brne	.+22     	; 0xea <Uart_Putch+0x1e>
  d4:	04 c0       	rjmp	.+8      	; 0xde <Uart_Putch+0x12>
	{
		case 0:
			while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <Uart_Putch+0xa>
			UDR0 = PutData;                     // 데이터를 전송한다
  da:	6c b9       	out	0x0c, r22	; 12
			break;
  dc:	08 95       	ret
		
		case 1:
			while(!( UCSR1A & (1<<UDRE1)) );    // 송신가능시점까지 대기
  de:	80 91 9b 00 	lds	r24, 0x009B
  e2:	85 ff       	sbrs	r24, 5
  e4:	fc cf       	rjmp	.-8      	; 0xde <Uart_Putch+0x12>
			UDR1 = PutData;                     // 데이터를 전송한다
  e6:	60 93 9c 00 	sts	0x009C, r22
  ea:	08 95       	ret

000000ec <Uart_Getch>:
	}
}

unsigned char Uart_Getch(unsigned char Com)
{
	switch( Com )
  ec:	88 23       	and	r24, r24
  ee:	19 f0       	breq	.+6      	; 0xf6 <Uart_Getch+0xa>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	61 f4       	brne	.+24     	; 0x10c <Uart_Getch+0x20>
  f4:	04 c0       	rjmp	.+8      	; 0xfe <Uart_Getch+0x12>
	{
		case 0:
			while(!( UCSR0A & (1<<RXC0)) );    // 수신완료까지 대기
  f6:	5f 9b       	sbis	0x0b, 7	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <Uart_Getch+0xa>
			return UDR0;                       // 수신데이터 
  fa:	8c b1       	in	r24, 0x0c	; 12
  fc:	08 95       	ret
		
		case 1:
			while(!( UCSR1A & (1<<RXC1)) );    // 수신완료까지 대기
  fe:	80 91 9b 00 	lds	r24, 0x009B
 102:	87 ff       	sbrs	r24, 7
 104:	fc cf       	rjmp	.-8      	; 0xfe <Uart_Getch+0x12>
			return UDR1;                       // 순신데이터 반환
 106:	80 91 9c 00 	lds	r24, 0x009C
 10a:	08 95       	ret
		
        default:
			return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 10e:	08 95       	ret

00000110 <main>:
unsigned char Uart_Getch(unsigned char Com);


void main(void)
{
	main_init();
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <main_init>
	while(1)
	{             
		                       				
		Uart_Putch(0, Uart_Getch(0)); //키보드로부터 데이터를 수신 한걸 송신
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 76 00 	call	0xec	; 0xec <Uart_Getch>
 11a:	68 2f       	mov	r22, r24
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 66 00 	call	0xcc	; 0xcc <Uart_Putch>
 122:	f8 cf       	rjmp	.-16     	; 0x114 <main+0x4>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
